/* automatically generated by rust-bindgen 0.60.1 */

//! This module contains the "raw" functions and types from the game. They are generated by bindgen. It is generally recommended to try and use [`crate::api`] instead.
//!
//! For the documentation, see the symbol YAML files of pmdsky-debug at <https://github.com/UsernameFodder/pmdsky-debug/tree/master/symbols>.
#![allow(non_upper_case_globals)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(clippy::missing_safety_doc)]
#![allow(clippy::useless_transmute)]

#[repr(C)]
#[derive(Copy, Clone, Debug, Default, Eq, Hash, Ord, PartialEq, PartialOrd)]
pub struct __BindgenBitfieldUnit<Storage> {
    storage: Storage,
}
impl<Storage> __BindgenBitfieldUnit<Storage> {
    #[inline]
    pub const fn new(storage: Storage) -> Self {
        Self { storage }
    }
}
impl<Storage> __BindgenBitfieldUnit<Storage>
where
    Storage: AsRef<[u8]> + AsMut<[u8]>,
{
    #[inline]
    pub fn get_bit(&self, index: usize) -> bool {
        debug_assert!(index / 8 < self.storage.as_ref().len());
        let byte_index = index / 8;
        let byte = self.storage.as_ref()[byte_index];
        let bit_index = if cfg!(target_endian = "big") {
            7 - (index % 8)
        } else {
            index % 8
        };
        let mask = 1 << bit_index;
        byte & mask == mask
    }
    #[inline]
    pub fn set_bit(&mut self, index: usize, val: bool) {
        debug_assert!(index / 8 < self.storage.as_ref().len());
        let byte_index = index / 8;
        let byte = &mut self.storage.as_mut()[byte_index];
        let bit_index = if cfg!(target_endian = "big") {
            7 - (index % 8)
        } else {
            index % 8
        };
        let mask = 1 << bit_index;
        if val {
            *byte |= mask;
        } else {
            *byte &= !mask;
        }
    }
    #[inline]
    pub fn get(&self, bit_offset: usize, bit_width: u8) -> u64 {
        debug_assert!(bit_width <= 64);
        debug_assert!(bit_offset / 8 < self.storage.as_ref().len());
        debug_assert!((bit_offset + (bit_width as usize)) / 8 <= self.storage.as_ref().len());
        let mut val = 0;
        for i in 0..(bit_width as usize) {
            if self.get_bit(i + bit_offset) {
                let index = if cfg!(target_endian = "big") {
                    bit_width as usize - 1 - i
                } else {
                    i
                };
                val |= 1 << index;
            }
        }
        val
    }
    #[inline]
    pub fn set(&mut self, bit_offset: usize, bit_width: u8, val: u64) {
        debug_assert!(bit_width <= 64);
        debug_assert!(bit_offset / 8 < self.storage.as_ref().len());
        debug_assert!((bit_offset + (bit_width as usize)) / 8 <= self.storage.as_ref().len());
        for i in 0..(bit_width as usize) {
            let mask = 1 << i;
            let val_bit_is_set = val & mask == mask;
            let index = if cfg!(target_endian = "big") {
                bit_width as usize - 1 - i
            } else {
                i
            };
            self.set_bit(index + bit_offset, val_bit_is_set);
        }
    }
}
#[repr(C)]
pub struct __BindgenUnionField<T>(::core::marker::PhantomData<T>);
impl<T> __BindgenUnionField<T> {
    #[inline]
    pub const fn new() -> Self {
        __BindgenUnionField(::core::marker::PhantomData)
    }
    #[inline]
    pub unsafe fn as_ref(&self) -> &T {
        ::core::mem::transmute(self)
    }
    #[inline]
    pub unsafe fn as_mut(&mut self) -> &mut T {
        ::core::mem::transmute(self)
    }
}
impl<T> ::core::default::Default for __BindgenUnionField<T> {
    #[inline]
    fn default() -> Self {
        Self::new()
    }
}
impl<T> ::core::clone::Clone for __BindgenUnionField<T> {
    #[inline]
    fn clone(&self) -> Self {
        Self::new()
    }
}
impl<T> ::core::marker::Copy for __BindgenUnionField<T> {}
impl<T> ::core::fmt::Debug for __BindgenUnionField<T> {
    fn fmt(&self, fmt: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        fmt.write_str("__BindgenUnionField")
    }
}
impl<T> ::core::hash::Hash for __BindgenUnionField<T> {
    fn hash<H: ::core::hash::Hasher>(&self, _state: &mut H) {}
}
impl<T> ::core::cmp::PartialEq for __BindgenUnionField<T> {
    fn eq(&self, _other: &__BindgenUnionField<T>) -> bool {
        true
    }
}
impl<T> ::core::cmp::Eq for __BindgenUnionField<T> {}
pub type bool_ = u8;
pub type wchar_t = crate::ctypes::c_short;
pub type undefined1 = u8;
pub type undefined2 = u16;
pub type undefined4 = u32;
pub type undefined = undefined1;
pub mod overlay_group_id {
    pub type Type = crate::ctypes::c_uint;
    pub const OGROUP_NONE: Type = 0;
    pub const OGROUP_OVERLAY_0: Type = 1;
    pub const OGROUP_OVERLAY_10: Type = 2;
    pub const OGROUP_OVERLAY_35: Type = 3;
    pub const OGROUP_OVERLAY_1: Type = 4;
    pub const OGROUP_OVERLAY_2: Type = 5;
    pub const OGROUP_OVERLAY_3: Type = 6;
    pub const OGROUP_OVERLAY_6: Type = 7;
    pub const OGROUP_OVERLAY_4: Type = 8;
    pub const OGROUP_OVERLAY_5: Type = 9;
    pub const OGROUP_OVERLAY_7: Type = 10;
    pub const OGROUP_OVERLAY_8: Type = 11;
    pub const OGROUP_OVERLAY_9: Type = 12;
    pub const OGROUP_OVERLAY_11: Type = 13;
    pub const OGROUP_OVERLAY_29: Type = 14;
    pub const OGROUP_OVERLAY_34: Type = 15;
    pub const OGROUP_OVERLAY_12: Type = 16;
    pub const OGROUP_OVERLAY_13: Type = 17;
    pub const OGROUP_OVERLAY_14: Type = 18;
    pub const OGROUP_OVERLAY_15: Type = 19;
    pub const OGROUP_OVERLAY_16: Type = 20;
    pub const OGROUP_OVERLAY_17: Type = 21;
    pub const OGROUP_OVERLAY_18: Type = 22;
    pub const OGROUP_OVERLAY_19: Type = 23;
    pub const OGROUP_OVERLAY_20: Type = 24;
    pub const OGROUP_OVERLAY_21: Type = 25;
    pub const OGROUP_OVERLAY_22: Type = 26;
    pub const OGROUP_OVERLAY_23: Type = 27;
    pub const OGROUP_OVERLAY_24: Type = 28;
    pub const OGROUP_OVERLAY_25: Type = 29;
    pub const OGROUP_OVERLAY_26: Type = 30;
    pub const OGROUP_OVERLAY_27: Type = 31;
    pub const OGROUP_OVERLAY_28: Type = 32;
    pub const OGROUP_OVERLAY_30: Type = 33;
    pub const OGROUP_OVERLAY_31: Type = 34;
    pub const OGROUP_OVERLAY_32: Type = 35;
    pub const OGROUP_OVERLAY_33: Type = 36;
}
pub mod memory_alloc_flag {
    pub type Type = crate::ctypes::c_uint;
    pub const MEM_IN_USE: Type = 0;
    pub const MEM_OBJECT: Type = 1;
    pub const MEM_ARENA: Type = 2;
    pub const MEM_SUBARENA: Type = 3;
}
pub mod texture_format {
    pub type Type = crate::ctypes::c_uint;
    pub const TEXFORMAT_NONE: Type = 0;
    pub const TEXFORMAT_A3I5: Type = 1;
    pub const TEXFORMAT_4COLOR: Type = 2;
    pub const TEXFORMAT_16COLOR: Type = 3;
    pub const TEXFORMAT_256COLOR: Type = 4;
    pub const TEXFORMAT_COMPRESSED: Type = 5;
    pub const TEXFORMAT_A5I3: Type = 6;
    pub const TEXFORMAT_DIRECT: Type = 7;
}
impl monster_id {
    pub const MONSTER_NONE: monster_id = monster_id(0);
}
impl monster_id {
    pub const MONSTER_BULBASAUR: monster_id = monster_id(1);
}
impl monster_id {
    pub const MONSTER_IVYSAUR: monster_id = monster_id(2);
}
impl monster_id {
    pub const MONSTER_VENUSAUR: monster_id = monster_id(3);
}
impl monster_id {
    pub const MONSTER_CHARMANDER: monster_id = monster_id(4);
}
impl monster_id {
    pub const MONSTER_CHARMELEON: monster_id = monster_id(5);
}
impl monster_id {
    pub const MONSTER_CHARIZARD: monster_id = monster_id(6);
}
impl monster_id {
    pub const MONSTER_SQUIRTLE: monster_id = monster_id(7);
}
impl monster_id {
    pub const MONSTER_WARTORTLE: monster_id = monster_id(8);
}
impl monster_id {
    pub const MONSTER_BLASTOISE: monster_id = monster_id(9);
}
impl monster_id {
    pub const MONSTER_CATERPIE: monster_id = monster_id(10);
}
impl monster_id {
    pub const MONSTER_METAPOD: monster_id = monster_id(11);
}
impl monster_id {
    pub const MONSTER_BUTTERFREE: monster_id = monster_id(12);
}
impl monster_id {
    pub const MONSTER_WEEDLE: monster_id = monster_id(13);
}
impl monster_id {
    pub const MONSTER_KAKUNA: monster_id = monster_id(14);
}
impl monster_id {
    pub const MONSTER_BEEDRILL: monster_id = monster_id(15);
}
impl monster_id {
    pub const MONSTER_PIDGEY: monster_id = monster_id(16);
}
impl monster_id {
    pub const MONSTER_PIDGEOTTO: monster_id = monster_id(17);
}
impl monster_id {
    pub const MONSTER_PIDGEOT: monster_id = monster_id(18);
}
impl monster_id {
    pub const MONSTER_RATTATA: monster_id = monster_id(19);
}
impl monster_id {
    pub const MONSTER_RATICATE: monster_id = monster_id(20);
}
impl monster_id {
    pub const MONSTER_SPEAROW: monster_id = monster_id(21);
}
impl monster_id {
    pub const MONSTER_FEAROW: monster_id = monster_id(22);
}
impl monster_id {
    pub const MONSTER_EKANS: monster_id = monster_id(23);
}
impl monster_id {
    pub const MONSTER_ARBOK: monster_id = monster_id(24);
}
impl monster_id {
    pub const MONSTER_PIKACHU: monster_id = monster_id(25);
}
impl monster_id {
    pub const MONSTER_RAICHU: monster_id = monster_id(26);
}
impl monster_id {
    pub const MONSTER_SANDSHREW: monster_id = monster_id(27);
}
impl monster_id {
    pub const MONSTER_SANDSLASH: monster_id = monster_id(28);
}
impl monster_id {
    pub const MONSTER_NIDORAN_F: monster_id = monster_id(29);
}
impl monster_id {
    pub const MONSTER_NIDORINA: monster_id = monster_id(30);
}
impl monster_id {
    pub const MONSTER_NIDOQUEEN: monster_id = monster_id(31);
}
impl monster_id {
    pub const MONSTER_NIDORAN_M: monster_id = monster_id(32);
}
impl monster_id {
    pub const MONSTER_NIDORINO: monster_id = monster_id(33);
}
impl monster_id {
    pub const MONSTER_NIDOKING: monster_id = monster_id(34);
}
impl monster_id {
    pub const MONSTER_CLEFAIRY: monster_id = monster_id(35);
}
impl monster_id {
    pub const MONSTER_CLEFABLE: monster_id = monster_id(36);
}
impl monster_id {
    pub const MONSTER_VULPIX: monster_id = monster_id(37);
}
impl monster_id {
    pub const MONSTER_NINETALES: monster_id = monster_id(38);
}
impl monster_id {
    pub const MONSTER_JIGGLYPUFF: monster_id = monster_id(39);
}
impl monster_id {
    pub const MONSTER_WIGGLYTUFF: monster_id = monster_id(40);
}
impl monster_id {
    pub const MONSTER_ZUBAT: monster_id = monster_id(41);
}
impl monster_id {
    pub const MONSTER_GOLBAT: monster_id = monster_id(42);
}
impl monster_id {
    pub const MONSTER_ODDISH: monster_id = monster_id(43);
}
impl monster_id {
    pub const MONSTER_GLOOM: monster_id = monster_id(44);
}
impl monster_id {
    pub const MONSTER_VILEPLUME: monster_id = monster_id(45);
}
impl monster_id {
    pub const MONSTER_PARAS: monster_id = monster_id(46);
}
impl monster_id {
    pub const MONSTER_PARASECT: monster_id = monster_id(47);
}
impl monster_id {
    pub const MONSTER_VENONAT: monster_id = monster_id(48);
}
impl monster_id {
    pub const MONSTER_VENOMOTH: monster_id = monster_id(49);
}
impl monster_id {
    pub const MONSTER_DIGLETT: monster_id = monster_id(50);
}
impl monster_id {
    pub const MONSTER_DUGTRIO: monster_id = monster_id(51);
}
impl monster_id {
    pub const MONSTER_MEOWTH: monster_id = monster_id(52);
}
impl monster_id {
    pub const MONSTER_PERSIAN: monster_id = monster_id(53);
}
impl monster_id {
    pub const MONSTER_PSYDUCK: monster_id = monster_id(54);
}
impl monster_id {
    pub const MONSTER_GOLDUCK: monster_id = monster_id(55);
}
impl monster_id {
    pub const MONSTER_MANKEY: monster_id = monster_id(56);
}
impl monster_id {
    pub const MONSTER_PRIMEAPE: monster_id = monster_id(57);
}
impl monster_id {
    pub const MONSTER_GROWLITHE: monster_id = monster_id(58);
}
impl monster_id {
    pub const MONSTER_ARCANINE: monster_id = monster_id(59);
}
impl monster_id {
    pub const MONSTER_POLIWAG: monster_id = monster_id(60);
}
impl monster_id {
    pub const MONSTER_POLIWHIRL: monster_id = monster_id(61);
}
impl monster_id {
    pub const MONSTER_POLIWRATH: monster_id = monster_id(62);
}
impl monster_id {
    pub const MONSTER_ABRA: monster_id = monster_id(63);
}
impl monster_id {
    pub const MONSTER_KADABRA: monster_id = monster_id(64);
}
impl monster_id {
    pub const MONSTER_ALAKAZAM: monster_id = monster_id(65);
}
impl monster_id {
    pub const MONSTER_MACHOP: monster_id = monster_id(66);
}
impl monster_id {
    pub const MONSTER_MACHOKE: monster_id = monster_id(67);
}
impl monster_id {
    pub const MONSTER_MACHAMP: monster_id = monster_id(68);
}
impl monster_id {
    pub const MONSTER_BELLSPROUT: monster_id = monster_id(69);
}
impl monster_id {
    pub const MONSTER_WEEPINBELL: monster_id = monster_id(70);
}
impl monster_id {
    pub const MONSTER_VICTREEBEL: monster_id = monster_id(71);
}
impl monster_id {
    pub const MONSTER_TENTACOOL: monster_id = monster_id(72);
}
impl monster_id {
    pub const MONSTER_TENTACRUEL: monster_id = monster_id(73);
}
impl monster_id {
    pub const MONSTER_GEODUDE: monster_id = monster_id(74);
}
impl monster_id {
    pub const MONSTER_GRAVELER: monster_id = monster_id(75);
}
impl monster_id {
    pub const MONSTER_GOLEM: monster_id = monster_id(76);
}
impl monster_id {
    pub const MONSTER_PONYTA: monster_id = monster_id(77);
}
impl monster_id {
    pub const MONSTER_RAPIDASH: monster_id = monster_id(78);
}
impl monster_id {
    pub const MONSTER_SLOWPOKE: monster_id = monster_id(79);
}
impl monster_id {
    pub const MONSTER_SLOWBRO: monster_id = monster_id(80);
}
impl monster_id {
    pub const MONSTER_MAGNEMITE: monster_id = monster_id(81);
}
impl monster_id {
    pub const MONSTER_MAGNETON: monster_id = monster_id(82);
}
impl monster_id {
    pub const MONSTER_FARFETCHD: monster_id = monster_id(83);
}
impl monster_id {
    pub const MONSTER_DODUO: monster_id = monster_id(84);
}
impl monster_id {
    pub const MONSTER_DODRIO: monster_id = monster_id(85);
}
impl monster_id {
    pub const MONSTER_SEEL: monster_id = monster_id(86);
}
impl monster_id {
    pub const MONSTER_DEWGONG: monster_id = monster_id(87);
}
impl monster_id {
    pub const MONSTER_GRIMER: monster_id = monster_id(88);
}
impl monster_id {
    pub const MONSTER_MUK: monster_id = monster_id(89);
}
impl monster_id {
    pub const MONSTER_SHELLDER: monster_id = monster_id(90);
}
impl monster_id {
    pub const MONSTER_CLOYSTER: monster_id = monster_id(91);
}
impl monster_id {
    pub const MONSTER_GASTLY: monster_id = monster_id(92);
}
impl monster_id {
    pub const MONSTER_HAUNTER: monster_id = monster_id(93);
}
impl monster_id {
    pub const MONSTER_GENGAR: monster_id = monster_id(94);
}
impl monster_id {
    pub const MONSTER_ONIX: monster_id = monster_id(95);
}
impl monster_id {
    pub const MONSTER_DROWZEE: monster_id = monster_id(96);
}
impl monster_id {
    pub const MONSTER_HYPNO: monster_id = monster_id(97);
}
impl monster_id {
    pub const MONSTER_KRABBY: monster_id = monster_id(98);
}
impl monster_id {
    pub const MONSTER_KINGLER: monster_id = monster_id(99);
}
impl monster_id {
    pub const MONSTER_VOLTORB: monster_id = monster_id(100);
}
impl monster_id {
    pub const MONSTER_ELECTRODE: monster_id = monster_id(101);
}
impl monster_id {
    pub const MONSTER_EXEGGCUTE: monster_id = monster_id(102);
}
impl monster_id {
    pub const MONSTER_EXEGGUTOR: monster_id = monster_id(103);
}
impl monster_id {
    pub const MONSTER_CUBONE: monster_id = monster_id(104);
}
impl monster_id {
    pub const MONSTER_MAROWAK: monster_id = monster_id(105);
}
impl monster_id {
    pub const MONSTER_HITMONLEE: monster_id = monster_id(106);
}
impl monster_id {
    pub const MONSTER_HITMONCHAN: monster_id = monster_id(107);
}
impl monster_id {
    pub const MONSTER_LICKITUNG: monster_id = monster_id(108);
}
impl monster_id {
    pub const MONSTER_KOFFING: monster_id = monster_id(109);
}
impl monster_id {
    pub const MONSTER_WEEZING: monster_id = monster_id(110);
}
impl monster_id {
    pub const MONSTER_RHYHORN: monster_id = monster_id(111);
}
impl monster_id {
    pub const MONSTER_RHYDON: monster_id = monster_id(112);
}
impl monster_id {
    pub const MONSTER_CHANSEY: monster_id = monster_id(113);
}
impl monster_id {
    pub const MONSTER_TANGELA: monster_id = monster_id(114);
}
impl monster_id {
    pub const MONSTER_KANGASKHAN: monster_id = monster_id(115);
}
impl monster_id {
    pub const MONSTER_HORSEA: monster_id = monster_id(116);
}
impl monster_id {
    pub const MONSTER_SEADRA: monster_id = monster_id(117);
}
impl monster_id {
    pub const MONSTER_GOLDEEN: monster_id = monster_id(118);
}
impl monster_id {
    pub const MONSTER_SEAKING: monster_id = monster_id(119);
}
impl monster_id {
    pub const MONSTER_STARYU: monster_id = monster_id(120);
}
impl monster_id {
    pub const MONSTER_STARMIE: monster_id = monster_id(121);
}
impl monster_id {
    pub const MONSTER_MR_MIME: monster_id = monster_id(122);
}
impl monster_id {
    pub const MONSTER_SCYTHER: monster_id = monster_id(123);
}
impl monster_id {
    pub const MONSTER_JYNX: monster_id = monster_id(124);
}
impl monster_id {
    pub const MONSTER_ELECTABUZZ: monster_id = monster_id(125);
}
impl monster_id {
    pub const MONSTER_MAGMAR: monster_id = monster_id(126);
}
impl monster_id {
    pub const MONSTER_PINSIR: monster_id = monster_id(127);
}
impl monster_id {
    pub const MONSTER_TAUROS: monster_id = monster_id(128);
}
impl monster_id {
    pub const MONSTER_MAGIKARP: monster_id = monster_id(129);
}
impl monster_id {
    pub const MONSTER_GYARADOS: monster_id = monster_id(130);
}
impl monster_id {
    pub const MONSTER_LAPRAS: monster_id = monster_id(131);
}
impl monster_id {
    pub const MONSTER_DITTO: monster_id = monster_id(132);
}
impl monster_id {
    pub const MONSTER_EEVEE: monster_id = monster_id(133);
}
impl monster_id {
    pub const MONSTER_VAPOREON: monster_id = monster_id(134);
}
impl monster_id {
    pub const MONSTER_JOLTEON: monster_id = monster_id(135);
}
impl monster_id {
    pub const MONSTER_FLAREON: monster_id = monster_id(136);
}
impl monster_id {
    pub const MONSTER_PORYGON: monster_id = monster_id(137);
}
impl monster_id {
    pub const MONSTER_OMANYTE: monster_id = monster_id(138);
}
impl monster_id {
    pub const MONSTER_OMASTAR: monster_id = monster_id(139);
}
impl monster_id {
    pub const MONSTER_KABUTO: monster_id = monster_id(140);
}
impl monster_id {
    pub const MONSTER_KABUTOPS: monster_id = monster_id(141);
}
impl monster_id {
    pub const MONSTER_AERODACTYL: monster_id = monster_id(142);
}
impl monster_id {
    pub const MONSTER_SNORLAX: monster_id = monster_id(143);
}
impl monster_id {
    pub const MONSTER_ARTICUNO: monster_id = monster_id(144);
}
impl monster_id {
    pub const MONSTER_ZAPDOS: monster_id = monster_id(145);
}
impl monster_id {
    pub const MONSTER_MOLTRES: monster_id = monster_id(146);
}
impl monster_id {
    pub const MONSTER_DRATINI: monster_id = monster_id(147);
}
impl monster_id {
    pub const MONSTER_DRAGONAIR: monster_id = monster_id(148);
}
impl monster_id {
    pub const MONSTER_DRAGONITE: monster_id = monster_id(149);
}
impl monster_id {
    pub const MONSTER_MEWTWO: monster_id = monster_id(150);
}
impl monster_id {
    pub const MONSTER_MEW: monster_id = monster_id(151);
}
impl monster_id {
    pub const MONSTER_CHIKORITA: monster_id = monster_id(152);
}
impl monster_id {
    pub const MONSTER_BAYLEEF: monster_id = monster_id(153);
}
impl monster_id {
    pub const MONSTER_MEGANIUM: monster_id = monster_id(154);
}
impl monster_id {
    pub const MONSTER_CYNDAQUIL: monster_id = monster_id(155);
}
impl monster_id {
    pub const MONSTER_QUILAVA: monster_id = monster_id(156);
}
impl monster_id {
    pub const MONSTER_TYPHLOSION: monster_id = monster_id(157);
}
impl monster_id {
    pub const MONSTER_TOTODILE: monster_id = monster_id(158);
}
impl monster_id {
    pub const MONSTER_CROCONAW: monster_id = monster_id(159);
}
impl monster_id {
    pub const MONSTER_FERALIGATR: monster_id = monster_id(160);
}
impl monster_id {
    pub const MONSTER_SENTRET: monster_id = monster_id(161);
}
impl monster_id {
    pub const MONSTER_FURRET: monster_id = monster_id(162);
}
impl monster_id {
    pub const MONSTER_HOOTHOOT: monster_id = monster_id(163);
}
impl monster_id {
    pub const MONSTER_NOCTOWL: monster_id = monster_id(164);
}
impl monster_id {
    pub const MONSTER_LEDYBA: monster_id = monster_id(165);
}
impl monster_id {
    pub const MONSTER_LEDIAN: monster_id = monster_id(166);
}
impl monster_id {
    pub const MONSTER_SPINARAK: monster_id = monster_id(167);
}
impl monster_id {
    pub const MONSTER_ARIADOS: monster_id = monster_id(168);
}
impl monster_id {
    pub const MONSTER_CROBAT: monster_id = monster_id(169);
}
impl monster_id {
    pub const MONSTER_CHINCHOU: monster_id = monster_id(170);
}
impl monster_id {
    pub const MONSTER_LANTURN: monster_id = monster_id(171);
}
impl monster_id {
    pub const MONSTER_PICHU: monster_id = monster_id(172);
}
impl monster_id {
    pub const MONSTER_CLEFFA: monster_id = monster_id(173);
}
impl monster_id {
    pub const MONSTER_IGGLYBUFF: monster_id = monster_id(174);
}
impl monster_id {
    pub const MONSTER_TOGEPI: monster_id = monster_id(175);
}
impl monster_id {
    pub const MONSTER_TOGETIC: monster_id = monster_id(176);
}
impl monster_id {
    pub const MONSTER_NATU: monster_id = monster_id(177);
}
impl monster_id {
    pub const MONSTER_XATU: monster_id = monster_id(178);
}
impl monster_id {
    pub const MONSTER_MAREEP: monster_id = monster_id(179);
}
impl monster_id {
    pub const MONSTER_FLAAFFY: monster_id = monster_id(180);
}
impl monster_id {
    pub const MONSTER_AMPHAROS: monster_id = monster_id(181);
}
impl monster_id {
    pub const MONSTER_BELLOSSOM: monster_id = monster_id(182);
}
impl monster_id {
    pub const MONSTER_MARILL: monster_id = monster_id(183);
}
impl monster_id {
    pub const MONSTER_AZUMARILL: monster_id = monster_id(184);
}
impl monster_id {
    pub const MONSTER_SUDOWOODO: monster_id = monster_id(185);
}
impl monster_id {
    pub const MONSTER_POLITOED: monster_id = monster_id(186);
}
impl monster_id {
    pub const MONSTER_HOPPIP: monster_id = monster_id(187);
}
impl monster_id {
    pub const MONSTER_SKIPLOOM: monster_id = monster_id(188);
}
impl monster_id {
    pub const MONSTER_JUMPLUFF: monster_id = monster_id(189);
}
impl monster_id {
    pub const MONSTER_AIPOM: monster_id = monster_id(190);
}
impl monster_id {
    pub const MONSTER_SUNKERN: monster_id = monster_id(191);
}
impl monster_id {
    pub const MONSTER_SUNFLORA: monster_id = monster_id(192);
}
impl monster_id {
    pub const MONSTER_YANMA: monster_id = monster_id(193);
}
impl monster_id {
    pub const MONSTER_WOOPER: monster_id = monster_id(194);
}
impl monster_id {
    pub const MONSTER_QUAGSIRE: monster_id = monster_id(195);
}
impl monster_id {
    pub const MONSTER_ESPEON: monster_id = monster_id(196);
}
impl monster_id {
    pub const MONSTER_UMBREON: monster_id = monster_id(197);
}
impl monster_id {
    pub const MONSTER_MURKROW: monster_id = monster_id(198);
}
impl monster_id {
    pub const MONSTER_SLOWKING: monster_id = monster_id(199);
}
impl monster_id {
    pub const MONSTER_MISDREAVUS: monster_id = monster_id(200);
}
impl monster_id {
    pub const MONSTER_UNOWN_A: monster_id = monster_id(201);
}
impl monster_id {
    pub const MONSTER_UNOWN_B: monster_id = monster_id(202);
}
impl monster_id {
    pub const MONSTER_UNOWN_C: monster_id = monster_id(203);
}
impl monster_id {
    pub const MONSTER_UNOWN_D: monster_id = monster_id(204);
}
impl monster_id {
    pub const MONSTER_UNOWN_E: monster_id = monster_id(205);
}
impl monster_id {
    pub const MONSTER_UNOWN_F: monster_id = monster_id(206);
}
impl monster_id {
    pub const MONSTER_UNOWN_G: monster_id = monster_id(207);
}
impl monster_id {
    pub const MONSTER_UNOWN_H: monster_id = monster_id(208);
}
impl monster_id {
    pub const MONSTER_UNOWN_I: monster_id = monster_id(209);
}
impl monster_id {
    pub const MONSTER_UNOWN_J: monster_id = monster_id(210);
}
impl monster_id {
    pub const MONSTER_UNOWN_K: monster_id = monster_id(211);
}
impl monster_id {
    pub const MONSTER_UNOWN_L: monster_id = monster_id(212);
}
impl monster_id {
    pub const MONSTER_UNOWN_M: monster_id = monster_id(213);
}
impl monster_id {
    pub const MONSTER_UNOWN_N: monster_id = monster_id(214);
}
impl monster_id {
    pub const MONSTER_UNOWN_O: monster_id = monster_id(215);
}
impl monster_id {
    pub const MONSTER_UNOWN_P: monster_id = monster_id(216);
}
impl monster_id {
    pub const MONSTER_UNOWN_Q: monster_id = monster_id(217);
}
impl monster_id {
    pub const MONSTER_UNOWN_R: monster_id = monster_id(218);
}
impl monster_id {
    pub const MONSTER_UNOWN_S: monster_id = monster_id(219);
}
impl monster_id {
    pub const MONSTER_UNOWN_T: monster_id = monster_id(220);
}
impl monster_id {
    pub const MONSTER_UNOWN_U: monster_id = monster_id(221);
}
impl monster_id {
    pub const MONSTER_UNOWN_V: monster_id = monster_id(222);
}
impl monster_id {
    pub const MONSTER_UNOWN_W: monster_id = monster_id(223);
}
impl monster_id {
    pub const MONSTER_UNOWN_X: monster_id = monster_id(224);
}
impl monster_id {
    pub const MONSTER_UNOWN_Y: monster_id = monster_id(225);
}
impl monster_id {
    pub const MONSTER_UNOWN_Z: monster_id = monster_id(226);
}
impl monster_id {
    pub const MONSTER_UNOWN_EXCLAMATION: monster_id = monster_id(227);
}
impl monster_id {
    pub const MONSTER_UNOWN_QUESTION: monster_id = monster_id(228);
}
impl monster_id {
    pub const MONSTER_WOBBUFFET: monster_id = monster_id(229);
}
impl monster_id {
    pub const MONSTER_GIRAFARIG: monster_id = monster_id(230);
}
impl monster_id {
    pub const MONSTER_PINECO: monster_id = monster_id(231);
}
impl monster_id {
    pub const MONSTER_FORRETRESS: monster_id = monster_id(232);
}
impl monster_id {
    pub const MONSTER_DUNSPARCE: monster_id = monster_id(233);
}
impl monster_id {
    pub const MONSTER_GLIGAR: monster_id = monster_id(234);
}
impl monster_id {
    pub const MONSTER_STEELIX: monster_id = monster_id(235);
}
impl monster_id {
    pub const MONSTER_SNUBBULL: monster_id = monster_id(236);
}
impl monster_id {
    pub const MONSTER_GRANBULL: monster_id = monster_id(237);
}
impl monster_id {
    pub const MONSTER_QWILFISH: monster_id = monster_id(238);
}
impl monster_id {
    pub const MONSTER_SCIZOR: monster_id = monster_id(239);
}
impl monster_id {
    pub const MONSTER_SHUCKLE: monster_id = monster_id(240);
}
impl monster_id {
    pub const MONSTER_HERACROSS: monster_id = monster_id(241);
}
impl monster_id {
    pub const MONSTER_SNEASEL: monster_id = monster_id(242);
}
impl monster_id {
    pub const MONSTER_TEDDIURSA: monster_id = monster_id(243);
}
impl monster_id {
    pub const MONSTER_URSARING: monster_id = monster_id(244);
}
impl monster_id {
    pub const MONSTER_SLUGMA: monster_id = monster_id(245);
}
impl monster_id {
    pub const MONSTER_MAGCARGO: monster_id = monster_id(246);
}
impl monster_id {
    pub const MONSTER_SWINUB: monster_id = monster_id(247);
}
impl monster_id {
    pub const MONSTER_PILOSWINE: monster_id = monster_id(248);
}
impl monster_id {
    pub const MONSTER_CORSOLA: monster_id = monster_id(249);
}
impl monster_id {
    pub const MONSTER_REMORAID: monster_id = monster_id(250);
}
impl monster_id {
    pub const MONSTER_OCTILLERY: monster_id = monster_id(251);
}
impl monster_id {
    pub const MONSTER_DELIBIRD: monster_id = monster_id(252);
}
impl monster_id {
    pub const MONSTER_MANTINE: monster_id = monster_id(253);
}
impl monster_id {
    pub const MONSTER_SKARMORY: monster_id = monster_id(254);
}
impl monster_id {
    pub const MONSTER_HOUNDOUR: monster_id = monster_id(255);
}
impl monster_id {
    pub const MONSTER_HOUNDOOM: monster_id = monster_id(256);
}
impl monster_id {
    pub const MONSTER_KINGDRA: monster_id = monster_id(257);
}
impl monster_id {
    pub const MONSTER_PHANPY: monster_id = monster_id(258);
}
impl monster_id {
    pub const MONSTER_DONPHAN: monster_id = monster_id(259);
}
impl monster_id {
    pub const MONSTER_PORYGON2: monster_id = monster_id(260);
}
impl monster_id {
    pub const MONSTER_STANTLER: monster_id = monster_id(261);
}
impl monster_id {
    pub const MONSTER_SMEARGLE: monster_id = monster_id(262);
}
impl monster_id {
    pub const MONSTER_TYROGUE: monster_id = monster_id(263);
}
impl monster_id {
    pub const MONSTER_HITMONTOP: monster_id = monster_id(264);
}
impl monster_id {
    pub const MONSTER_SMOOCHUM: monster_id = monster_id(265);
}
impl monster_id {
    pub const MONSTER_ELEKID: monster_id = monster_id(266);
}
impl monster_id {
    pub const MONSTER_MAGBY: monster_id = monster_id(267);
}
impl monster_id {
    pub const MONSTER_MILTANK: monster_id = monster_id(268);
}
impl monster_id {
    pub const MONSTER_BLISSEY: monster_id = monster_id(269);
}
impl monster_id {
    pub const MONSTER_RAIKOU: monster_id = monster_id(270);
}
impl monster_id {
    pub const MONSTER_ENTEI: monster_id = monster_id(271);
}
impl monster_id {
    pub const MONSTER_SUICUNE: monster_id = monster_id(272);
}
impl monster_id {
    pub const MONSTER_LARVITAR: monster_id = monster_id(273);
}
impl monster_id {
    pub const MONSTER_PUPITAR: monster_id = monster_id(274);
}
impl monster_id {
    pub const MONSTER_TYRANITAR: monster_id = monster_id(275);
}
impl monster_id {
    pub const MONSTER_LUGIA: monster_id = monster_id(276);
}
impl monster_id {
    pub const MONSTER_HO_OH: monster_id = monster_id(277);
}
impl monster_id {
    pub const MONSTER_CELEBI: monster_id = monster_id(278);
}
impl monster_id {
    pub const MONSTER_SHINY_CELEBI: monster_id = monster_id(279);
}
impl monster_id {
    pub const MONSTER_TREECKO: monster_id = monster_id(280);
}
impl monster_id {
    pub const MONSTER_GROVYLE: monster_id = monster_id(281);
}
impl monster_id {
    pub const MONSTER_SCEPTILE: monster_id = monster_id(282);
}
impl monster_id {
    pub const MONSTER_TORCHIC: monster_id = monster_id(283);
}
impl monster_id {
    pub const MONSTER_COMBUSKEN: monster_id = monster_id(284);
}
impl monster_id {
    pub const MONSTER_BLAZIKEN: monster_id = monster_id(285);
}
impl monster_id {
    pub const MONSTER_MUDKIP: monster_id = monster_id(286);
}
impl monster_id {
    pub const MONSTER_MARSHTOMP: monster_id = monster_id(287);
}
impl monster_id {
    pub const MONSTER_SWAMPERT: monster_id = monster_id(288);
}
impl monster_id {
    pub const MONSTER_POOCHYENA: monster_id = monster_id(289);
}
impl monster_id {
    pub const MONSTER_MIGHTYENA: monster_id = monster_id(290);
}
impl monster_id {
    pub const MONSTER_ZIGZAGOON: monster_id = monster_id(291);
}
impl monster_id {
    pub const MONSTER_LINOONE: monster_id = monster_id(292);
}
impl monster_id {
    pub const MONSTER_WURMPLE: monster_id = monster_id(293);
}
impl monster_id {
    pub const MONSTER_SILCOON: monster_id = monster_id(294);
}
impl monster_id {
    pub const MONSTER_BEAUTIFLY: monster_id = monster_id(295);
}
impl monster_id {
    pub const MONSTER_CASCOON: monster_id = monster_id(296);
}
impl monster_id {
    pub const MONSTER_DUSTOX: monster_id = monster_id(297);
}
impl monster_id {
    pub const MONSTER_LOTAD: monster_id = monster_id(298);
}
impl monster_id {
    pub const MONSTER_LOMBRE: monster_id = monster_id(299);
}
impl monster_id {
    pub const MONSTER_LUDICOLO: monster_id = monster_id(300);
}
impl monster_id {
    pub const MONSTER_SEEDOT: monster_id = monster_id(301);
}
impl monster_id {
    pub const MONSTER_NUZLEAF: monster_id = monster_id(302);
}
impl monster_id {
    pub const MONSTER_SHIFTRY: monster_id = monster_id(303);
}
impl monster_id {
    pub const MONSTER_TAILLOW: monster_id = monster_id(304);
}
impl monster_id {
    pub const MONSTER_SWELLOW: monster_id = monster_id(305);
}
impl monster_id {
    pub const MONSTER_WINGULL: monster_id = monster_id(306);
}
impl monster_id {
    pub const MONSTER_PELIPPER: monster_id = monster_id(307);
}
impl monster_id {
    pub const MONSTER_RALTS: monster_id = monster_id(308);
}
impl monster_id {
    pub const MONSTER_KIRLIA: monster_id = monster_id(309);
}
impl monster_id {
    pub const MONSTER_GARDEVOIR: monster_id = monster_id(310);
}
impl monster_id {
    pub const MONSTER_SURSKIT: monster_id = monster_id(311);
}
impl monster_id {
    pub const MONSTER_MASQUERAIN: monster_id = monster_id(312);
}
impl monster_id {
    pub const MONSTER_SHROOMISH: monster_id = monster_id(313);
}
impl monster_id {
    pub const MONSTER_BRELOOM: monster_id = monster_id(314);
}
impl monster_id {
    pub const MONSTER_SLAKOTH: monster_id = monster_id(315);
}
impl monster_id {
    pub const MONSTER_VIGOROTH: monster_id = monster_id(316);
}
impl monster_id {
    pub const MONSTER_SLAKING: monster_id = monster_id(317);
}
impl monster_id {
    pub const MONSTER_NINCADA: monster_id = monster_id(318);
}
impl monster_id {
    pub const MONSTER_NINJASK: monster_id = monster_id(319);
}
impl monster_id {
    pub const MONSTER_SHEDINJA: monster_id = monster_id(320);
}
impl monster_id {
    pub const MONSTER_WHISMUR: monster_id = monster_id(321);
}
impl monster_id {
    pub const MONSTER_LOUDRED: monster_id = monster_id(322);
}
impl monster_id {
    pub const MONSTER_EXPLOUD: monster_id = monster_id(323);
}
impl monster_id {
    pub const MONSTER_MAKUHITA: monster_id = monster_id(324);
}
impl monster_id {
    pub const MONSTER_HARIYAMA: monster_id = monster_id(325);
}
impl monster_id {
    pub const MONSTER_AZURILL: monster_id = monster_id(326);
}
impl monster_id {
    pub const MONSTER_NOSEPASS: monster_id = monster_id(327);
}
impl monster_id {
    pub const MONSTER_SKITTY: monster_id = monster_id(328);
}
impl monster_id {
    pub const MONSTER_DELCATTY: monster_id = monster_id(329);
}
impl monster_id {
    pub const MONSTER_SABLEYE: monster_id = monster_id(330);
}
impl monster_id {
    pub const MONSTER_MAWILE: monster_id = monster_id(331);
}
impl monster_id {
    pub const MONSTER_ARON: monster_id = monster_id(332);
}
impl monster_id {
    pub const MONSTER_LAIRON: monster_id = monster_id(333);
}
impl monster_id {
    pub const MONSTER_AGGRON: monster_id = monster_id(334);
}
impl monster_id {
    pub const MONSTER_MEDITITE: monster_id = monster_id(335);
}
impl monster_id {
    pub const MONSTER_MEDICHAM: monster_id = monster_id(336);
}
impl monster_id {
    pub const MONSTER_ELECTRIKE: monster_id = monster_id(337);
}
impl monster_id {
    pub const MONSTER_MANECTRIC: monster_id = monster_id(338);
}
impl monster_id {
    pub const MONSTER_PLUSLE: monster_id = monster_id(339);
}
impl monster_id {
    pub const MONSTER_MINUN: monster_id = monster_id(340);
}
impl monster_id {
    pub const MONSTER_VOLBEAT: monster_id = monster_id(341);
}
impl monster_id {
    pub const MONSTER_ILLUMISE: monster_id = monster_id(342);
}
impl monster_id {
    pub const MONSTER_ROSELIA: monster_id = monster_id(343);
}
impl monster_id {
    pub const MONSTER_GULPIN: monster_id = monster_id(344);
}
impl monster_id {
    pub const MONSTER_SWALOT: monster_id = monster_id(345);
}
impl monster_id {
    pub const MONSTER_CARVANHA: monster_id = monster_id(346);
}
impl monster_id {
    pub const MONSTER_SHARPEDO: monster_id = monster_id(347);
}
impl monster_id {
    pub const MONSTER_WAILMER: monster_id = monster_id(348);
}
impl monster_id {
    pub const MONSTER_WAILORD: monster_id = monster_id(349);
}
impl monster_id {
    pub const MONSTER_NUMEL: monster_id = monster_id(350);
}
impl monster_id {
    pub const MONSTER_CAMERUPT: monster_id = monster_id(351);
}
impl monster_id {
    pub const MONSTER_TORKOAL: monster_id = monster_id(352);
}
impl monster_id {
    pub const MONSTER_SPOINK: monster_id = monster_id(353);
}
impl monster_id {
    pub const MONSTER_GRUMPIG: monster_id = monster_id(354);
}
impl monster_id {
    pub const MONSTER_SPINDA: monster_id = monster_id(355);
}
impl monster_id {
    pub const MONSTER_TRAPINCH: monster_id = monster_id(356);
}
impl monster_id {
    pub const MONSTER_VIBRAVA: monster_id = monster_id(357);
}
impl monster_id {
    pub const MONSTER_FLYGON: monster_id = monster_id(358);
}
impl monster_id {
    pub const MONSTER_CACNEA: monster_id = monster_id(359);
}
impl monster_id {
    pub const MONSTER_CACTURNE: monster_id = monster_id(360);
}
impl monster_id {
    pub const MONSTER_SWABLU: monster_id = monster_id(361);
}
impl monster_id {
    pub const MONSTER_ALTARIA: monster_id = monster_id(362);
}
impl monster_id {
    pub const MONSTER_ZANGOOSE: monster_id = monster_id(363);
}
impl monster_id {
    pub const MONSTER_SEVIPER: monster_id = monster_id(364);
}
impl monster_id {
    pub const MONSTER_LUNATONE: monster_id = monster_id(365);
}
impl monster_id {
    pub const MONSTER_SOLROCK: monster_id = monster_id(366);
}
impl monster_id {
    pub const MONSTER_BARBOACH: monster_id = monster_id(367);
}
impl monster_id {
    pub const MONSTER_WHISCASH: monster_id = monster_id(368);
}
impl monster_id {
    pub const MONSTER_CORPHISH: monster_id = monster_id(369);
}
impl monster_id {
    pub const MONSTER_CRAWDAUNT: monster_id = monster_id(370);
}
impl monster_id {
    pub const MONSTER_BALTOY: monster_id = monster_id(371);
}
impl monster_id {
    pub const MONSTER_CLAYDOL: monster_id = monster_id(372);
}
impl monster_id {
    pub const MONSTER_LILEEP: monster_id = monster_id(373);
}
impl monster_id {
    pub const MONSTER_CRADILY: monster_id = monster_id(374);
}
impl monster_id {
    pub const MONSTER_ANORITH: monster_id = monster_id(375);
}
impl monster_id {
    pub const MONSTER_ARMALDO: monster_id = monster_id(376);
}
impl monster_id {
    pub const MONSTER_FEEBAS: monster_id = monster_id(377);
}
impl monster_id {
    pub const MONSTER_MILOTIC: monster_id = monster_id(378);
}
impl monster_id {
    pub const MONSTER_CASTFORM_NORMAL: monster_id = monster_id(379);
}
impl monster_id {
    pub const MONSTER_CASTFORM_SNOWY: monster_id = monster_id(380);
}
impl monster_id {
    pub const MONSTER_CASTFORM_SUNNY: monster_id = monster_id(381);
}
impl monster_id {
    pub const MONSTER_CASTFORM_RAINY: monster_id = monster_id(382);
}
impl monster_id {
    pub const MONSTER_KECLEON: monster_id = monster_id(383);
}
impl monster_id {
    pub const MONSTER_PURPLE_KECLEON: monster_id = monster_id(384);
}
impl monster_id {
    pub const MONSTER_SHUPPET: monster_id = monster_id(385);
}
impl monster_id {
    pub const MONSTER_BANETTE: monster_id = monster_id(386);
}
impl monster_id {
    pub const MONSTER_DUSKULL: monster_id = monster_id(387);
}
impl monster_id {
    pub const MONSTER_DUSCLOPS: monster_id = monster_id(388);
}
impl monster_id {
    pub const MONSTER_TROPIUS: monster_id = monster_id(389);
}
impl monster_id {
    pub const MONSTER_CHIMECHO: monster_id = monster_id(390);
}
impl monster_id {
    pub const MONSTER_ABSOL: monster_id = monster_id(391);
}
impl monster_id {
    pub const MONSTER_WYNAUT: monster_id = monster_id(392);
}
impl monster_id {
    pub const MONSTER_SNORUNT: monster_id = monster_id(393);
}
impl monster_id {
    pub const MONSTER_GLALIE: monster_id = monster_id(394);
}
impl monster_id {
    pub const MONSTER_SPHEAL: monster_id = monster_id(395);
}
impl monster_id {
    pub const MONSTER_SEALEO: monster_id = monster_id(396);
}
impl monster_id {
    pub const MONSTER_WALREIN: monster_id = monster_id(397);
}
impl monster_id {
    pub const MONSTER_CLAMPERL: monster_id = monster_id(398);
}
impl monster_id {
    pub const MONSTER_HUNTAIL: monster_id = monster_id(399);
}
impl monster_id {
    pub const MONSTER_GOREBYSS: monster_id = monster_id(400);
}
impl monster_id {
    pub const MONSTER_RELICANTH: monster_id = monster_id(401);
}
impl monster_id {
    pub const MONSTER_LUVDISC: monster_id = monster_id(402);
}
impl monster_id {
    pub const MONSTER_BAGON: monster_id = monster_id(403);
}
impl monster_id {
    pub const MONSTER_SHELGON: monster_id = monster_id(404);
}
impl monster_id {
    pub const MONSTER_SALAMENCE: monster_id = monster_id(405);
}
impl monster_id {
    pub const MONSTER_BELDUM: monster_id = monster_id(406);
}
impl monster_id {
    pub const MONSTER_METANG: monster_id = monster_id(407);
}
impl monster_id {
    pub const MONSTER_METAGROSS: monster_id = monster_id(408);
}
impl monster_id {
    pub const MONSTER_REGIROCK: monster_id = monster_id(409);
}
impl monster_id {
    pub const MONSTER_REGICE: monster_id = monster_id(410);
}
impl monster_id {
    pub const MONSTER_REGISTEEL: monster_id = monster_id(411);
}
impl monster_id {
    pub const MONSTER_LATIAS: monster_id = monster_id(412);
}
impl monster_id {
    pub const MONSTER_LATIOS: monster_id = monster_id(413);
}
impl monster_id {
    pub const MONSTER_KYOGRE: monster_id = monster_id(414);
}
impl monster_id {
    pub const MONSTER_GROUDON: monster_id = monster_id(415);
}
impl monster_id {
    pub const MONSTER_RAYQUAZA: monster_id = monster_id(416);
}
impl monster_id {
    pub const MONSTER_JIRACHI: monster_id = monster_id(417);
}
impl monster_id {
    pub const MONSTER_DEOXYS_NORMAL: monster_id = monster_id(418);
}
impl monster_id {
    pub const MONSTER_DEOXYS_ATTACH: monster_id = monster_id(419);
}
impl monster_id {
    pub const MONSTER_DEOXYS_DEFENSE: monster_id = monster_id(420);
}
impl monster_id {
    pub const MONSTER_DEOXYS_SPEED: monster_id = monster_id(421);
}
impl monster_id {
    pub const MONSTER_TURTWIG: monster_id = monster_id(422);
}
impl monster_id {
    pub const MONSTER_GROTLE: monster_id = monster_id(423);
}
impl monster_id {
    pub const MONSTER_TORTERRA: monster_id = monster_id(424);
}
impl monster_id {
    pub const MONSTER_CHIMCHAR: monster_id = monster_id(425);
}
impl monster_id {
    pub const MONSTER_MONFERNO: monster_id = monster_id(426);
}
impl monster_id {
    pub const MONSTER_INFERNAPE: monster_id = monster_id(427);
}
impl monster_id {
    pub const MONSTER_PIPLUP: monster_id = monster_id(428);
}
impl monster_id {
    pub const MONSTER_PRINPLUP: monster_id = monster_id(429);
}
impl monster_id {
    pub const MONSTER_EMPOLEON: monster_id = monster_id(430);
}
impl monster_id {
    pub const MONSTER_STARLY: monster_id = monster_id(431);
}
impl monster_id {
    pub const MONSTER_STARAVIA: monster_id = monster_id(432);
}
impl monster_id {
    pub const MONSTER_STARAPTOR: monster_id = monster_id(433);
}
impl monster_id {
    pub const MONSTER_BIDOOF: monster_id = monster_id(434);
}
impl monster_id {
    pub const MONSTER_BIBAREL: monster_id = monster_id(435);
}
impl monster_id {
    pub const MONSTER_KRICKETOT: monster_id = monster_id(436);
}
impl monster_id {
    pub const MONSTER_KRICKETUNE: monster_id = monster_id(437);
}
impl monster_id {
    pub const MONSTER_SHINX: monster_id = monster_id(438);
}
impl monster_id {
    pub const MONSTER_LUXIO: monster_id = monster_id(439);
}
impl monster_id {
    pub const MONSTER_LUXRAY: monster_id = monster_id(440);
}
impl monster_id {
    pub const MONSTER_BUDEW: monster_id = monster_id(441);
}
impl monster_id {
    pub const MONSTER_ROSERADE: monster_id = monster_id(442);
}
impl monster_id {
    pub const MONSTER_CRANIDOS: monster_id = monster_id(443);
}
impl monster_id {
    pub const MONSTER_RAMPARDOS: monster_id = monster_id(444);
}
impl monster_id {
    pub const MONSTER_SHIELDON: monster_id = monster_id(445);
}
impl monster_id {
    pub const MONSTER_BASTIODON: monster_id = monster_id(446);
}
impl monster_id {
    pub const MONSTER_BURMY_SANDY: monster_id = monster_id(447);
}
impl monster_id {
    pub const MONSTER_BURMY_PLANT: monster_id = monster_id(448);
}
impl monster_id {
    pub const MONSTER_BURMY_TRASH: monster_id = monster_id(449);
}
impl monster_id {
    pub const MONSTER_WORMADAM_SANDY: monster_id = monster_id(450);
}
impl monster_id {
    pub const MONSTER_WORMADAM_PLANT: monster_id = monster_id(451);
}
impl monster_id {
    pub const MONSTER_WORMADAM_TRASH: monster_id = monster_id(452);
}
impl monster_id {
    pub const MONSTER_MOTHIM: monster_id = monster_id(453);
}
impl monster_id {
    pub const MONSTER_COMBEE: monster_id = monster_id(454);
}
impl monster_id {
    pub const MONSTER_VESPIQUEN: monster_id = monster_id(455);
}
impl monster_id {
    pub const MONSTER_PACHIRISU: monster_id = monster_id(456);
}
impl monster_id {
    pub const MONSTER_BUIZEL: monster_id = monster_id(457);
}
impl monster_id {
    pub const MONSTER_FLOATZEL: monster_id = monster_id(458);
}
impl monster_id {
    pub const MONSTER_CHERUBI: monster_id = monster_id(459);
}
impl monster_id {
    pub const MONSTER_CHERRIM_OVERCAST: monster_id = monster_id(460);
}
impl monster_id {
    pub const MONSTER_CHERRIM_SUNSHINE: monster_id = monster_id(461);
}
impl monster_id {
    pub const MONSTER_SHELLOS_EAST: monster_id = monster_id(462);
}
impl monster_id {
    pub const MONSTER_SHELLOS_WEST: monster_id = monster_id(463);
}
impl monster_id {
    pub const MONSTER_GASTRODON_EAST: monster_id = monster_id(464);
}
impl monster_id {
    pub const MONSTER_GASTRODON_WEST: monster_id = monster_id(465);
}
impl monster_id {
    pub const MONSTER_AMBIPOM: monster_id = monster_id(466);
}
impl monster_id {
    pub const MONSTER_DRIFLOON: monster_id = monster_id(467);
}
impl monster_id {
    pub const MONSTER_DRIFBLIM: monster_id = monster_id(468);
}
impl monster_id {
    pub const MONSTER_BUNEARY: monster_id = monster_id(469);
}
impl monster_id {
    pub const MONSTER_LOPUNNY: monster_id = monster_id(470);
}
impl monster_id {
    pub const MONSTER_MISMAGIUS: monster_id = monster_id(471);
}
impl monster_id {
    pub const MONSTER_HONCHKROW: monster_id = monster_id(472);
}
impl monster_id {
    pub const MONSTER_GLAMEOW: monster_id = monster_id(473);
}
impl monster_id {
    pub const MONSTER_PURUGLY: monster_id = monster_id(474);
}
impl monster_id {
    pub const MONSTER_CHINGLING: monster_id = monster_id(475);
}
impl monster_id {
    pub const MONSTER_STUNKY: monster_id = monster_id(476);
}
impl monster_id {
    pub const MONSTER_SKUNTANK: monster_id = monster_id(477);
}
impl monster_id {
    pub const MONSTER_BRONZOR: monster_id = monster_id(478);
}
impl monster_id {
    pub const MONSTER_BRONZONG: monster_id = monster_id(479);
}
impl monster_id {
    pub const MONSTER_BONSLY: monster_id = monster_id(480);
}
impl monster_id {
    pub const MONSTER_MIME_JR: monster_id = monster_id(481);
}
impl monster_id {
    pub const MONSTER_HAPPINY: monster_id = monster_id(482);
}
impl monster_id {
    pub const MONSTER_CHATOT: monster_id = monster_id(483);
}
impl monster_id {
    pub const MONSTER_SPIRITOMB: monster_id = monster_id(484);
}
impl monster_id {
    pub const MONSTER_GIBLE: monster_id = monster_id(485);
}
impl monster_id {
    pub const MONSTER_GABITE: monster_id = monster_id(486);
}
impl monster_id {
    pub const MONSTER_GARCHOMP: monster_id = monster_id(487);
}
impl monster_id {
    pub const MONSTER_MUNCHLAX: monster_id = monster_id(488);
}
impl monster_id {
    pub const MONSTER_RIOLU: monster_id = monster_id(489);
}
impl monster_id {
    pub const MONSTER_LUCARIO: monster_id = monster_id(490);
}
impl monster_id {
    pub const MONSTER_HIPPOPOTAS: monster_id = monster_id(491);
}
impl monster_id {
    pub const MONSTER_HIPPOWDON: monster_id = monster_id(492);
}
impl monster_id {
    pub const MONSTER_SKORUPI: monster_id = monster_id(493);
}
impl monster_id {
    pub const MONSTER_DRAPION: monster_id = monster_id(494);
}
impl monster_id {
    pub const MONSTER_CROAGUNK: monster_id = monster_id(495);
}
impl monster_id {
    pub const MONSTER_TOXICROAK: monster_id = monster_id(496);
}
impl monster_id {
    pub const MONSTER_CARNIVINE: monster_id = monster_id(497);
}
impl monster_id {
    pub const MONSTER_FINNEON: monster_id = monster_id(498);
}
impl monster_id {
    pub const MONSTER_LUMINEON: monster_id = monster_id(499);
}
impl monster_id {
    pub const MONSTER_MANTYKE: monster_id = monster_id(500);
}
impl monster_id {
    pub const MONSTER_SNOVER: monster_id = monster_id(501);
}
impl monster_id {
    pub const MONSTER_ABOMASNOW: monster_id = monster_id(502);
}
impl monster_id {
    pub const MONSTER_WEAVILE: monster_id = monster_id(503);
}
impl monster_id {
    pub const MONSTER_MAGNEZONE: monster_id = monster_id(504);
}
impl monster_id {
    pub const MONSTER_LICKILICKY: monster_id = monster_id(505);
}
impl monster_id {
    pub const MONSTER_RHYPERIOR: monster_id = monster_id(506);
}
impl monster_id {
    pub const MONSTER_TANGROWTH: monster_id = monster_id(507);
}
impl monster_id {
    pub const MONSTER_ELECTIVIRE: monster_id = monster_id(508);
}
impl monster_id {
    pub const MONSTER_MAGMORTAR: monster_id = monster_id(509);
}
impl monster_id {
    pub const MONSTER_TOGEKISS: monster_id = monster_id(510);
}
impl monster_id {
    pub const MONSTER_YANMEGA: monster_id = monster_id(511);
}
impl monster_id {
    pub const MONSTER_LEAFEON: monster_id = monster_id(512);
}
impl monster_id {
    pub const MONSTER_GLACEON: monster_id = monster_id(513);
}
impl monster_id {
    pub const MONSTER_GLISCOR: monster_id = monster_id(514);
}
impl monster_id {
    pub const MONSTER_MAMOSWINE: monster_id = monster_id(515);
}
impl monster_id {
    pub const MONSTER_PORYGON_Z: monster_id = monster_id(516);
}
impl monster_id {
    pub const MONSTER_GALLADE: monster_id = monster_id(517);
}
impl monster_id {
    pub const MONSTER_PROBOPASS: monster_id = monster_id(518);
}
impl monster_id {
    pub const MONSTER_DUSKNOIR: monster_id = monster_id(519);
}
impl monster_id {
    pub const MONSTER_FROSLASS: monster_id = monster_id(520);
}
impl monster_id {
    pub const MONSTER_ROTOM: monster_id = monster_id(521);
}
impl monster_id {
    pub const MONSTER_UXIE: monster_id = monster_id(522);
}
impl monster_id {
    pub const MONSTER_MESPRIT: monster_id = monster_id(523);
}
impl monster_id {
    pub const MONSTER_AZELF: monster_id = monster_id(524);
}
impl monster_id {
    pub const MONSTER_DIALGA: monster_id = monster_id(525);
}
impl monster_id {
    pub const MONSTER_PALKIA: monster_id = monster_id(526);
}
impl monster_id {
    pub const MONSTER_HEATRAN: monster_id = monster_id(527);
}
impl monster_id {
    pub const MONSTER_REGIGIGAS: monster_id = monster_id(528);
}
impl monster_id {
    pub const MONSTER_GIRATINA_ALTERED: monster_id = monster_id(529);
}
impl monster_id {
    pub const MONSTER_CRESSELIA: monster_id = monster_id(530);
}
impl monster_id {
    pub const MONSTER_PHIONE: monster_id = monster_id(531);
}
impl monster_id {
    pub const MONSTER_MANAPHY: monster_id = monster_id(532);
}
impl monster_id {
    pub const MONSTER_DARKRAI: monster_id = monster_id(533);
}
impl monster_id {
    pub const MONSTER_SHAYMIN_LAND: monster_id = monster_id(534);
}
impl monster_id {
    pub const MONSTER_SHAYMIN_SKY: monster_id = monster_id(535);
}
impl monster_id {
    pub const MONSTER_GIRATINA_ORIGIN: monster_id = monster_id(536);
}
impl monster_id {
    pub const MONSTER_UNNAMED_0x219: monster_id = monster_id(537);
}
impl monster_id {
    pub const MONSTER_UNNAMED_0x21A: monster_id = monster_id(538);
}
impl monster_id {
    pub const MONSTER_UNNAMED_0x21B: monster_id = monster_id(539);
}
impl monster_id {
    pub const MONSTER_UNNAMED_0x21C: monster_id = monster_id(540);
}
impl monster_id {
    pub const MONSTER_UNNAMED_0x21D: monster_id = monster_id(541);
}
impl monster_id {
    pub const MONSTER_UNNAMED_0x21E: monster_id = monster_id(542);
}
impl monster_id {
    pub const MONSTER_UNNAMED_0x21F: monster_id = monster_id(543);
}
impl monster_id {
    pub const MONSTER_UNNAMED_0x220: monster_id = monster_id(544);
}
impl monster_id {
    pub const MONSTER_UNNAMED_0x221: monster_id = monster_id(545);
}
impl monster_id {
    pub const MONSTER_UNNAMED_0x222: monster_id = monster_id(546);
}
impl monster_id {
    pub const MONSTER_UNNAMED_0x223: monster_id = monster_id(547);
}
impl monster_id {
    pub const MONSTER_UNNAMED_0x224: monster_id = monster_id(548);
}
impl monster_id {
    pub const MONSTER_UNNAMED_0x225: monster_id = monster_id(549);
}
impl monster_id {
    pub const MONSTER_UNNAMED_0x226: monster_id = monster_id(550);
}
impl monster_id {
    pub const MONSTER_UNNAMED_0x227: monster_id = monster_id(551);
}
impl monster_id {
    pub const MONSTER_PRIMAL_DIALGA: monster_id = monster_id(552);
}
impl monster_id {
    pub const MONSTER_DECOY: monster_id = monster_id(553);
}
impl monster_id {
    pub const MONSTER_STATUE: monster_id = monster_id(554);
}
impl monster_id {
    pub const MONSTER_WIGGLYTUFF_STORY: monster_id = monster_id(555);
}
impl monster_id {
    pub const MONSTER_REGIGIGAS_STORY: monster_id = monster_id(556);
}
impl monster_id {
    pub const MONSTER_BRONZONG_STORY: monster_id = monster_id(557);
}
impl monster_id {
    pub const MONSTER_HITMONLEE_STORY: monster_id = monster_id(558);
}
impl monster_id {
    pub const MONSTER_CHIMECHO_STORY: monster_id = monster_id(559);
}
impl monster_id {
    pub const MONSTER_WIGGLYTUFF_STORY_2: monster_id = monster_id(560);
}
impl monster_id {
    pub const MONSTER_UXIE_STORY: monster_id = monster_id(561);
}
impl monster_id {
    pub const MONSTER_AZELF_STORY: monster_id = monster_id(562);
}
impl monster_id {
    pub const MONSTER_MESPRIT_STORY: monster_id = monster_id(563);
}
impl monster_id {
    pub const MONSTER_SUNFLORA_STORY: monster_id = monster_id(564);
}
impl monster_id {
    pub const MONSTER_DIGLETT_STORY: monster_id = monster_id(565);
}
impl monster_id {
    pub const MONSTER_DUGTRIO_STORY: monster_id = monster_id(566);
}
impl monster_id {
    pub const MONSTER_CORPHISH_STORY: monster_id = monster_id(567);
}
impl monster_id {
    pub const MONSTER_LOUDRED_STORY: monster_id = monster_id(568);
}
impl monster_id {
    pub const MONSTER_BIDOOF_STORY: monster_id = monster_id(569);
}
impl monster_id {
    pub const MONSTER_CHATOT_STORY: monster_id = monster_id(570);
}
impl monster_id {
    pub const MONSTER_GROVYLE_STORY: monster_id = monster_id(571);
}
impl monster_id {
    pub const MONSTER_DUSKNOIR_STORY: monster_id = monster_id(572);
}
impl monster_id {
    pub const MONSTER_SABLEYE_STORY: monster_id = monster_id(573);
}
impl monster_id {
    pub const MONSTER_DARKRAI_STORY: monster_id = monster_id(574);
}
impl monster_id {
    pub const MONSTER_MAMA: monster_id = monster_id(575);
}
impl monster_id {
    pub const MONSTER_GROVYLE_STORY_2: monster_id = monster_id(576);
}
impl monster_id {
    pub const MONSTER_DUSKNOIR_STORY_2: monster_id = monster_id(577);
}
impl monster_id {
    pub const MONSTER_DUSKNOIR_STORY_3: monster_id = monster_id(578);
}
impl monster_id {
    pub const MONSTER_SENTRET_DITTO: monster_id = monster_id(579);
}
impl monster_id {
    pub const MONSTER_BELLOSSOM_DITTO: monster_id = monster_id(580);
}
impl monster_id {
    pub const MONSTER_RESERVE_27: monster_id = monster_id(581);
}
impl monster_id {
    pub const MONSTER_RESERVE_28: monster_id = monster_id(582);
}
impl monster_id {
    pub const MONSTER_RESERVE_29: monster_id = monster_id(583);
}
impl monster_id {
    pub const MONSTER_RESERVE_30: monster_id = monster_id(584);
}
impl monster_id {
    pub const MONSTER_RESERVE_31: monster_id = monster_id(585);
}
impl monster_id {
    pub const MONSTER_RESERVE_32: monster_id = monster_id(586);
}
impl monster_id {
    pub const MONSTER_RESERVE_33: monster_id = monster_id(587);
}
impl monster_id {
    pub const MONSTER_RESERVE_34: monster_id = monster_id(588);
}
impl monster_id {
    pub const MONSTER_RESERVE_35: monster_id = monster_id(589);
}
impl monster_id {
    pub const MONSTER_RESERVE_36: monster_id = monster_id(590);
}
impl monster_id {
    pub const MONSTER_RESERVE_37: monster_id = monster_id(591);
}
impl monster_id {
    pub const MONSTER_RESERVE_38: monster_id = monster_id(592);
}
impl monster_id {
    pub const MONSTER_RESERVE_39: monster_id = monster_id(593);
}
impl monster_id {
    pub const MONSTER_RESERVE_40: monster_id = monster_id(594);
}
impl monster_id {
    pub const MONSTER_RESERVE_41: monster_id = monster_id(595);
}
impl monster_id {
    pub const MONSTER_RESERVE_42: monster_id = monster_id(596);
}
impl monster_id {
    pub const MONSTER_RESERVE_43: monster_id = monster_id(597);
}
impl monster_id {
    pub const MONSTER_RESERVE_44: monster_id = monster_id(598);
}
impl monster_id {
    pub const MONSTER_RESERVE_45: monster_id = monster_id(599);
}
#[repr(transparent)]
#[derive(Clone, Hash, PartialEq, Eq)]
pub struct monster_id(pub(crate) crate::ctypes::c_uint);
#[repr(C)]
#[repr(align(2))]
pub struct monster_id_16 {
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 2usize]>,
}
impl monster_id_16 {
    #[inline]
    pub fn val(&self) -> monster_id {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(0usize, 16u8) as u32) }
    }
    #[inline]
    pub fn set_val(&mut self, val: monster_id) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(0usize, 16u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(val: monster_id) -> __BindgenBitfieldUnit<[u8; 2usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 2usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 16u8, {
            let val: u32 = unsafe { ::core::mem::transmute(val) };
            val as u64
        });
        __bindgen_bitfield_unit
    }
}
impl item_id {
    pub const ITEM_NOTHING: item_id = item_id(0);
}
impl item_id {
    pub const ITEM_STICK: item_id = item_id(1);
}
impl item_id {
    pub const ITEM_IRON_THORN: item_id = item_id(2);
}
impl item_id {
    pub const ITEM_SILVER_SPIKE: item_id = item_id(3);
}
impl item_id {
    pub const ITEM_GOLD_FANG: item_id = item_id(4);
}
impl item_id {
    pub const ITEM_CACNEA_SPIKE: item_id = item_id(5);
}
impl item_id {
    pub const ITEM_CORSOLA_TWIG: item_id = item_id(6);
}
impl item_id {
    pub const ITEM_GRAVELEROCK: item_id = item_id(7);
}
impl item_id {
    pub const ITEM_GEO_PEBBLE: item_id = item_id(8);
}
impl item_id {
    pub const ITEM_GOLD_THORN: item_id = item_id(9);
}
impl item_id {
    pub const ITEM_RARE_FOSSIL: item_id = item_id(10);
}
impl item_id {
    pub const ITEM_UNNAMED_0xB: item_id = item_id(11);
}
impl item_id {
    pub const ITEM_UNNAMED_0xC: item_id = item_id(12);
}
impl item_id {
    pub const ITEM_NO_SLIP_CAP: item_id = item_id(13);
}
impl item_id {
    pub const ITEM_Y_RAY_SPECS: item_id = item_id(14);
}
impl item_id {
    pub const ITEM_GAGGLE_SPECS: item_id = item_id(15);
}
impl item_id {
    pub const ITEM_MOBILE_SCARF: item_id = item_id(16);
}
impl item_id {
    pub const ITEM_HEAL_RIBBON: item_id = item_id(17);
}
impl item_id {
    pub const ITEM_TWIST_BAND: item_id = item_id(18);
}
impl item_id {
    pub const ITEM_SCOPE_LENS: item_id = item_id(19);
}
impl item_id {
    pub const ITEM_PATSY_BAND: item_id = item_id(20);
}
impl item_id {
    pub const ITEM_NO_STICK_CAP: item_id = item_id(21);
}
impl item_id {
    pub const ITEM_PIERCE_BAND: item_id = item_id(22);
}
impl item_id {
    pub const ITEM_JOY_RIBBON: item_id = item_id(23);
}
impl item_id {
    pub const ITEM_X_RAY_SPECS: item_id = item_id(24);
}
impl item_id {
    pub const ITEM_PERSIM_BAND: item_id = item_id(25);
}
impl item_id {
    pub const ITEM_POWER_BAND: item_id = item_id(26);
}
impl item_id {
    pub const ITEM_PECHA_SCARF: item_id = item_id(27);
}
impl item_id {
    pub const ITEM_INSOMNISCOPE: item_id = item_id(28);
}
impl item_id {
    pub const ITEM_WARP_SCARF: item_id = item_id(29);
}
impl item_id {
    pub const ITEM_TIGHT_BELT: item_id = item_id(30);
}
impl item_id {
    pub const ITEM_SNEAK_SCARF: item_id = item_id(31);
}
impl item_id {
    pub const ITEM_GOLD_RIBBON: item_id = item_id(32);
}
impl item_id {
    pub const ITEM_GOGGLE_SPECS: item_id = item_id(33);
}
impl item_id {
    pub const ITEM_DIET_RIBBON: item_id = item_id(34);
}
impl item_id {
    pub const ITEM_TRAP_SCARF: item_id = item_id(35);
}
impl item_id {
    pub const ITEM_RACKET_BAND: item_id = item_id(36);
}
impl item_id {
    pub const ITEM_DEF_SCARF: item_id = item_id(37);
}
impl item_id {
    pub const ITEM_STAMINA_BAND: item_id = item_id(38);
}
impl item_id {
    pub const ITEM_PLAIN_RIBBON: item_id = item_id(39);
}
impl item_id {
    pub const ITEM_SPECIAL_BAND: item_id = item_id(40);
}
impl item_id {
    pub const ITEM_ZINC_BAND: item_id = item_id(41);
}
impl item_id {
    pub const ITEM_DETECT_BAND: item_id = item_id(42);
}
impl item_id {
    pub const ITEM_SPACE_GLOBE: item_id = item_id(43);
}
impl item_id {
    pub const ITEM_DODGE_SCARF: item_id = item_id(44);
}
impl item_id {
    pub const ITEM_BOUNCE_BAND: item_id = item_id(45);
}
impl item_id {
    pub const ITEM_CURVE_BAND: item_id = item_id(46);
}
impl item_id {
    pub const ITEM_WHIFF_SPECS: item_id = item_id(47);
}
impl item_id {
    pub const ITEM_NO_AIM_SCOPE: item_id = item_id(48);
}
impl item_id {
    pub const ITEM_LOCKON_SPECS: item_id = item_id(49);
}
impl item_id {
    pub const ITEM_MUNCH_BELT: item_id = item_id(50);
}
impl item_id {
    pub const ITEM_PASS_SCARF: item_id = item_id(51);
}
impl item_id {
    pub const ITEM_WEATHER_BAND: item_id = item_id(52);
}
impl item_id {
    pub const ITEM_FRIEND_BOW: item_id = item_id(53);
}
impl item_id {
    pub const ITEM_BEAUTY_SCARF: item_id = item_id(54);
}
impl item_id {
    pub const ITEM_SUN_RIBBON: item_id = item_id(55);
}
impl item_id {
    pub const ITEM_LUNAR_RIBBON: item_id = item_id(56);
}
impl item_id {
    pub const ITEM_GOLDEN_MASK: item_id = item_id(57);
}
impl item_id {
    pub const ITEM_AMBER_TEAR: item_id = item_id(58);
}
impl item_id {
    pub const ITEM_ICY_FLUTE: item_id = item_id(59);
}
impl item_id {
    pub const ITEM_FIERY_DRUM: item_id = item_id(60);
}
impl item_id {
    pub const ITEM_TERRA_CYMBAL: item_id = item_id(61);
}
impl item_id {
    pub const ITEM_AQUA_MONICA: item_id = item_id(62);
}
impl item_id {
    pub const ITEM_ROCK_HORN: item_id = item_id(63);
}
impl item_id {
    pub const ITEM_GRASS_CORNET: item_id = item_id(64);
}
impl item_id {
    pub const ITEM_SKY_MELODICA: item_id = item_id(65);
}
impl item_id {
    pub const ITEM_MIRACLE_CHEST: item_id = item_id(66);
}
impl item_id {
    pub const ITEM_WONDER_CHEST: item_id = item_id(67);
}
impl item_id {
    pub const ITEM_IQ_BOOSTER: item_id = item_id(68);
}
impl item_id {
    pub const ITEM_HEAL_SEED: item_id = item_id(69);
}
impl item_id {
    pub const ITEM_ORAN_BERRY: item_id = item_id(70);
}
impl item_id {
    pub const ITEM_SITRUS_BERRY: item_id = item_id(71);
}
impl item_id {
    pub const ITEM_EYEDROP_SEED: item_id = item_id(72);
}
impl item_id {
    pub const ITEM_REVIVER_SEED: item_id = item_id(73);
}
impl item_id {
    pub const ITEM_BLINKER_SEED: item_id = item_id(74);
}
impl item_id {
    pub const ITEM_DOOM_SEED: item_id = item_id(75);
}
impl item_id {
    pub const ITEM_X_EYE_SEED: item_id = item_id(76);
}
impl item_id {
    pub const ITEM_LIFE_SEED: item_id = item_id(77);
}
impl item_id {
    pub const ITEM_RAWST_BERRY: item_id = item_id(78);
}
impl item_id {
    pub const ITEM_HUNGER_SEED: item_id = item_id(79);
}
impl item_id {
    pub const ITEM_QUICK_SEED: item_id = item_id(80);
}
impl item_id {
    pub const ITEM_PECHA_BERRY: item_id = item_id(81);
}
impl item_id {
    pub const ITEM_CHERI_BERRY: item_id = item_id(82);
}
impl item_id {
    pub const ITEM_TOTTER_SEED: item_id = item_id(83);
}
impl item_id {
    pub const ITEM_SLEEP_SEED: item_id = item_id(84);
}
impl item_id {
    pub const ITEM_PLAIN_SEED: item_id = item_id(85);
}
impl item_id {
    pub const ITEM_WARP_SEED: item_id = item_id(86);
}
impl item_id {
    pub const ITEM_BLAST_SEED: item_id = item_id(87);
}
impl item_id {
    pub const ITEM_GINSENG: item_id = item_id(88);
}
impl item_id {
    pub const ITEM_JOY_SEED: item_id = item_id(89);
}
impl item_id {
    pub const ITEM_CHESTO_BERRY: item_id = item_id(90);
}
impl item_id {
    pub const ITEM_STUN_SEED: item_id = item_id(91);
}
impl item_id {
    pub const ITEM_GABITE_SCALE: item_id = item_id(92);
}
impl item_id {
    pub const ITEM_GOLDEN_SEED: item_id = item_id(93);
}
impl item_id {
    pub const ITEM_VILE_SEED: item_id = item_id(94);
}
impl item_id {
    pub const ITEM_PURE_SEED: item_id = item_id(95);
}
impl item_id {
    pub const ITEM_VIOLENT_SEED: item_id = item_id(96);
}
impl item_id {
    pub const ITEM_VANISH_SEED: item_id = item_id(97);
}
impl item_id {
    pub const ITEM_UNNAMED_0x62: item_id = item_id(98);
}
impl item_id {
    pub const ITEM_MAX_ELIXIR: item_id = item_id(99);
}
impl item_id {
    pub const ITEM_PROTEIN: item_id = item_id(100);
}
impl item_id {
    pub const ITEM_CALCIUM: item_id = item_id(101);
}
impl item_id {
    pub const ITEM_IRON: item_id = item_id(102);
}
impl item_id {
    pub const ITEM_NECTAR: item_id = item_id(103);
}
impl item_id {
    pub const ITEM_DROPEYE_SEED: item_id = item_id(104);
}
impl item_id {
    pub const ITEM_REVISER_SEED: item_id = item_id(105);
}
impl item_id {
    pub const ITEM_SLIP_SEED: item_id = item_id(106);
}
impl item_id {
    pub const ITEM_VIA_SEED: item_id = item_id(107);
}
impl item_id {
    pub const ITEM_ZINC: item_id = item_id(108);
}
impl item_id {
    pub const ITEM_APPLE: item_id = item_id(109);
}
impl item_id {
    pub const ITEM_BIG_APPLE: item_id = item_id(110);
}
impl item_id {
    pub const ITEM_GRIMY_FOOD: item_id = item_id(111);
}
impl item_id {
    pub const ITEM_HUGE_APPLE: item_id = item_id(112);
}
impl item_id {
    pub const ITEM_UNNAMED_0x71: item_id = item_id(113);
}
impl item_id {
    pub const ITEM_UNNAMED_0x72: item_id = item_id(114);
}
impl item_id {
    pub const ITEM_GOLDEN_APPLE: item_id = item_id(115);
}
impl item_id {
    pub const ITEM_MIX_ELIXIR: item_id = item_id(116);
}
impl item_id {
    pub const ITEM_OREN_BERRY: item_id = item_id(117);
}
impl item_id {
    pub const ITEM_DOUGH_SEED: item_id = item_id(118);
}
impl item_id {
    pub const ITEM_WHITE_GUMMI: item_id = item_id(119);
}
impl item_id {
    pub const ITEM_RED_GUMMI: item_id = item_id(120);
}
impl item_id {
    pub const ITEM_BLUE_GUMMI: item_id = item_id(121);
}
impl item_id {
    pub const ITEM_GRASS_GUMMI: item_id = item_id(122);
}
impl item_id {
    pub const ITEM_YELLOW_GUMMI: item_id = item_id(123);
}
impl item_id {
    pub const ITEM_CLEAR_GUMMI: item_id = item_id(124);
}
impl item_id {
    pub const ITEM_ORANGE_GUMMI: item_id = item_id(125);
}
impl item_id {
    pub const ITEM_PINK_GUMMI: item_id = item_id(126);
}
impl item_id {
    pub const ITEM_BROWN_GUMMI: item_id = item_id(127);
}
impl item_id {
    pub const ITEM_SKY_GUMMI: item_id = item_id(128);
}
impl item_id {
    pub const ITEM_GOLD_GUMMI: item_id = item_id(129);
}
impl item_id {
    pub const ITEM_GREEN_GUMMI: item_id = item_id(130);
}
impl item_id {
    pub const ITEM_GRAY_GUMMI: item_id = item_id(131);
}
impl item_id {
    pub const ITEM_PURPLE_GUMMI: item_id = item_id(132);
}
impl item_id {
    pub const ITEM_ROYAL_GUMMI: item_id = item_id(133);
}
impl item_id {
    pub const ITEM_BLACK_GUMMI: item_id = item_id(134);
}
impl item_id {
    pub const ITEM_SILVER_GUMMI: item_id = item_id(135);
}
impl item_id {
    pub const ITEM_WONDER_GUMMI: item_id = item_id(136);
}
impl item_id {
    pub const ITEM_GRAVELYROCK: item_id = item_id(137);
}
impl item_id {
    pub const ITEM_UNNAMED_0x8A: item_id = item_id(138);
}
impl item_id {
    pub const ITEM_UPGRADE: item_id = item_id(139);
}
impl item_id {
    pub const ITEM_KINGS_ROCK: item_id = item_id(140);
}
impl item_id {
    pub const ITEM_THUNDERSTONE: item_id = item_id(141);
}
impl item_id {
    pub const ITEM_DEEPSEASCALE: item_id = item_id(142);
}
impl item_id {
    pub const ITEM_DEEPSEATOOTH: item_id = item_id(143);
}
impl item_id {
    pub const ITEM_SUN_STONE: item_id = item_id(144);
}
impl item_id {
    pub const ITEM_MOON_STONE: item_id = item_id(145);
}
impl item_id {
    pub const ITEM_FIRE_STONE: item_id = item_id(146);
}
impl item_id {
    pub const ITEM_WATER_STONE: item_id = item_id(147);
}
impl item_id {
    pub const ITEM_METAL_COAT: item_id = item_id(148);
}
impl item_id {
    pub const ITEM_LEAF_STONE: item_id = item_id(149);
}
impl item_id {
    pub const ITEM_DRAGON_SCALE: item_id = item_id(150);
}
impl item_id {
    pub const ITEM_LINK_CABLE: item_id = item_id(151);
}
impl item_id {
    pub const ITEM_DUBIOUS_DISC: item_id = item_id(152);
}
impl item_id {
    pub const ITEM_PROTECTOR: item_id = item_id(153);
}
impl item_id {
    pub const ITEM_REAPER_CLOTH: item_id = item_id(154);
}
impl item_id {
    pub const ITEM_RAZOR_FANG: item_id = item_id(155);
}
impl item_id {
    pub const ITEM_RAZOR_CLAW: item_id = item_id(156);
}
impl item_id {
    pub const ITEM_ELECTIRIZER: item_id = item_id(157);
}
impl item_id {
    pub const ITEM_MAGMARIZER: item_id = item_id(158);
}
impl item_id {
    pub const ITEM_OVAL_STONE: item_id = item_id(159);
}
impl item_id {
    pub const ITEM_DAWN_STONE: item_id = item_id(160);
}
impl item_id {
    pub const ITEM_SHINY_STONE: item_id = item_id(161);
}
impl item_id {
    pub const ITEM_DUSK_STONE: item_id = item_id(162);
}
impl item_id {
    pub const ITEM_CORONET_ROCK: item_id = item_id(163);
}
impl item_id {
    pub const ITEM_MOSSY_ROCK: item_id = item_id(164);
}
impl item_id {
    pub const ITEM_FROZEN_ROCK: item_id = item_id(165);
}
impl item_id {
    pub const ITEM_UNNAMED_0xA6: item_id = item_id(166);
}
impl item_id {
    pub const ITEM_GONE_PEBBLE: item_id = item_id(167);
}
impl item_id {
    pub const ITEM_WANDER_GUMMI: item_id = item_id(168);
}
impl item_id {
    pub const ITEM_PRIZE_TICKET: item_id = item_id(169);
}
impl item_id {
    pub const ITEM_SILVER_TICKET: item_id = item_id(170);
}
impl item_id {
    pub const ITEM_GOLD_TICKET: item_id = item_id(171);
}
impl item_id {
    pub const ITEM_PRISM_TICKET: item_id = item_id(172);
}
impl item_id {
    pub const ITEM_MYSTERY_PART: item_id = item_id(173);
}
impl item_id {
    pub const ITEM_SECRET_SLAB: item_id = item_id(174);
}
impl item_id {
    pub const ITEM_UNNAMED_0xAF: item_id = item_id(175);
}
impl item_id {
    pub const ITEM_UNNAMED_0xB0: item_id = item_id(176);
}
impl item_id {
    pub const ITEM_UNNAMED_0xB1: item_id = item_id(177);
}
impl item_id {
    pub const ITEM_WONDER_EGG: item_id = item_id(178);
}
impl item_id {
    pub const ITEM_GRACIDEA: item_id = item_id(179);
}
impl item_id {
    pub const ITEM_SKY_GIFT: item_id = item_id(180);
}
impl item_id {
    pub const ITEM_UNNAMED_0xB5: item_id = item_id(181);
}
impl item_id {
    pub const ITEM_KEY: item_id = item_id(182);
}
impl item_id {
    pub const ITEM_POKE: item_id = item_id(183);
}
impl item_id {
    pub const ITEM_UNNAMED_0xB8: item_id = item_id(184);
}
impl item_id {
    pub const ITEM_UNNAMED_0xB9: item_id = item_id(185);
}
impl item_id {
    pub const ITEM_LOST_LOOT: item_id = item_id(186);
}
impl item_id {
    pub const ITEM_TM_USED_TM: item_id = item_id(187);
}
impl item_id {
    pub const ITEM_TM_FOCUS_PUNCH: item_id = item_id(188);
}
impl item_id {
    pub const ITEM_TM_DRAGON_CLAW: item_id = item_id(189);
}
impl item_id {
    pub const ITEM_TM_WATER_PULSE: item_id = item_id(190);
}
impl item_id {
    pub const ITEM_TM_CALM_MIND: item_id = item_id(191);
}
impl item_id {
    pub const ITEM_TM_ROAR: item_id = item_id(192);
}
impl item_id {
    pub const ITEM_TM_TOXIC: item_id = item_id(193);
}
impl item_id {
    pub const ITEM_TM_HAIL: item_id = item_id(194);
}
impl item_id {
    pub const ITEM_TM_BULK_UP: item_id = item_id(195);
}
impl item_id {
    pub const ITEM_TM_BULLET_SEED: item_id = item_id(196);
}
impl item_id {
    pub const ITEM_TM_HIDDEN_POWER: item_id = item_id(197);
}
impl item_id {
    pub const ITEM_UNNAMED_0xC6: item_id = item_id(198);
}
impl item_id {
    pub const ITEM_TM_TAUNT: item_id = item_id(199);
}
impl item_id {
    pub const ITEM_TM_ICE_BEAM: item_id = item_id(200);
}
impl item_id {
    pub const ITEM_TM_BLIZZARD: item_id = item_id(201);
}
impl item_id {
    pub const ITEM_TM_HYPER_BEAM: item_id = item_id(202);
}
impl item_id {
    pub const ITEM_TM_LIGHT_SCREEN: item_id = item_id(203);
}
impl item_id {
    pub const ITEM_TM_PROTECT: item_id = item_id(204);
}
impl item_id {
    pub const ITEM_UNNAMED_0xCD: item_id = item_id(205);
}
impl item_id {
    pub const ITEM_TM_GIGA_DRAIN: item_id = item_id(206);
}
impl item_id {
    pub const ITEM_TM_SAFEGUARD: item_id = item_id(207);
}
impl item_id {
    pub const ITEM_TM_FRUSTRATION: item_id = item_id(208);
}
impl item_id {
    pub const ITEM_TM_SOLARBEAM: item_id = item_id(209);
}
impl item_id {
    pub const ITEM_TM_IRON_TAIL: item_id = item_id(210);
}
impl item_id {
    pub const ITEM_TM_THUNDERBOLT: item_id = item_id(211);
}
impl item_id {
    pub const ITEM_TM_THUNDER: item_id = item_id(212);
}
impl item_id {
    pub const ITEM_TM_EARTHQUAKE: item_id = item_id(213);
}
impl item_id {
    pub const ITEM_TM_RETURN: item_id = item_id(214);
}
impl item_id {
    pub const ITEM_TM_DIG: item_id = item_id(215);
}
impl item_id {
    pub const ITEM_TM_PSYCHIC: item_id = item_id(216);
}
impl item_id {
    pub const ITEM_TM_SHADOW_BALL: item_id = item_id(217);
}
impl item_id {
    pub const ITEM_TM_BRICK_BREAK: item_id = item_id(218);
}
impl item_id {
    pub const ITEM_UNNAMED_0xDB: item_id = item_id(219);
}
impl item_id {
    pub const ITEM_TM_REFLECT: item_id = item_id(220);
}
impl item_id {
    pub const ITEM_TM_SHOCK_WAVE: item_id = item_id(221);
}
impl item_id {
    pub const ITEM_TM_FLAMETHROWER: item_id = item_id(222);
}
impl item_id {
    pub const ITEM_TM_SLUDGE_BOMB: item_id = item_id(223);
}
impl item_id {
    pub const ITEM_UNNAMED_0xE0: item_id = item_id(224);
}
impl item_id {
    pub const ITEM_TM_FIRE_BLAST: item_id = item_id(225);
}
impl item_id {
    pub const ITEM_UNNAMED_0xE2: item_id = item_id(226);
}
impl item_id {
    pub const ITEM_TM_AERIAL_ACE: item_id = item_id(227);
}
impl item_id {
    pub const ITEM_TM_TORMENT: item_id = item_id(228);
}
impl item_id {
    pub const ITEM_TM_FACADE: item_id = item_id(229);
}
impl item_id {
    pub const ITEM_TM_SECRET_POWER: item_id = item_id(230);
}
impl item_id {
    pub const ITEM_TM_REST: item_id = item_id(231);
}
impl item_id {
    pub const ITEM_TM_ATTRACT: item_id = item_id(232);
}
impl item_id {
    pub const ITEM_TM_THIEF: item_id = item_id(233);
}
impl item_id {
    pub const ITEM_TM_STEEL_WING: item_id = item_id(234);
}
impl item_id {
    pub const ITEM_TM_SKILL_SWAP: item_id = item_id(235);
}
impl item_id {
    pub const ITEM_UNNAMED_0xEC: item_id = item_id(236);
}
impl item_id {
    pub const ITEM_TM_OVERHEAT: item_id = item_id(237);
}
impl item_id {
    pub const ITEM_TM_ROOST: item_id = item_id(238);
}
impl item_id {
    pub const ITEM_TM_FOCUS_BLAST: item_id = item_id(239);
}
impl item_id {
    pub const ITEM_TM_ENERGY_BALL: item_id = item_id(240);
}
impl item_id {
    pub const ITEM_TM_FALSE_SWIPE: item_id = item_id(241);
}
impl item_id {
    pub const ITEM_TM_BRINE: item_id = item_id(242);
}
impl item_id {
    pub const ITEM_TM_FLING: item_id = item_id(243);
}
impl item_id {
    pub const ITEM_TM_CHARGE_BEAM: item_id = item_id(244);
}
impl item_id {
    pub const ITEM_TM_ENDURE: item_id = item_id(245);
}
impl item_id {
    pub const ITEM_TM_DRAGON_PULSE: item_id = item_id(246);
}
impl item_id {
    pub const ITEM_TM_DRAIN_PUNCH: item_id = item_id(247);
}
impl item_id {
    pub const ITEM_TM_WILL_O_WISP: item_id = item_id(248);
}
impl item_id {
    pub const ITEM_TM_SILVER_WIND: item_id = item_id(249);
}
impl item_id {
    pub const ITEM_TM_EMBARGO: item_id = item_id(250);
}
impl item_id {
    pub const ITEM_TM_EXPLOSION: item_id = item_id(251);
}
impl item_id {
    pub const ITEM_TM_SHADOW_CLAW: item_id = item_id(252);
}
impl item_id {
    pub const ITEM_TM_PAYBACK: item_id = item_id(253);
}
impl item_id {
    pub const ITEM_TM_RECYCLE: item_id = item_id(254);
}
impl item_id {
    pub const ITEM_TM_GIGA_IMPACT: item_id = item_id(255);
}
impl item_id {
    pub const ITEM_TM_ROCK_POLISH: item_id = item_id(256);
}
impl item_id {
    pub const ITEM_TM_WIDE_SLASH: item_id = item_id(257);
}
impl item_id {
    pub const ITEM_UNNAMED_0x102: item_id = item_id(258);
}
impl item_id {
    pub const ITEM_UNNAMED_0x103: item_id = item_id(259);
}
impl item_id {
    pub const ITEM_TM_VACUUM_CUT: item_id = item_id(260);
}
impl item_id {
    pub const ITEM_TM_DIVE: item_id = item_id(261);
}
impl item_id {
    pub const ITEM_TM_FLASH: item_id = item_id(262);
}
impl item_id {
    pub const ITEM_TM_STONE_EDGE: item_id = item_id(263);
}
impl item_id {
    pub const ITEM_TM_AVALANCHE: item_id = item_id(264);
}
impl item_id {
    pub const ITEM_TM_THUNDER_WAVE: item_id = item_id(265);
}
impl item_id {
    pub const ITEM_TM_GYRO_BALL: item_id = item_id(266);
}
impl item_id {
    pub const ITEM_TM_SWORDS_DANCE: item_id = item_id(267);
}
impl item_id {
    pub const ITEM_TM_STEALTH_ROCK: item_id = item_id(268);
}
impl item_id {
    pub const ITEM_TM_PSYCH_UP: item_id = item_id(269);
}
impl item_id {
    pub const ITEM_TM_CAPTIVATE: item_id = item_id(270);
}
impl item_id {
    pub const ITEM_TM_DARK_PULSE: item_id = item_id(271);
}
impl item_id {
    pub const ITEM_TM_ROCK_SLIDE: item_id = item_id(272);
}
impl item_id {
    pub const ITEM_TM_X_SCISSOR: item_id = item_id(273);
}
impl item_id {
    pub const ITEM_TM_SLEEP_TALK: item_id = item_id(274);
}
impl item_id {
    pub const ITEM_TM_NATURAL_GIFT: item_id = item_id(275);
}
impl item_id {
    pub const ITEM_TM_POISON_JAB: item_id = item_id(276);
}
impl item_id {
    pub const ITEM_TM_DREAM_EATER: item_id = item_id(277);
}
impl item_id {
    pub const ITEM_TM_GRASS_KNOT: item_id = item_id(278);
}
impl item_id {
    pub const ITEM_TM_SWAGGER: item_id = item_id(279);
}
impl item_id {
    pub const ITEM_TM_PLUCK: item_id = item_id(280);
}
impl item_id {
    pub const ITEM_TM_U_TURN: item_id = item_id(281);
}
impl item_id {
    pub const ITEM_TM_SUBSTITUTE: item_id = item_id(282);
}
impl item_id {
    pub const ITEM_TM_FLASH_CANNON: item_id = item_id(283);
}
impl item_id {
    pub const ITEM_TM_TRICK_ROOM: item_id = item_id(284);
}
impl item_id {
    pub const ITEM_TM_CUT: item_id = item_id(285);
}
impl item_id {
    pub const ITEM_TM_FLY: item_id = item_id(286);
}
impl item_id {
    pub const ITEM_TM_SURF: item_id = item_id(287);
}
impl item_id {
    pub const ITEM_TM_STRENGTH: item_id = item_id(288);
}
impl item_id {
    pub const ITEM_TM_DEFOG: item_id = item_id(289);
}
impl item_id {
    pub const ITEM_TM_ROCK_SMASH: item_id = item_id(290);
}
impl item_id {
    pub const ITEM_TM_WATERFALL: item_id = item_id(291);
}
impl item_id {
    pub const ITEM_TM_ROCK_CLIMB: item_id = item_id(292);
}
impl item_id {
    pub const ITEM_UNNAMED_0x125: item_id = item_id(293);
}
impl item_id {
    pub const ITEM_UNNAMED_0x126: item_id = item_id(294);
}
impl item_id {
    pub const ITEM_UNNAMED_0x127: item_id = item_id(295);
}
impl item_id {
    pub const ITEM_UNNAMED_0x128: item_id = item_id(296);
}
impl item_id {
    pub const ITEM_UNNAMED_0x129: item_id = item_id(297);
}
impl item_id {
    pub const ITEM_UNNAMED_0x12A: item_id = item_id(298);
}
impl item_id {
    pub const ITEM_UNNAMED_0x12B: item_id = item_id(299);
}
impl item_id {
    pub const ITEM_UNNAMED_0x12C: item_id = item_id(300);
}
impl item_id {
    pub const ITEM_HAIL_ORB: item_id = item_id(301);
}
impl item_id {
    pub const ITEM_SUNNY_ORB: item_id = item_id(302);
}
impl item_id {
    pub const ITEM_RAINY_ORB: item_id = item_id(303);
}
impl item_id {
    pub const ITEM_EVASION_ORB: item_id = item_id(304);
}
impl item_id {
    pub const ITEM_SANDY_ORB: item_id = item_id(305);
}
impl item_id {
    pub const ITEM_ROCKY_ORB: item_id = item_id(306);
}
impl item_id {
    pub const ITEM_SNATCH_ORB: item_id = item_id(307);
}
impl item_id {
    pub const ITEM_SEE_TRAP_ORB: item_id = item_id(308);
}
impl item_id {
    pub const ITEM_MUG_ORB: item_id = item_id(309);
}
impl item_id {
    pub const ITEM_REBOUND_ORB: item_id = item_id(310);
}
impl item_id {
    pub const ITEM_LOB_ORB: item_id = item_id(311);
}
impl item_id {
    pub const ITEM_SWITCHER_ORB: item_id = item_id(312);
}
impl item_id {
    pub const ITEM_BLOWBACK_ORB: item_id = item_id(313);
}
impl item_id {
    pub const ITEM_WARP_ORB: item_id = item_id(314);
}
impl item_id {
    pub const ITEM_TRANSFER_ORB: item_id = item_id(315);
}
impl item_id {
    pub const ITEM_SLOW_ORB: item_id = item_id(316);
}
impl item_id {
    pub const ITEM_QUICK_ORB: item_id = item_id(317);
}
impl item_id {
    pub const ITEM_LUMINOUS_ORB: item_id = item_id(318);
}
impl item_id {
    pub const ITEM_PETRIFY_ORB: item_id = item_id(319);
}
impl item_id {
    pub const ITEM_STAYAWAY_ORB: item_id = item_id(320);
}
impl item_id {
    pub const ITEM_POUNCE_ORB: item_id = item_id(321);
}
impl item_id {
    pub const ITEM_TRAWL_ORB: item_id = item_id(322);
}
impl item_id {
    pub const ITEM_CLEANSE_ORB: item_id = item_id(323);
}
impl item_id {
    pub const ITEM_UNNAMED_0x144: item_id = item_id(324);
}
impl item_id {
    pub const ITEM_DECOY_ORB: item_id = item_id(325);
}
impl item_id {
    pub const ITEM_SLUMBER_ORB: item_id = item_id(326);
}
impl item_id {
    pub const ITEM_TOTTER_ORB: item_id = item_id(327);
}
impl item_id {
    pub const ITEM_TWO_EDGE_ORB: item_id = item_id(328);
}
impl item_id {
    pub const ITEM_SILENCE_ORB: item_id = item_id(329);
}
impl item_id {
    pub const ITEM_ESCAPE_ORB: item_id = item_id(330);
}
impl item_id {
    pub const ITEM_SCANNER_ORB: item_id = item_id(331);
}
impl item_id {
    pub const ITEM_RADAR_ORB: item_id = item_id(332);
}
impl item_id {
    pub const ITEM_DROUGHT_ORB: item_id = item_id(333);
}
impl item_id {
    pub const ITEM_TRAPBUST_ORB: item_id = item_id(334);
}
impl item_id {
    pub const ITEM_ROLLCALL_ORB: item_id = item_id(335);
}
impl item_id {
    pub const ITEM_INVISIFY_ORB: item_id = item_id(336);
}
impl item_id {
    pub const ITEM_ONE_SHOT_ORB: item_id = item_id(337);
}
impl item_id {
    pub const ITEM_IDENTIFY_ORB: item_id = item_id(338);
}
impl item_id {
    pub const ITEM_UNNAMED_0x153: item_id = item_id(339);
}
impl item_id {
    pub const ITEM_SHOCKER_ORB: item_id = item_id(340);
}
impl item_id {
    pub const ITEM_SIZEBUST_ORB: item_id = item_id(341);
}
impl item_id {
    pub const ITEM_ONE_ROOM_ORB: item_id = item_id(342);
}
impl item_id {
    pub const ITEM_FILL_IN_ORB: item_id = item_id(343);
}
impl item_id {
    pub const ITEM_TRAPPER_ORB: item_id = item_id(344);
}
impl item_id {
    pub const ITEM_UNNAMED_0x159: item_id = item_id(345);
}
impl item_id {
    pub const ITEM_ITEMIZER_ORB: item_id = item_id(346);
}
impl item_id {
    pub const ITEM_HURL_ORB: item_id = item_id(347);
}
impl item_id {
    pub const ITEM_MOBILE_ORB: item_id = item_id(348);
}
impl item_id {
    pub const ITEM_UNNAMED_0x15D: item_id = item_id(349);
}
impl item_id {
    pub const ITEM_STAIRS_ORB: item_id = item_id(350);
}
impl item_id {
    pub const ITEM_LONGTOSS_ORB: item_id = item_id(351);
}
impl item_id {
    pub const ITEM_PIERCE_ORB: item_id = item_id(352);
}
impl item_id {
    pub const ITEM_UNNAMED_0x161: item_id = item_id(353);
}
impl item_id {
    pub const ITEM_SPURN_ORB: item_id = item_id(354);
}
impl item_id {
    pub const ITEM_FOE_HOLD_ORB: item_id = item_id(355);
}
impl item_id {
    pub const ITEM_ALL_MACH_ORB: item_id = item_id(356);
}
impl item_id {
    pub const ITEM_FOE_FEAR_ORB: item_id = item_id(357);
}
impl item_id {
    pub const ITEM_ALL_HIT_ORB: item_id = item_id(358);
}
impl item_id {
    pub const ITEM_FOE_SEAL_ORB: item_id = item_id(359);
}
impl item_id {
    pub const ITEM_UNNAMED_0x168: item_id = item_id(360);
}
impl item_id {
    pub const ITEM_UNNAMED_0x169: item_id = item_id(361);
}
impl item_id {
    pub const ITEM_LINK_BOX: item_id = item_id(362);
}
impl item_id {
    pub const ITEM_UNNAMED_0x16B: item_id = item_id(363);
}
impl item_id {
    pub const ITEM_GORGEOUS_BOX_1: item_id = item_id(364);
}
impl item_id {
    pub const ITEM_GORGEOUS_BOX_2: item_id = item_id(365);
}
impl item_id {
    pub const ITEM_GORGEOUS_BOX_3: item_id = item_id(366);
}
impl item_id {
    pub const ITEM_HEAVY_BOX_1: item_id = item_id(367);
}
impl item_id {
    pub const ITEM_HEAVY_BOX_2: item_id = item_id(368);
}
impl item_id {
    pub const ITEM_HEAVY_BOX_3: item_id = item_id(369);
}
impl item_id {
    pub const ITEM_SHINY_BOX_1: item_id = item_id(370);
}
impl item_id {
    pub const ITEM_SHINY_BOX_2: item_id = item_id(371);
}
impl item_id {
    pub const ITEM_SHINY_BOX_3: item_id = item_id(372);
}
impl item_id {
    pub const ITEM_NIFTY_BOX_1: item_id = item_id(373);
}
impl item_id {
    pub const ITEM_NIFTY_BOX_2: item_id = item_id(374);
}
impl item_id {
    pub const ITEM_NIFTY_BOX_3: item_id = item_id(375);
}
impl item_id {
    pub const ITEM_DAINTY_BOX_1: item_id = item_id(376);
}
impl item_id {
    pub const ITEM_DAINTY_BOX_2: item_id = item_id(377);
}
impl item_id {
    pub const ITEM_DAINTY_BOX_3: item_id = item_id(378);
}
impl item_id {
    pub const ITEM_GLITTERY_BOX_1: item_id = item_id(379);
}
impl item_id {
    pub const ITEM_GLITTERY_BOX_2: item_id = item_id(380);
}
impl item_id {
    pub const ITEM_GLITTERY_BOX_3: item_id = item_id(381);
}
impl item_id {
    pub const ITEM_PRETTY_BOX_1: item_id = item_id(382);
}
impl item_id {
    pub const ITEM_PRETTY_BOX_2: item_id = item_id(383);
}
impl item_id {
    pub const ITEM_PRETTY_BOX_3: item_id = item_id(384);
}
impl item_id {
    pub const ITEM_DELUXE_BOX_1: item_id = item_id(385);
}
impl item_id {
    pub const ITEM_DELUXE_BOX_2: item_id = item_id(386);
}
impl item_id {
    pub const ITEM_DELUXE_BOX_3: item_id = item_id(387);
}
impl item_id {
    pub const ITEM_LIGHT_BOX_1: item_id = item_id(388);
}
impl item_id {
    pub const ITEM_LIGHT_BOX_2: item_id = item_id(389);
}
impl item_id {
    pub const ITEM_LIGHT_BOX_3: item_id = item_id(390);
}
impl item_id {
    pub const ITEM_CUTE_BOX_1: item_id = item_id(391);
}
impl item_id {
    pub const ITEM_CUTE_BOX_2: item_id = item_id(392);
}
impl item_id {
    pub const ITEM_CUTE_BOX_3: item_id = item_id(393);
}
impl item_id {
    pub const ITEM_HARD_BOX_1: item_id = item_id(394);
}
impl item_id {
    pub const ITEM_HARD_BOX_2: item_id = item_id(395);
}
impl item_id {
    pub const ITEM_HARD_BOX_3: item_id = item_id(396);
}
impl item_id {
    pub const ITEM_SINISTER_BOX_1: item_id = item_id(397);
}
impl item_id {
    pub const ITEM_SINISTER_BOX_2: item_id = item_id(398);
}
impl item_id {
    pub const ITEM_SINISTER_BOX_3: item_id = item_id(399);
}
impl item_id {
    pub const ITEM_A_STONE: item_id = item_id(400);
}
impl item_id {
    pub const ITEM_B_STONE: item_id = item_id(401);
}
impl item_id {
    pub const ITEM_C_STONE: item_id = item_id(402);
}
impl item_id {
    pub const ITEM_D_STONE: item_id = item_id(403);
}
impl item_id {
    pub const ITEM_E_STONE: item_id = item_id(404);
}
impl item_id {
    pub const ITEM_F_STONE: item_id = item_id(405);
}
impl item_id {
    pub const ITEM_G_STONE: item_id = item_id(406);
}
impl item_id {
    pub const ITEM_H_STONE: item_id = item_id(407);
}
impl item_id {
    pub const ITEM_I_STONE: item_id = item_id(408);
}
impl item_id {
    pub const ITEM_J_STONE: item_id = item_id(409);
}
impl item_id {
    pub const ITEM_K_STONE: item_id = item_id(410);
}
impl item_id {
    pub const ITEM_L_STONE: item_id = item_id(411);
}
impl item_id {
    pub const ITEM_M_STONE: item_id = item_id(412);
}
impl item_id {
    pub const ITEM_N_STONE: item_id = item_id(413);
}
impl item_id {
    pub const ITEM_O_STONE: item_id = item_id(414);
}
impl item_id {
    pub const ITEM_P_STONE: item_id = item_id(415);
}
impl item_id {
    pub const ITEM_Q_STONE: item_id = item_id(416);
}
impl item_id {
    pub const ITEM_R_STONE: item_id = item_id(417);
}
impl item_id {
    pub const ITEM_S_STONE: item_id = item_id(418);
}
impl item_id {
    pub const ITEM_T_STONE: item_id = item_id(419);
}
impl item_id {
    pub const ITEM_U_STONE: item_id = item_id(420);
}
impl item_id {
    pub const ITEM_V_STONE: item_id = item_id(421);
}
impl item_id {
    pub const ITEM_W_STONE: item_id = item_id(422);
}
impl item_id {
    pub const ITEM_X_STONE: item_id = item_id(423);
}
impl item_id {
    pub const ITEM_Y_STONE: item_id = item_id(424);
}
impl item_id {
    pub const ITEM_Z_STONE: item_id = item_id(425);
}
impl item_id {
    pub const ITEM_EXCLAMATION_STONE: item_id = item_id(426);
}
impl item_id {
    pub const ITEM_QUESTION_STONE: item_id = item_id(427);
}
impl item_id {
    pub const ITEM_SILVER_BOW: item_id = item_id(428);
}
impl item_id {
    pub const ITEM_BROWN_BOW: item_id = item_id(429);
}
impl item_id {
    pub const ITEM_RED_BOW: item_id = item_id(430);
}
impl item_id {
    pub const ITEM_PINK_BOW: item_id = item_id(431);
}
impl item_id {
    pub const ITEM_ORANGE_BOW: item_id = item_id(432);
}
impl item_id {
    pub const ITEM_YELLOW_BOW: item_id = item_id(433);
}
impl item_id {
    pub const ITEM_LIME_BOW: item_id = item_id(434);
}
impl item_id {
    pub const ITEM_GREEN_BOW: item_id = item_id(435);
}
impl item_id {
    pub const ITEM_VIRIDIAN_BOW: item_id = item_id(436);
}
impl item_id {
    pub const ITEM_MINTY_BOW: item_id = item_id(437);
}
impl item_id {
    pub const ITEM_SKY_BLUE_BOW: item_id = item_id(438);
}
impl item_id {
    pub const ITEM_BLUE_BOW: item_id = item_id(439);
}
impl item_id {
    pub const ITEM_COBALT_BOW: item_id = item_id(440);
}
impl item_id {
    pub const ITEM_PURPLE_BOW: item_id = item_id(441);
}
impl item_id {
    pub const ITEM_VIOLET_BOW: item_id = item_id(442);
}
impl item_id {
    pub const ITEM_FUCHSIA_BOW: item_id = item_id(443);
}
impl item_id {
    pub const ITEM_PRISM_RUFF: item_id = item_id(444);
}
impl item_id {
    pub const ITEM_AQUA_COLLAR: item_id = item_id(445);
}
impl item_id {
    pub const ITEM_VOLT_COLLAR: item_id = item_id(446);
}
impl item_id {
    pub const ITEM_FIRE_COLLAR: item_id = item_id(447);
}
impl item_id {
    pub const ITEM_LIGHT_COLLAR: item_id = item_id(448);
}
impl item_id {
    pub const ITEM_DUSK_COLLAR: item_id = item_id(449);
}
impl item_id {
    pub const ITEM_VIRID_COLLAR: item_id = item_id(450);
}
impl item_id {
    pub const ITEM_ICY_COLLAR: item_id = item_id(451);
}
impl item_id {
    pub const ITEM_PEP_SASH: item_id = item_id(452);
}
impl item_id {
    pub const ITEM_COUNTER_RUFF: item_id = item_id(453);
}
impl item_id {
    pub const ITEM_VICTORY_BELT: item_id = item_id(454);
}
impl item_id {
    pub const ITEM_POWER_BANGLE: item_id = item_id(455);
}
impl item_id {
    pub const ITEM_THUNDERSHARD: item_id = item_id(456);
}
impl item_id {
    pub const ITEM_FALLEN_STAR: item_id = item_id(457);
}
impl item_id {
    pub const ITEM_FLUFF_DUST: item_id = item_id(458);
}
impl item_id {
    pub const ITEM_EGG_SHARD: item_id = item_id(459);
}
impl item_id {
    pub const ITEM_HEROIC_MEDAL: item_id = item_id(460);
}
impl item_id {
    pub const ITEM_CHIC_SHARD: item_id = item_id(461);
}
impl item_id {
    pub const ITEM_YELLOW_JEWEL: item_id = item_id(462);
}
impl item_id {
    pub const ITEM_RED_JEWEL: item_id = item_id(463);
}
impl item_id {
    pub const ITEM_BLUE_JEWEL: item_id = item_id(464);
}
impl item_id {
    pub const ITEM_LAUGH_DUST: item_id = item_id(465);
}
impl item_id {
    pub const ITEM_GUARD_SAND: item_id = item_id(466);
}
impl item_id {
    pub const ITEM_PURPLE_JEWEL: item_id = item_id(467);
}
impl item_id {
    pub const ITEM_WHITE_JEWEL: item_id = item_id(468);
}
impl item_id {
    pub const ITEM_BRAVE_DUST: item_id = item_id(469);
}
impl item_id {
    pub const ITEM_HEAL_DEW: item_id = item_id(470);
}
impl item_id {
    pub const ITEM_MARINE_CACHE: item_id = item_id(471);
}
impl item_id {
    pub const ITEM_FREEZE_VEIL: item_id = item_id(472);
}
impl item_id {
    pub const ITEM_THUNDER_VEIL: item_id = item_id(473);
}
impl item_id {
    pub const ITEM_FIRE_VEIL: item_id = item_id(474);
}
impl item_id {
    pub const ITEM_HAVOC_ROBE: item_id = item_id(475);
}
impl item_id {
    pub const ITEM_LIFE_RING: item_id = item_id(476);
}
impl item_id {
    pub const ITEM_BOLT_FANG: item_id = item_id(477);
}
impl item_id {
    pub const ITEM_FLARE_FANG: item_id = item_id(478);
}
impl item_id {
    pub const ITEM_AQUA_MANTLE: item_id = item_id(479);
}
impl item_id {
    pub const ITEM_SILVER_VEIL: item_id = item_id(480);
}
impl item_id {
    pub const ITEM_RAINBOW_VEIL: item_id = item_id(481);
}
impl item_id {
    pub const ITEM_CHRONO_VEIL: item_id = item_id(482);
}
impl item_id {
    pub const ITEM_ROCK_SASH: item_id = item_id(483);
}
impl item_id {
    pub const ITEM_ICE_SASH: item_id = item_id(484);
}
impl item_id {
    pub const ITEM_STEEL_SASH: item_id = item_id(485);
}
impl item_id {
    pub const ITEM_HEART_BROOCH: item_id = item_id(486);
}
impl item_id {
    pub const ITEM_EON_VEIL: item_id = item_id(487);
}
impl item_id {
    pub const ITEM_SEABED_VEIL: item_id = item_id(488);
}
impl item_id {
    pub const ITEM_TERRA_RING: item_id = item_id(489);
}
impl item_id {
    pub const ITEM_SKYHIGH_VEIL: item_id = item_id(490);
}
impl item_id {
    pub const ITEM_WISH_MANTLE: item_id = item_id(491);
}
impl item_id {
    pub const ITEM_REVIVE_ROBE: item_id = item_id(492);
}
impl item_id {
    pub const ITEM_SHADOW_VEIL: item_id = item_id(493);
}
impl item_id {
    pub const ITEM_PLASMA_VEIL: item_id = item_id(494);
}
impl item_id {
    pub const ITEM_EDIFY_ROBE: item_id = item_id(495);
}
impl item_id {
    pub const ITEM_CHARITY_ROBE: item_id = item_id(496);
}
impl item_id {
    pub const ITEM_HOPE_ROBE: item_id = item_id(497);
}
impl item_id {
    pub const ITEM_TIME_SHIELD: item_id = item_id(498);
}
impl item_id {
    pub const ITEM_AIR_BLADE: item_id = item_id(499);
}
impl item_id {
    pub const ITEM_SEARING_RING: item_id = item_id(500);
}
impl item_id {
    pub const ITEM_ANCIENT_RING: item_id = item_id(501);
}
impl item_id {
    pub const ITEM_NETHER_VEIL: item_id = item_id(502);
}
impl item_id {
    pub const ITEM_LUNAR_VEIL: item_id = item_id(503);
}
impl item_id {
    pub const ITEM_TIDAL_CAPE: item_id = item_id(504);
}
impl item_id {
    pub const ITEM_ECLIPSE_ROBE: item_id = item_id(505);
}
impl item_id {
    pub const ITEM_WHITE_SILK: item_id = item_id(506);
}
impl item_id {
    pub const ITEM_NORMAL_DUST: item_id = item_id(507);
}
impl item_id {
    pub const ITEM_WHITE_GEM: item_id = item_id(508);
}
impl item_id {
    pub const ITEM_JOY_GLOBE: item_id = item_id(509);
}
impl item_id {
    pub const ITEM_RED_SILK: item_id = item_id(510);
}
impl item_id {
    pub const ITEM_FIRE_DUST: item_id = item_id(511);
}
impl item_id {
    pub const ITEM_FIERY_GEM: item_id = item_id(512);
}
impl item_id {
    pub const ITEM_FIERY_GLOBE: item_id = item_id(513);
}
impl item_id {
    pub const ITEM_BLUE_SILK: item_id = item_id(514);
}
impl item_id {
    pub const ITEM_WATER_DUST: item_id = item_id(515);
}
impl item_id {
    pub const ITEM_AQUA_GEM: item_id = item_id(516);
}
impl item_id {
    pub const ITEM_AQUA_GLOBE: item_id = item_id(517);
}
impl item_id {
    pub const ITEM_GRASS_SILK: item_id = item_id(518);
}
impl item_id {
    pub const ITEM_GRASS_DUST: item_id = item_id(519);
}
impl item_id {
    pub const ITEM_GRASS_GEM: item_id = item_id(520);
}
impl item_id {
    pub const ITEM_SOOTHE_GLOBE: item_id = item_id(521);
}
impl item_id {
    pub const ITEM_YELLOW_SILK: item_id = item_id(522);
}
impl item_id {
    pub const ITEM_THUNDER_DUST: item_id = item_id(523);
}
impl item_id {
    pub const ITEM_THUNDER_GEM: item_id = item_id(524);
}
impl item_id {
    pub const ITEM_VOLT_GLOBE: item_id = item_id(525);
}
impl item_id {
    pub const ITEM_CLEAR_SILK: item_id = item_id(526);
}
impl item_id {
    pub const ITEM_ICY_DUST: item_id = item_id(527);
}
impl item_id {
    pub const ITEM_ICY_GEM: item_id = item_id(528);
}
impl item_id {
    pub const ITEM_ICY_GLOBE: item_id = item_id(529);
}
impl item_id {
    pub const ITEM_ORANGE_SILK: item_id = item_id(530);
}
impl item_id {
    pub const ITEM_COURAGE_DUST: item_id = item_id(531);
}
impl item_id {
    pub const ITEM_FIGHT_GEM: item_id = item_id(532);
}
impl item_id {
    pub const ITEM_POWER_GLOBE: item_id = item_id(533);
}
impl item_id {
    pub const ITEM_PINK_SILK: item_id = item_id(534);
}
impl item_id {
    pub const ITEM_POISON_DUST: item_id = item_id(535);
}
impl item_id {
    pub const ITEM_POISON_GEM: item_id = item_id(536);
}
impl item_id {
    pub const ITEM_POISON_GLOBE: item_id = item_id(537);
}
impl item_id {
    pub const ITEM_BROWN_SILK: item_id = item_id(538);
}
impl item_id {
    pub const ITEM_GROUND_DUST: item_id = item_id(539);
}
impl item_id {
    pub const ITEM_EARTH_GEM: item_id = item_id(540);
}
impl item_id {
    pub const ITEM_TERRA_GLOBE: item_id = item_id(541);
}
impl item_id {
    pub const ITEM_SKY_SILK: item_id = item_id(542);
}
impl item_id {
    pub const ITEM_SKY_DUST: item_id = item_id(543);
}
impl item_id {
    pub const ITEM_SKY_GEM: item_id = item_id(544);
}
impl item_id {
    pub const ITEM_SKY_GLOBE: item_id = item_id(545);
}
impl item_id {
    pub const ITEM_GOLD_SILK: item_id = item_id(546);
}
impl item_id {
    pub const ITEM_PSYCHE_DUST: item_id = item_id(547);
}
impl item_id {
    pub const ITEM_PSYCHE_GEM: item_id = item_id(548);
}
impl item_id {
    pub const ITEM_PSYCHE_GLOBE: item_id = item_id(549);
}
impl item_id {
    pub const ITEM_GREEN_SILK: item_id = item_id(550);
}
impl item_id {
    pub const ITEM_WONDER_DUST: item_id = item_id(551);
}
impl item_id {
    pub const ITEM_GUARD_GEM: item_id = item_id(552);
}
impl item_id {
    pub const ITEM_DEFEND_GLOBE: item_id = item_id(553);
}
impl item_id {
    pub const ITEM_GRAY_SILK: item_id = item_id(554);
}
impl item_id {
    pub const ITEM_ROCK_DUST: item_id = item_id(555);
}
impl item_id {
    pub const ITEM_STONE_GEM: item_id = item_id(556);
}
impl item_id {
    pub const ITEM_ROCK_GLOBE: item_id = item_id(557);
}
impl item_id {
    pub const ITEM_PURPLE_SILK: item_id = item_id(558);
}
impl item_id {
    pub const ITEM_SHADY_DUST: item_id = item_id(559);
}
impl item_id {
    pub const ITEM_SHADOW_GEM: item_id = item_id(560);
}
impl item_id {
    pub const ITEM_NETHER_GLOBE: item_id = item_id(561);
}
impl item_id {
    pub const ITEM_ROYAL_SILK: item_id = item_id(562);
}
impl item_id {
    pub const ITEM_DRAGON_DUST: item_id = item_id(563);
}
impl item_id {
    pub const ITEM_DRAGON_GEM: item_id = item_id(564);
}
impl item_id {
    pub const ITEM_DRAGON_GLOBE: item_id = item_id(565);
}
impl item_id {
    pub const ITEM_BLACK_SILK: item_id = item_id(566);
}
impl item_id {
    pub const ITEM_DARK_DUST: item_id = item_id(567);
}
impl item_id {
    pub const ITEM_DARK_GEM: item_id = item_id(568);
}
impl item_id {
    pub const ITEM_DUSK_GLOBE: item_id = item_id(569);
}
impl item_id {
    pub const ITEM_IRON_SILK: item_id = item_id(570);
}
impl item_id {
    pub const ITEM_STEEL_DUST: item_id = item_id(571);
}
impl item_id {
    pub const ITEM_METAL_GEM: item_id = item_id(572);
}
impl item_id {
    pub const ITEM_STEEL_GLOBE: item_id = item_id(573);
}
impl item_id {
    pub const ITEM_BULBA_CLAW: item_id = item_id(574);
}
impl item_id {
    pub const ITEM_BULBA_FANG: item_id = item_id(575);
}
impl item_id {
    pub const ITEM_GRASS_GUARD: item_id = item_id(576);
}
impl item_id {
    pub const ITEM_LEAFY_TIE: item_id = item_id(577);
}
impl item_id {
    pub const ITEM_IVY_CLAW: item_id = item_id(578);
}
impl item_id {
    pub const ITEM_IVY_FANG: item_id = item_id(579);
}
impl item_id {
    pub const ITEM_IVY_CREST: item_id = item_id(580);
}
impl item_id {
    pub const ITEM_PLANT_TORC: item_id = item_id(581);
}
impl item_id {
    pub const ITEM_VENUS_CLAW: item_id = item_id(582);
}
impl item_id {
    pub const ITEM_VENUS_FANG: item_id = item_id(583);
}
impl item_id {
    pub const ITEM_VENUS_SEAL: item_id = item_id(584);
}
impl item_id {
    pub const ITEM_SOLAR_SASH: item_id = item_id(585);
}
impl item_id {
    pub const ITEM_CHAR_CLAW: item_id = item_id(586);
}
impl item_id {
    pub const ITEM_CHAR_FANG: item_id = item_id(587);
}
impl item_id {
    pub const ITEM_FIERY_HEART: item_id = item_id(588);
}
impl item_id {
    pub const ITEM_HEAT_ARMLET: item_id = item_id(589);
}
impl item_id {
    pub const ITEM_CHARME_CLAW: item_id = item_id(590);
}
impl item_id {
    pub const ITEM_CHARME_FANG: item_id = item_id(591);
}
impl item_id {
    pub const ITEM_CHARME_CREST: item_id = item_id(592);
}
impl item_id {
    pub const ITEM_KINDLE_SCARF: item_id = item_id(593);
}
impl item_id {
    pub const ITEM_CHARIZ_CLAW: item_id = item_id(594);
}
impl item_id {
    pub const ITEM_CHARIZ_FANG: item_id = item_id(595);
}
impl item_id {
    pub const ITEM_CHARIZ_SEAL: item_id = item_id(596);
}
impl item_id {
    pub const ITEM_FLAME_BANGLE: item_id = item_id(597);
}
impl item_id {
    pub const ITEM_SQUIRT_FOAM: item_id = item_id(598);
}
impl item_id {
    pub const ITEM_SQUIRT_CARD: item_id = item_id(599);
}
impl item_id {
    pub const ITEM_WATER_GUARD: item_id = item_id(600);
}
impl item_id {
    pub const ITEM_AQUA_TIE: item_id = item_id(601);
}
impl item_id {
    pub const ITEM_WARTOR_CLAW: item_id = item_id(602);
}
impl item_id {
    pub const ITEM_WARTOR_FANG: item_id = item_id(603);
}
impl item_id {
    pub const ITEM_WARTOR_CREST: item_id = item_id(604);
}
impl item_id {
    pub const ITEM_BUBBLEBANGLE: item_id = item_id(605);
}
impl item_id {
    pub const ITEM_BLASTO_CLAW: item_id = item_id(606);
}
impl item_id {
    pub const ITEM_BLASTO_CARD: item_id = item_id(607);
}
impl item_id {
    pub const ITEM_BLASTO_SEAL: item_id = item_id(608);
}
impl item_id {
    pub const ITEM_HYDRO_BAND: item_id = item_id(609);
}
impl item_id {
    pub const ITEM_PICHU_HAIR: item_id = item_id(610);
}
impl item_id {
    pub const ITEM_PICHU_CARD: item_id = item_id(611);
}
impl item_id {
    pub const ITEM_EXPRESS_TAG: item_id = item_id(612);
}
impl item_id {
    pub const ITEM_SHOCKER_CAPE: item_id = item_id(613);
}
impl item_id {
    pub const ITEM_PIKACHU_HAIR: item_id = item_id(614);
}
impl item_id {
    pub const ITEM_PIKACHU_CARD: item_id = item_id(615);
}
impl item_id {
    pub const ITEM_VOLT_CHARM: item_id = item_id(616);
}
impl item_id {
    pub const ITEM_VOLT_TORC: item_id = item_id(617);
}
impl item_id {
    pub const ITEM_RAICHU_HAIR: item_id = item_id(618);
}
impl item_id {
    pub const ITEM_RAICHU_CARD: item_id = item_id(619);
}
impl item_id {
    pub const ITEM_RAICHU_CREST: item_id = item_id(620);
}
impl item_id {
    pub const ITEM_ZAPPER_SCARF: item_id = item_id(621);
}
impl item_id {
    pub const ITEM_MEOWTH_CLAW: item_id = item_id(622);
}
impl item_id {
    pub const ITEM_MEOWTH_FANG: item_id = item_id(623);
}
impl item_id {
    pub const ITEM_COIN_CHARM: item_id = item_id(624);
}
impl item_id {
    pub const ITEM_BLING_RUFF: item_id = item_id(625);
}
impl item_id {
    pub const ITEM_PERSIAN_CLAW: item_id = item_id(626);
}
impl item_id {
    pub const ITEM_PERSIAN_FANG: item_id = item_id(627);
}
impl item_id {
    pub const ITEM_INSIGHT_ROCK: item_id = item_id(628);
}
impl item_id {
    pub const ITEM_NOBLE_SCARF: item_id = item_id(629);
}
impl item_id {
    pub const ITEM_CHIKO_CLAW: item_id = item_id(630);
}
impl item_id {
    pub const ITEM_CHIKO_CARD: item_id = item_id(631);
}
impl item_id {
    pub const ITEM_DAWN_JEWEL: item_id = item_id(632);
}
impl item_id {
    pub const ITEM_FRESH_BOW: item_id = item_id(633);
}
impl item_id {
    pub const ITEM_BAYLEEF_CLAW: item_id = item_id(634);
}
impl item_id {
    pub const ITEM_BAYLEEF_CARD: item_id = item_id(635);
}
impl item_id {
    pub const ITEM_BAYLEEF_SEAL: item_id = item_id(636);
}
impl item_id {
    pub const ITEM_SPICE_BOW: item_id = item_id(637);
}
impl item_id {
    pub const ITEM_MEGANI_CLAW: item_id = item_id(638);
}
impl item_id {
    pub const ITEM_MEGANI_CARD: item_id = item_id(639);
}
impl item_id {
    pub const ITEM_SHINY_CHARM: item_id = item_id(640);
}
impl item_id {
    pub const ITEM_BRIGHT_VEIL: item_id = item_id(641);
}
impl item_id {
    pub const ITEM_CYNDA_HAIR: item_id = item_id(642);
}
impl item_id {
    pub const ITEM_CYNDA_CLAW: item_id = item_id(643);
}
impl item_id {
    pub const ITEM_BLAZING_ROCK: item_id = item_id(644);
}
impl item_id {
    pub const ITEM_STORM_SASH: item_id = item_id(645);
}
impl item_id {
    pub const ITEM_QUILA_HAIR: item_id = item_id(646);
}
impl item_id {
    pub const ITEM_QUILA_CARD: item_id = item_id(647);
}
impl item_id {
    pub const ITEM_QUILA_CREST: item_id = item_id(648);
}
impl item_id {
    pub const ITEM_VOLCANO_TORC: item_id = item_id(649);
}
impl item_id {
    pub const ITEM_TYPHLO_GASP: item_id = item_id(650);
}
impl item_id {
    pub const ITEM_TYPHLO_FANG: item_id = item_id(651);
}
impl item_id {
    pub const ITEM_TYPHLO_SEAL: item_id = item_id(652);
}
impl item_id {
    pub const ITEM_BLAST_BANGLE: item_id = item_id(653);
}
impl item_id {
    pub const ITEM_TOTODI_DEW: item_id = item_id(654);
}
impl item_id {
    pub const ITEM_TOTODI_FANG: item_id = item_id(655);
}
impl item_id {
    pub const ITEM_WATER_HEART: item_id = item_id(656);
}
impl item_id {
    pub const ITEM_WASH_BOW: item_id = item_id(657);
}
impl item_id {
    pub const ITEM_CROCO_FANG: item_id = item_id(658);
}
impl item_id {
    pub const ITEM_CROCO_CARD: item_id = item_id(659);
}
impl item_id {
    pub const ITEM_SWIRL_ROCK: item_id = item_id(660);
}
impl item_id {
    pub const ITEM_ANGER_SCARF: item_id = item_id(661);
}
impl item_id {
    pub const ITEM_FERAL_CLAW: item_id = item_id(662);
}
impl item_id {
    pub const ITEM_FERAL_FANG: item_id = item_id(663);
}
impl item_id {
    pub const ITEM_FERAL_CREST: item_id = item_id(664);
}
impl item_id {
    pub const ITEM_HYDRO_JAW: item_id = item_id(665);
}
impl item_id {
    pub const ITEM_TREECK_THORN: item_id = item_id(666);
}
impl item_id {
    pub const ITEM_TREECK_CARD: item_id = item_id(667);
}
impl item_id {
    pub const ITEM_FOREST_ORE: item_id = item_id(668);
}
impl item_id {
    pub const ITEM_GUARD_RING: item_id = item_id(669);
}
impl item_id {
    pub const ITEM_GROVY_SHOOT: item_id = item_id(670);
}
impl item_id {
    pub const ITEM_GROVY_CARD: item_id = item_id(671);
}
impl item_id {
    pub const ITEM_JUNGLE_TAG: item_id = item_id(672);
}
impl item_id {
    pub const ITEM_GRASS_BLADE: item_id = item_id(673);
}
impl item_id {
    pub const ITEM_SCEPT_CLAW: item_id = item_id(674);
}
impl item_id {
    pub const ITEM_SCEPT_CARD: item_id = item_id(675);
}
impl item_id {
    pub const ITEM_SCEPT_SEAL: item_id = item_id(676);
}
impl item_id {
    pub const ITEM_DRAIN_BANGLE: item_id = item_id(677);
}
impl item_id {
    pub const ITEM_TORCHIC_HAIR: item_id = item_id(678);
}
impl item_id {
    pub const ITEM_TORCHIC_CARD: item_id = item_id(679);
}
impl item_id {
    pub const ITEM_HOT_PEBBLE: item_id = item_id(680);
}
impl item_id {
    pub const ITEM_FIRE_CAPE: item_id = item_id(681);
}
impl item_id {
    pub const ITEM_COMBUS_SWEAT: item_id = item_id(682);
}
impl item_id {
    pub const ITEM_COMBUS_CLAW: item_id = item_id(683);
}
impl item_id {
    pub const ITEM_CHARGE_TAG: item_id = item_id(684);
}
impl item_id {
    pub const ITEM_GUTSY_BAND: item_id = item_id(685);
}
impl item_id {
    pub const ITEM_BLAZI_CLAW: item_id = item_id(686);
}
impl item_id {
    pub const ITEM_BLAZI_CARD: item_id = item_id(687);
}
impl item_id {
    pub const ITEM_BLAZI_SEAL: item_id = item_id(688);
}
impl item_id {
    pub const ITEM_BLAZE_TORC: item_id = item_id(689);
}
impl item_id {
    pub const ITEM_MUDKIP_MUD: item_id = item_id(690);
}
impl item_id {
    pub const ITEM_MUDKIP_CARD: item_id = item_id(691);
}
impl item_id {
    pub const ITEM_MUD_JEWEL: item_id = item_id(692);
}
impl item_id {
    pub const ITEM_SPEED_SCARF: item_id = item_id(693);
}
impl item_id {
    pub const ITEM_MARSH_MUD: item_id = item_id(694);
}
impl item_id {
    pub const ITEM_MARSH_CARD: item_id = item_id(695);
}
impl item_id {
    pub const ITEM_MARSH_CREST: item_id = item_id(696);
}
impl item_id {
    pub const ITEM_MARSH_TORC: item_id = item_id(697);
}
impl item_id {
    pub const ITEM_SWAMP_MUD: item_id = item_id(698);
}
impl item_id {
    pub const ITEM_SWAMP_CARD: item_id = item_id(699);
}
impl item_id {
    pub const ITEM_SWAMP_SEAL: item_id = item_id(700);
}
impl item_id {
    pub const ITEM_SWAMP_BANGLE: item_id = item_id(701);
}
impl item_id {
    pub const ITEM_SKITTY_FANG: item_id = item_id(702);
}
impl item_id {
    pub const ITEM_SKITTY_CARD: item_id = item_id(703);
}
impl item_id {
    pub const ITEM_SMILE_PEBBLE: item_id = item_id(704);
}
impl item_id {
    pub const ITEM_HEAL_PENDANT: item_id = item_id(705);
}
impl item_id {
    pub const ITEM_DELCAT_HAIR: item_id = item_id(706);
}
impl item_id {
    pub const ITEM_DELCAT_FANG: item_id = item_id(707);
}
impl item_id {
    pub const ITEM_PRIM_PEBBLE: item_id = item_id(708);
}
impl item_id {
    pub const ITEM_GUARD_COLLAR: item_id = item_id(709);
}
impl item_id {
    pub const ITEM_LUCKY_LEAF: item_id = item_id(710);
}
impl item_id {
    pub const ITEM_TURTWIG_CARD: item_id = item_id(711);
}
impl item_id {
    pub const ITEM_SPROUT_ROCK: item_id = item_id(712);
}
impl item_id {
    pub const ITEM_LEAFY_HAT: item_id = item_id(713);
}
impl item_id {
    pub const ITEM_GROTLE_TWIG: item_id = item_id(714);
}
impl item_id {
    pub const ITEM_GROTLE_CLAW: item_id = item_id(715);
}
impl item_id {
    pub const ITEM_GROTLE_CREST: item_id = item_id(716);
}
impl item_id {
    pub const ITEM_WOODY_SCARF: item_id = item_id(717);
}
impl item_id {
    pub const ITEM_TORT_CLAW: item_id = item_id(718);
}
impl item_id {
    pub const ITEM_TORT_HORN: item_id = item_id(719);
}
impl item_id {
    pub const ITEM_TORT_SEAL: item_id = item_id(720);
}
impl item_id {
    pub const ITEM_FOREST_TORC: item_id = item_id(721);
}
impl item_id {
    pub const ITEM_CHIM_HAIR: item_id = item_id(722);
}
impl item_id {
    pub const ITEM_CHIM_FANG: item_id = item_id(723);
}
impl item_id {
    pub const ITEM_NIMBLE_CHARM: item_id = item_id(724);
}
impl item_id {
    pub const ITEM_EMBER_CAP: item_id = item_id(725);
}
impl item_id {
    pub const ITEM_MONFER_HAIR: item_id = item_id(726);
}
impl item_id {
    pub const ITEM_MONFER_FANG: item_id = item_id(727);
}
impl item_id {
    pub const ITEM_MONFER_CREST: item_id = item_id(728);
}
impl item_id {
    pub const ITEM_BURST_SASH: item_id = item_id(729);
}
impl item_id {
    pub const ITEM_INFERN_HAIR: item_id = item_id(730);
}
impl item_id {
    pub const ITEM_INFERN_FANG: item_id = item_id(731);
}
impl item_id {
    pub const ITEM_INFERN_SEAL: item_id = item_id(732);
}
impl item_id {
    pub const ITEM_BLAZING_RUFF: item_id = item_id(733);
}
impl item_id {
    pub const ITEM_PIPLUP_FOAM: item_id = item_id(734);
}
impl item_id {
    pub const ITEM_PIPLUP_CARD: item_id = item_id(735);
}
impl item_id {
    pub const ITEM_SEA_ORE: item_id = item_id(736);
}
impl item_id {
    pub const ITEM_WATER_CAPE: item_id = item_id(737);
}
impl item_id {
    pub const ITEM_PRIN_FOAM: item_id = item_id(738);
}
impl item_id {
    pub const ITEM_PRIN_CARD: item_id = item_id(739);
}
impl item_id {
    pub const ITEM_PRIN_CREST: item_id = item_id(740);
}
impl item_id {
    pub const ITEM_AQUA_BLADE: item_id = item_id(741);
}
impl item_id {
    pub const ITEM_EMPOL_CLAW: item_id = item_id(742);
}
impl item_id {
    pub const ITEM_EMPOL_HORN: item_id = item_id(743);
}
impl item_id {
    pub const ITEM_EMPOL_SEAL: item_id = item_id(744);
}
impl item_id {
    pub const ITEM_MARINE_CROWN: item_id = item_id(745);
}
impl item_id {
    pub const ITEM_MUNCH_DROOL: item_id = item_id(746);
}
impl item_id {
    pub const ITEM_MUNCH_CLAW: item_id = item_id(747);
}
impl item_id {
    pub const ITEM_TUMMY_CHARM: item_id = item_id(748);
}
impl item_id {
    pub const ITEM_GLUTTON_CAPE: item_id = item_id(749);
}
impl item_id {
    pub const ITEM_SNORLAX_GASP: item_id = item_id(750);
}
impl item_id {
    pub const ITEM_SNORLAX_FANG: item_id = item_id(751);
}
impl item_id {
    pub const ITEM_VALOR_CHARM: item_id = item_id(752);
}
impl item_id {
    pub const ITEM_GLEE_SCARF: item_id = item_id(753);
}
impl item_id {
    pub const ITEM_SCYTHER_FANG: item_id = item_id(754);
}
impl item_id {
    pub const ITEM_SCYTHER_CARD: item_id = item_id(755);
}
impl item_id {
    pub const ITEM_AMBUSH_ROCK: item_id = item_id(756);
}
impl item_id {
    pub const ITEM_STRIKE_RUFF: item_id = item_id(757);
}
impl item_id {
    pub const ITEM_SCIZOR_WING: item_id = item_id(758);
}
impl item_id {
    pub const ITEM_SCIZOR_CARD: item_id = item_id(759);
}
impl item_id {
    pub const ITEM_STEEL_CHARM: item_id = item_id(760);
}
impl item_id {
    pub const ITEM_RED_ARMLET: item_id = item_id(761);
}
impl item_id {
    pub const ITEM_LAPRAS_SONG: item_id = item_id(762);
}
impl item_id {
    pub const ITEM_LAPRAS_CARD: item_id = item_id(763);
}
impl item_id {
    pub const ITEM_WAVY_CHARM: item_id = item_id(764);
}
impl item_id {
    pub const ITEM_MYSTIC_SCARF: item_id = item_id(765);
}
impl item_id {
    pub const ITEM_EEVEE_TAIL: item_id = item_id(766);
}
impl item_id {
    pub const ITEM_EEVEE_CARD: item_id = item_id(767);
}
impl item_id {
    pub const ITEM_EVOLVE_CHARM: item_id = item_id(768);
}
impl item_id {
    pub const ITEM_EEVEE: item_id = item_id(769);
}
impl item_id {
    pub const ITEM_CLEFFA_DEW: item_id = item_id(770);
}
impl item_id {
    pub const ITEM_CLEFFA_CARD: item_id = item_id(771);
}
impl item_id {
    pub const ITEM_STARRY_ORE: item_id = item_id(772);
}
impl item_id {
    pub const ITEM_COMET_RING: item_id = item_id(773);
}
impl item_id {
    pub const ITEM_CLEF_CLAW: item_id = item_id(774);
}
impl item_id {
    pub const ITEM_CLEF_FANG: item_id = item_id(775);
}
impl item_id {
    pub const ITEM_MOON_JEWEL: item_id = item_id(776);
}
impl item_id {
    pub const ITEM_MOON_SCARF: item_id = item_id(777);
}
impl item_id {
    pub const ITEM_CLEFA_CLAW: item_id = item_id(778);
}
impl item_id {
    pub const ITEM_CLEFA_CARD: item_id = item_id(779);
}
impl item_id {
    pub const ITEM_MOON_ROCK: item_id = item_id(780);
}
impl item_id {
    pub const ITEM_FAIRY_BOW: item_id = item_id(781);
}
impl item_id {
    pub const ITEM_IGGLY_DEW: item_id = item_id(782);
}
impl item_id {
    pub const ITEM_IGGLY_CARD: item_id = item_id(783);
}
impl item_id {
    pub const ITEM_BOUNCY_CHARM: item_id = item_id(784);
}
impl item_id {
    pub const ITEM_PRETTY_BOW: item_id = item_id(785);
}
impl item_id {
    pub const ITEM_JIGGLY_SONG: item_id = item_id(786);
}
impl item_id {
    pub const ITEM_JIGGLY_CARD: item_id = item_id(787);
}
impl item_id {
    pub const ITEM_SLUMBER_ROCK: item_id = item_id(788);
}
impl item_id {
    pub const ITEM_SNOOZE_RING: item_id = item_id(789);
}
impl item_id {
    pub const ITEM_WIGGLY_HAIR: item_id = item_id(790);
}
impl item_id {
    pub const ITEM_WIGGLY_CARD: item_id = item_id(791);
}
impl item_id {
    pub const ITEM_BUDDY_ROCK: item_id = item_id(792);
}
impl item_id {
    pub const ITEM_FRIEND_TORC: item_id = item_id(793);
}
impl item_id {
    pub const ITEM_TOGEPI_DEW: item_id = item_id(794);
}
impl item_id {
    pub const ITEM_TOGEPI_CARD: item_id = item_id(795);
}
impl item_id {
    pub const ITEM_PURE_HEART: item_id = item_id(796);
}
impl item_id {
    pub const ITEM_ANGEL_SCARF: item_id = item_id(797);
}
impl item_id {
    pub const ITEM_TOGETIC_WING: item_id = item_id(798);
}
impl item_id {
    pub const ITEM_TOGETIC_CARD: item_id = item_id(799);
}
impl item_id {
    pub const ITEM_HAPPY_ROCK: item_id = item_id(800);
}
impl item_id {
    pub const ITEM_LUCK_BROOCH: item_id = item_id(801);
}
impl item_id {
    pub const ITEM_TOGEK_WING: item_id = item_id(802);
}
impl item_id {
    pub const ITEM_TOGEK_CARD: item_id = item_id(803);
}
impl item_id {
    pub const ITEM_OVATION_ROCK: item_id = item_id(804);
}
impl item_id {
    pub const ITEM_GLITTER_ROBE: item_id = item_id(805);
}
impl item_id {
    pub const ITEM_SNEASEL_CLAW: item_id = item_id(806);
}
impl item_id {
    pub const ITEM_SNEASEL_CARD: item_id = item_id(807);
}
impl item_id {
    pub const ITEM_DUSK_JEWEL: item_id = item_id(808);
}
impl item_id {
    pub const ITEM_CRUEL_RING: item_id = item_id(809);
}
impl item_id {
    pub const ITEM_WEAVILE_CLAW: item_id = item_id(810);
}
impl item_id {
    pub const ITEM_WEAVILE_FANG: item_id = item_id(811);
}
impl item_id {
    pub const ITEM_VILE_TAG: item_id = item_id(812);
}
impl item_id {
    pub const ITEM_RUIN_ARMLET: item_id = item_id(813);
}
impl item_id {
    pub const ITEM_TEDDI_CLAW: item_id = item_id(814);
}
impl item_id {
    pub const ITEM_TEDDI_CARD: item_id = item_id(815);
}
impl item_id {
    pub const ITEM_HONEY_ROCK: item_id = item_id(816);
}
impl item_id {
    pub const ITEM_HEAL_SCARF: item_id = item_id(817);
}
impl item_id {
    pub const ITEM_URSA_CLAW: item_id = item_id(818);
}
impl item_id {
    pub const ITEM_URSA_FANG: item_id = item_id(819);
}
impl item_id {
    pub const ITEM_CALMING_ROCK: item_id = item_id(820);
}
impl item_id {
    pub const ITEM_HIBER_SCARF: item_id = item_id(821);
}
impl item_id {
    pub const ITEM_TYRO_SWEAT: item_id = item_id(822);
}
impl item_id {
    pub const ITEM_TYRO_CARD: item_id = item_id(823);
}
impl item_id {
    pub const ITEM_MUSCLE_CHARM: item_id = item_id(824);
}
impl item_id {
    pub const ITEM_TYROGUE: item_id = item_id(825);
}
impl item_id {
    pub const ITEM_SMOOCH_SONG: item_id = item_id(826);
}
impl item_id {
    pub const ITEM_SMOOCH_CARD: item_id = item_id(827);
}
impl item_id {
    pub const ITEM_KISS_CHARM: item_id = item_id(828);
}
impl item_id {
    pub const ITEM_HEART_TIARA: item_id = item_id(829);
}
impl item_id {
    pub const ITEM_JYNX_SONG: item_id = item_id(830);
}
impl item_id {
    pub const ITEM_JYNX_CARD: item_id = item_id(831);
}
impl item_id {
    pub const ITEM_FROZEN_ORE: item_id = item_id(832);
}
impl item_id {
    pub const ITEM_RUIN_SCARF: item_id = item_id(833);
}
impl item_id {
    pub const ITEM_ELEKID_CLAW: item_id = item_id(834);
}
impl item_id {
    pub const ITEM_ELEKID_CARD: item_id = item_id(835);
}
impl item_id {
    pub const ITEM_JOLT_CHARM: item_id = item_id(836);
}
impl item_id {
    pub const ITEM_CURRENT_RING: item_id = item_id(837);
}
impl item_id {
    pub const ITEM_ELECTA_CLAW: item_id = item_id(838);
}
impl item_id {
    pub const ITEM_ELECTA_FANG: item_id = item_id(839);
}
impl item_id {
    pub const ITEM_CHARGE_SEAL: item_id = item_id(840);
}
impl item_id {
    pub const ITEM_VOLT_BANGLE: item_id = item_id(841);
}
impl item_id {
    pub const ITEM_ELECTI_CLAW: item_id = item_id(842);
}
impl item_id {
    pub const ITEM_ELECTI_CARD: item_id = item_id(843);
}
impl item_id {
    pub const ITEM_VOLTAIC_ROCK: item_id = item_id(844);
}
impl item_id {
    pub const ITEM_VOLTAIC_BAND: item_id = item_id(845);
}
impl item_id {
    pub const ITEM_MAGBY_CLAW: item_id = item_id(846);
}
impl item_id {
    pub const ITEM_MAGBY_CARD: item_id = item_id(847);
}
impl item_id {
    pub const ITEM_EMBER_JEWEL: item_id = item_id(848);
}
impl item_id {
    pub const ITEM_COAL_RING: item_id = item_id(849);
}
impl item_id {
    pub const ITEM_MAGMAR_CLAW: item_id = item_id(850);
}
impl item_id {
    pub const ITEM_MAGMAR_CARD: item_id = item_id(851);
}
impl item_id {
    pub const ITEM_ERUPT_ORE: item_id = item_id(852);
}
impl item_id {
    pub const ITEM_MAGMA_SCARF: item_id = item_id(853);
}
impl item_id {
    pub const ITEM_MAGMOR_CLAW: item_id = item_id(854);
}
impl item_id {
    pub const ITEM_MAGMOR_CARD: item_id = item_id(855);
}
impl item_id {
    pub const ITEM_VULCAN_ROCK: item_id = item_id(856);
}
impl item_id {
    pub const ITEM_BURNING_TORC: item_id = item_id(857);
}
impl item_id {
    pub const ITEM_AZURI_DEW: item_id = item_id(858);
}
impl item_id {
    pub const ITEM_AZURI_CARD: item_id = item_id(859);
}
impl item_id {
    pub const ITEM_FOUNT_CHARM: item_id = item_id(860);
}
impl item_id {
    pub const ITEM_WATER_FLOAT: item_id = item_id(861);
}
impl item_id {
    pub const ITEM_MARILL_DEW: item_id = item_id(862);
}
impl item_id {
    pub const ITEM_MARILL_CARD: item_id = item_id(863);
}
impl item_id {
    pub const ITEM_SURFER_ROCK: item_id = item_id(864);
}
impl item_id {
    pub const ITEM_BRINE_SCARF: item_id = item_id(865);
}
impl item_id {
    pub const ITEM_AZUMA_DEW: item_id = item_id(866);
}
impl item_id {
    pub const ITEM_AZUMA_CARD: item_id = item_id(867);
}
impl item_id {
    pub const ITEM_STREAM_CHARM: item_id = item_id(868);
}
impl item_id {
    pub const ITEM_DOTTED_SCARF: item_id = item_id(869);
}
impl item_id {
    pub const ITEM_PLUSLE_TAIL: item_id = item_id(870);
}
impl item_id {
    pub const ITEM_PLUSLE_CARD: item_id = item_id(871);
}
impl item_id {
    pub const ITEM_CHEER_ROCK: item_id = item_id(872);
}
impl item_id {
    pub const ITEM_PULSE_BOW: item_id = item_id(873);
}
impl item_id {
    pub const ITEM_MINUN_TAIL: item_id = item_id(874);
}
impl item_id {
    pub const ITEM_MINUN_CARD: item_id = item_id(875);
}
impl item_id {
    pub const ITEM_VOLT_HEART: item_id = item_id(876);
}
impl item_id {
    pub const ITEM_SPARK_TIE: item_id = item_id(877);
}
impl item_id {
    pub const ITEM_CAST_DEW: item_id = item_id(878);
}
impl item_id {
    pub const ITEM_CAST_CARD: item_id = item_id(879);
}
impl item_id {
    pub const ITEM_CLOUD_ROCK: item_id = item_id(880);
}
impl item_id {
    pub const ITEM_WEATHER_CAPE: item_id = item_id(881);
}
impl item_id {
    pub const ITEM_WYNAUT_TAIL: item_id = item_id(882);
}
impl item_id {
    pub const ITEM_WYNAUT_CARD: item_id = item_id(883);
}
impl item_id {
    pub const ITEM_GRIN_CHARM: item_id = item_id(884);
}
impl item_id {
    pub const ITEM_CHEERY_SCARF: item_id = item_id(885);
}
impl item_id {
    pub const ITEM_WOBBU_SWEAT: item_id = item_id(886);
}
impl item_id {
    pub const ITEM_WOBBU_CARD: item_id = item_id(887);
}
impl item_id {
    pub const ITEM_ENDURE_ROCK: item_id = item_id(888);
}
impl item_id {
    pub const ITEM_SUFFER_SCARF: item_id = item_id(889);
}
impl item_id {
    pub const ITEM_BIDOOF_TOOTH: item_id = item_id(890);
}
impl item_id {
    pub const ITEM_BIDOOF_CARD: item_id = item_id(891);
}
impl item_id {
    pub const ITEM_FALL_CHARM: item_id = item_id(892);
}
impl item_id {
    pub const ITEM_STOLID_SCARF: item_id = item_id(893);
}
impl item_id {
    pub const ITEM_BIBA_TOOTH: item_id = item_id(894);
}
impl item_id {
    pub const ITEM_BIBA_CARD: item_id = item_id(895);
}
impl item_id {
    pub const ITEM_RIVER_CHARM: item_id = item_id(896);
}
impl item_id {
    pub const ITEM_DAM_SCARF: item_id = item_id(897);
}
impl item_id {
    pub const ITEM_SHINX_CLAW: item_id = item_id(898);
}
impl item_id {
    pub const ITEM_SHINX_FANG: item_id = item_id(899);
}
impl item_id {
    pub const ITEM_FLASH_TAG: item_id = item_id(900);
}
impl item_id {
    pub const ITEM_ENERGY_SCARF: item_id = item_id(901);
}
impl item_id {
    pub const ITEM_LUXIO_CLAW: item_id = item_id(902);
}
impl item_id {
    pub const ITEM_LUXIO_FANG: item_id = item_id(903);
}
impl item_id {
    pub const ITEM_SPARK_TAG: item_id = item_id(904);
}
impl item_id {
    pub const ITEM_SPARK_SCARF: item_id = item_id(905);
}
impl item_id {
    pub const ITEM_LUXRAY_CLAW: item_id = item_id(906);
}
impl item_id {
    pub const ITEM_LUXRAY_FANG: item_id = item_id(907);
}
impl item_id {
    pub const ITEM_GLARE_TAG: item_id = item_id(908);
}
impl item_id {
    pub const ITEM_GLARE_SASH: item_id = item_id(909);
}
impl item_id {
    pub const ITEM_PACHI_TOOTH: item_id = item_id(910);
}
impl item_id {
    pub const ITEM_PACHI_CARD: item_id = item_id(911);
}
impl item_id {
    pub const ITEM_ROUSE_CHARM: item_id = item_id(912);
}
impl item_id {
    pub const ITEM_MIRACLE_BOW: item_id = item_id(913);
}
impl item_id {
    pub const ITEM_BUIZEL_FANG: item_id = item_id(914);
}
impl item_id {
    pub const ITEM_BUIZEL_CARD: item_id = item_id(915);
}
impl item_id {
    pub const ITEM_SWIMMER_ROCK: item_id = item_id(916);
}
impl item_id {
    pub const ITEM_SCREW_TORC: item_id = item_id(917);
}
impl item_id {
    pub const ITEM_FLOAT_FANG: item_id = item_id(918);
}
impl item_id {
    pub const ITEM_FLOAT_CARD: item_id = item_id(919);
}
impl item_id {
    pub const ITEM_RESCUE_ROCK: item_id = item_id(920);
}
impl item_id {
    pub const ITEM_FLOAT_AID: item_id = item_id(921);
}
impl item_id {
    pub const ITEM_DRIFLOO_GASP: item_id = item_id(922);
}
impl item_id {
    pub const ITEM_DRIFLOO_CARD: item_id = item_id(923);
}
impl item_id {
    pub const ITEM_WIND_HEART: item_id = item_id(924);
}
impl item_id {
    pub const ITEM_DRAFT_RING: item_id = item_id(925);
}
impl item_id {
    pub const ITEM_DRIFBLI_GASP: item_id = item_id(926);
}
impl item_id {
    pub const ITEM_DRIFBLI_CARD: item_id = item_id(927);
}
impl item_id {
    pub const ITEM_EASY_CHARM: item_id = item_id(928);
}
impl item_id {
    pub const ITEM_BREEZE_SCARF: item_id = item_id(929);
}
impl item_id {
    pub const ITEM_CHERUBI_SEED: item_id = item_id(930);
}
impl item_id {
    pub const ITEM_CHERUBI_CARD: item_id = item_id(931);
}
impl item_id {
    pub const ITEM_CUTE_ORE: item_id = item_id(932);
}
impl item_id {
    pub const ITEM_CHARM_BOW: item_id = item_id(933);
}
impl item_id {
    pub const ITEM_CHERRIM_DEW: item_id = item_id(934);
}
impl item_id {
    pub const ITEM_CHERRIM_CARD: item_id = item_id(935);
}
impl item_id {
    pub const ITEM_SWEET_AROMA: item_id = item_id(936);
}
impl item_id {
    pub const ITEM_PETAL_DRESS: item_id = item_id(937);
}
impl item_id {
    pub const ITEM_BONSLY_DEW: item_id = item_id(938);
}
impl item_id {
    pub const ITEM_BONSLY_CARD: item_id = item_id(939);
}
impl item_id {
    pub const ITEM_ARID_TAG: item_id = item_id(940);
}
impl item_id {
    pub const ITEM_TEARY_CAPE: item_id = item_id(941);
}
impl item_id {
    pub const ITEM_SUDO_SWEAT: item_id = item_id(942);
}
impl item_id {
    pub const ITEM_SUDO_CARD: item_id = item_id(943);
}
impl item_id {
    pub const ITEM_DRAIN_ROCK: item_id = item_id(944);
}
impl item_id {
    pub const ITEM_FAKE_TORC: item_id = item_id(945);
}
impl item_id {
    pub const ITEM_JUNIOR_BEAM: item_id = item_id(946);
}
impl item_id {
    pub const ITEM_JUNIOR_CARD: item_id = item_id(947);
}
impl item_id {
    pub const ITEM_MIMIC_PEBBLE: item_id = item_id(948);
}
impl item_id {
    pub const ITEM_COPY_MASK: item_id = item_id(949);
}
impl item_id {
    pub const ITEM_MIME_KEY: item_id = item_id(950);
}
impl item_id {
    pub const ITEM_MIME_CARD: item_id = item_id(951);
}
impl item_id {
    pub const ITEM_BULWARK_ROCK: item_id = item_id(952);
}
impl item_id {
    pub const ITEM_BARRIER_BOW: item_id = item_id(953);
}
impl item_id {
    pub const ITEM_HAPPINY_DEW: item_id = item_id(954);
}
impl item_id {
    pub const ITEM_HAPPINY_CARD: item_id = item_id(955);
}
impl item_id {
    pub const ITEM_PLAY_TAG: item_id = item_id(956);
}
impl item_id {
    pub const ITEM_NURTURE_CAPE: item_id = item_id(957);
}
impl item_id {
    pub const ITEM_CHANSEY_SONG: item_id = item_id(958);
}
impl item_id {
    pub const ITEM_CHANSEY_CARD: item_id = item_id(959);
}
impl item_id {
    pub const ITEM_LUCKY_CHARM: item_id = item_id(960);
}
impl item_id {
    pub const ITEM_LUCKY_SCARF: item_id = item_id(961);
}
impl item_id {
    pub const ITEM_BLISSEY_SONG: item_id = item_id(962);
}
impl item_id {
    pub const ITEM_BLISSEY_CARD: item_id = item_id(963);
}
impl item_id {
    pub const ITEM_AMITY_ROCK: item_id = item_id(964);
}
impl item_id {
    pub const ITEM_FAITH_RING: item_id = item_id(965);
}
impl item_id {
    pub const ITEM_GIBLE_FANG: item_id = item_id(966);
}
impl item_id {
    pub const ITEM_GIBLE_CARD: item_id = item_id(967);
}
impl item_id {
    pub const ITEM_DRAGON_JEWEL: item_id = item_id(968);
}
impl item_id {
    pub const ITEM_DRAGON_TIE: item_id = item_id(969);
}
impl item_id {
    pub const ITEM_GABITE_CLAW: item_id = item_id(970);
}
impl item_id {
    pub const ITEM_GABITE_FANG: item_id = item_id(971);
}
impl item_id {
    pub const ITEM_STAR_ROCK: item_id = item_id(972);
}
impl item_id {
    pub const ITEM_METEOR_TORC: item_id = item_id(973);
}
impl item_id {
    pub const ITEM_GAR_CLAW: item_id = item_id(974);
}
impl item_id {
    pub const ITEM_GAR_FANG: item_id = item_id(975);
}
impl item_id {
    pub const ITEM_SPEED_TAG: item_id = item_id(976);
}
impl item_id {
    pub const ITEM_MACH_SCARF: item_id = item_id(977);
}
impl item_id {
    pub const ITEM_RIOLU_TAIL: item_id = item_id(978);
}
impl item_id {
    pub const ITEM_RIOLU_CARD: item_id = item_id(979);
}
impl item_id {
    pub const ITEM_VALIANT_ROCK: item_id = item_id(980);
}
impl item_id {
    pub const ITEM_EMIT_RING: item_id = item_id(981);
}
impl item_id {
    pub const ITEM_LUCARIO_FANG: item_id = item_id(982);
}
impl item_id {
    pub const ITEM_LUCARIO_CARD: item_id = item_id(983);
}
impl item_id {
    pub const ITEM_PLEDGE_ROCK: item_id = item_id(984);
}
impl item_id {
    pub const ITEM_RAVAGE_RING: item_id = item_id(985);
}
impl item_id {
    pub const ITEM_MANTYKE_BEAM: item_id = item_id(986);
}
impl item_id {
    pub const ITEM_MANTYKE_CARD: item_id = item_id(987);
}
impl item_id {
    pub const ITEM_WAFT_ROCK: item_id = item_id(988);
}
impl item_id {
    pub const ITEM_OCEAN_BOW: item_id = item_id(989);
}
impl item_id {
    pub const ITEM_MANTINE_FOAM: item_id = item_id(990);
}
impl item_id {
    pub const ITEM_MANTINE_CARD: item_id = item_id(991);
}
impl item_id {
    pub const ITEM_SUNSET_ROCK: item_id = item_id(992);
}
impl item_id {
    pub const ITEM_HORIZON_BOW: item_id = item_id(993);
}
impl item_id {
    pub const ITEM_PHIONE_SONG: item_id = item_id(994);
}
impl item_id {
    pub const ITEM_PHIONE_CARD: item_id = item_id(995);
}
impl item_id {
    pub const ITEM_WAVE_JEWEL: item_id = item_id(996);
}
impl item_id {
    pub const ITEM_RIPPLE_CAPE: item_id = item_id(997);
}
impl item_id {
    pub const ITEM_VULPIX_TAIL: item_id = item_id(998);
}
impl item_id {
    pub const ITEM_VULPIX_CARD: item_id = item_id(999);
}
impl item_id {
    pub const ITEM_VULPIX_TAG: item_id = item_id(1000);
}
impl item_id {
    pub const ITEM_GLOWING_BOW: item_id = item_id(1001);
}
impl item_id {
    pub const ITEM_NINE_HAIR: item_id = item_id(1002);
}
impl item_id {
    pub const ITEM_NINE_CARD: item_id = item_id(1003);
}
impl item_id {
    pub const ITEM_NINE_SEAL: item_id = item_id(1004);
}
impl item_id {
    pub const ITEM_AFIRE_COLLAR: item_id = item_id(1005);
}
impl item_id {
    pub const ITEM_PHANPY_CLAW: item_id = item_id(1006);
}
impl item_id {
    pub const ITEM_PHANPY_CARD: item_id = item_id(1007);
}
impl item_id {
    pub const ITEM_PHANPY_TAG: item_id = item_id(1008);
}
impl item_id {
    pub const ITEM_VALUE_RUFF: item_id = item_id(1009);
}
impl item_id {
    pub const ITEM_DONPHAN_FANG: item_id = item_id(1010);
}
impl item_id {
    pub const ITEM_DONPHAN_CARD: item_id = item_id(1011);
}
impl item_id {
    pub const ITEM_DON_CREST: item_id = item_id(1012);
}
impl item_id {
    pub const ITEM_ARMOR_SCARF: item_id = item_id(1013);
}
impl item_id {
    pub const ITEM_CATER_BELT: item_id = item_id(1014);
}
impl item_id {
    pub const ITEM_DEFENSE_BOW: item_id = item_id(1015);
}
impl item_id {
    pub const ITEM_GLITTERY_BOW: item_id = item_id(1016);
}
impl item_id {
    pub const ITEM_WEEDLE_BOW: item_id = item_id(1017);
}
impl item_id {
    pub const ITEM_KAKUNA_SCARF: item_id = item_id(1018);
}
impl item_id {
    pub const ITEM_CHARGE_SCARF: item_id = item_id(1019);
}
impl item_id {
    pub const ITEM_PIDGEY_BOW: item_id = item_id(1020);
}
impl item_id {
    pub const ITEM_PIDGEO_SCARF: item_id = item_id(1021);
}
impl item_id {
    pub const ITEM_PIDGEOT_TORC: item_id = item_id(1022);
}
impl item_id {
    pub const ITEM_RATTA_SCARF: item_id = item_id(1023);
}
impl item_id {
    pub const ITEM_OVERCOME_BOW: item_id = item_id(1024);
}
impl item_id {
    pub const ITEM_QUIRKY_BOW: item_id = item_id(1025);
}
impl item_id {
    pub const ITEM_WING_SCARF: item_id = item_id(1026);
}
impl item_id {
    pub const ITEM_LEASH_BOW: item_id = item_id(1027);
}
impl item_id {
    pub const ITEM_SHOCK_RUFF: item_id = item_id(1028);
}
impl item_id {
    pub const ITEM_SAND_SCARF: item_id = item_id(1029);
}
impl item_id {
    pub const ITEM_SANDY_TORC: item_id = item_id(1030);
}
impl item_id {
    pub const ITEM_POINTY_SCARF: item_id = item_id(1031);
}
impl item_id {
    pub const ITEM_RETURN_SCARF: item_id = item_id(1032);
}
impl item_id {
    pub const ITEM_IMPACT_TORC: item_id = item_id(1033);
}
impl item_id {
    pub const ITEM_HALVE_SCARF: item_id = item_id(1034);
}
impl item_id {
    pub const ITEM_THORNY_SCARF: item_id = item_id(1035);
}
impl item_id {
    pub const ITEM_KING_SASH: item_id = item_id(1036);
}
impl item_id {
    pub const ITEM_DODGE_BOW: item_id = item_id(1037);
}
impl item_id {
    pub const ITEM_ABSORB_SCARF: item_id = item_id(1038);
}
impl item_id {
    pub const ITEM_ODD_BOW: item_id = item_id(1039);
}
impl item_id {
    pub const ITEM_GUARD_HAT: item_id = item_id(1040);
}
impl item_id {
    pub const ITEM_AROMA_SCARF: item_id = item_id(1041);
}
impl item_id {
    pub const ITEM_MOVING_SCARF: item_id = item_id(1042);
}
impl item_id {
    pub const ITEM_FIRM_HAT: item_id = item_id(1043);
}
impl item_id {
    pub const ITEM_GAZE_GOGGLES: item_id = item_id(1044);
}
impl item_id {
    pub const ITEM_VENOMOTH_BOW: item_id = item_id(1045);
}
impl item_id {
    pub const ITEM_DIGLETT_HAT: item_id = item_id(1046);
}
impl item_id {
    pub const ITEM_DUGTRIO_BOW: item_id = item_id(1047);
}
impl item_id {
    pub const ITEM_PSYDUCK_HAT: item_id = item_id(1048);
}
impl item_id {
    pub const ITEM_PADDLE_SCARF: item_id = item_id(1049);
}
impl item_id {
    pub const ITEM_MANKEY_TORC: item_id = item_id(1050);
}
impl item_id {
    pub const ITEM_NULLIFY_BELT: item_id = item_id(1051);
}
impl item_id {
    pub const ITEM_GROWL_SCARF: item_id = item_id(1052);
}
impl item_id {
    pub const ITEM_LEGEND_BOW: item_id = item_id(1053);
}
impl item_id {
    pub const ITEM_DAMP_BOW: item_id = item_id(1054);
}
impl item_id {
    pub const ITEM_POLI_BOW: item_id = item_id(1055);
}
impl item_id {
    pub const ITEM_BOLD_BELT: item_id = item_id(1056);
}
impl item_id {
    pub const ITEM_PREDICT_TORC: item_id = item_id(1057);
}
impl item_id {
    pub const ITEM_PSYCHIC_TORC: item_id = item_id(1058);
}
impl item_id {
    pub const ITEM_SPARKLE_RUFF: item_id = item_id(1059);
}
impl item_id {
    pub const ITEM_IMPISH_BAND: item_id = item_id(1060);
}
impl item_id {
    pub const ITEM_STRONG_BELT: item_id = item_id(1061);
}
impl item_id {
    pub const ITEM_MACHAMP_BELT: item_id = item_id(1062);
}
impl item_id {
    pub const ITEM_BELL_BOW: item_id = item_id(1063);
}
impl item_id {
    pub const ITEM_DIGEST_SCARF: item_id = item_id(1064);
}
impl item_id {
    pub const ITEM_VICTREE_TORC: item_id = item_id(1065);
}
impl item_id {
    pub const ITEM_TANGLE_BOW: item_id = item_id(1066);
}
impl item_id {
    pub const ITEM_TENTA_CAPE: item_id = item_id(1067);
}
impl item_id {
    pub const ITEM_GEODUDE_TORC: item_id = item_id(1068);
}
impl item_id {
    pub const ITEM_ROCKY_TORC: item_id = item_id(1069);
}
impl item_id {
    pub const ITEM_RUGGED_SASH: item_id = item_id(1070);
}
impl item_id {
    pub const ITEM_HEATED_BOW: item_id = item_id(1071);
}
impl item_id {
    pub const ITEM_SUNLIGHT_BOW: item_id = item_id(1072);
}
impl item_id {
    pub const ITEM_SLOWPOKE_HAT: item_id = item_id(1073);
}
impl item_id {
    pub const ITEM_SLOW_SCARF: item_id = item_id(1074);
}
impl item_id {
    pub const ITEM_MAGNE_TORC: item_id = item_id(1075);
}
impl item_id {
    pub const ITEM_MAGNETON_BOW: item_id = item_id(1076);
}
impl item_id {
    pub const ITEM_BULLSEYE_BOW: item_id = item_id(1077);
}
impl item_id {
    pub const ITEM_BUDDY_TORC: item_id = item_id(1078);
}
impl item_id {
    pub const ITEM_FIGHT_TORC: item_id = item_id(1079);
}
impl item_id {
    pub const ITEM_GENTLE_BOW: item_id = item_id(1080);
}
impl item_id {
    pub const ITEM_NORTH_TORC: item_id = item_id(1081);
}
impl item_id {
    pub const ITEM_GRIMY_SCARF: item_id = item_id(1082);
}
impl item_id {
    pub const ITEM_SLIMY_BOW: item_id = item_id(1083);
}
impl item_id {
    pub const ITEM_SHELL_TORC: item_id = item_id(1084);
}
impl item_id {
    pub const ITEM_COVER_ARMOR: item_id = item_id(1085);
}
impl item_id {
    pub const ITEM_GASTLY_VEIL: item_id = item_id(1086);
}
impl item_id {
    pub const ITEM_SLIP_SCARF: item_id = item_id(1087);
}
impl item_id {
    pub const ITEM_SUNGLASSES: item_id = item_id(1088);
}
impl item_id {
    pub const ITEM_TRUST_BROOCH: item_id = item_id(1089);
}
impl item_id {
    pub const ITEM_DROWZEE_TIE: item_id = item_id(1090);
}
impl item_id {
    pub const ITEM_DREAM_COIN: item_id = item_id(1091);
}
impl item_id {
    pub const ITEM_KRABBY_BOW: item_id = item_id(1092);
}
impl item_id {
    pub const ITEM_SUPER_SASH: item_id = item_id(1093);
}
impl item_id {
    pub const ITEM_BALL_SCARF: item_id = item_id(1094);
}
impl item_id {
    pub const ITEM_ELECTRO_BOW: item_id = item_id(1095);
}
impl item_id {
    pub const ITEM_REPEL_SCARF: item_id = item_id(1096);
}
impl item_id {
    pub const ITEM_EXEGGU_SASH: item_id = item_id(1097);
}
impl item_id {
    pub const ITEM_CUBONE_SCARF: item_id = item_id(1098);
}
impl item_id {
    pub const ITEM_MAROWAK_TORC: item_id = item_id(1099);
}
impl item_id {
    pub const ITEM_LICKY_SCARF: item_id = item_id(1100);
}
impl item_id {
    pub const ITEM_KOFFING_BOW: item_id = item_id(1101);
}
impl item_id {
    pub const ITEM_WEEZ_SCARF: item_id = item_id(1102);
}
impl item_id {
    pub const ITEM_SOLID_SHIELD: item_id = item_id(1103);
}
impl item_id {
    pub const ITEM_PIERCE_DRILL: item_id = item_id(1104);
}
impl item_id {
    pub const ITEM_STICKY_BOW: item_id = item_id(1105);
}
impl item_id {
    pub const ITEM_KANG_APRON: item_id = item_id(1106);
}
impl item_id {
    pub const ITEM_HORSEA_BOW: item_id = item_id(1107);
}
impl item_id {
    pub const ITEM_SWIRL_SCARF: item_id = item_id(1108);
}
impl item_id {
    pub const ITEM_GOLDEEN_BOW: item_id = item_id(1109);
}
impl item_id {
    pub const ITEM_SEAKING_BOW: item_id = item_id(1110);
}
impl item_id {
    pub const ITEM_RECOVER_TORC: item_id = item_id(1111);
}
impl item_id {
    pub const ITEM_STARMIE_BELT: item_id = item_id(1112);
}
impl item_id {
    pub const ITEM_PINSIR_SASH: item_id = item_id(1113);
}
impl item_id {
    pub const ITEM_RUSHING_BOW: item_id = item_id(1114);
}
impl item_id {
    pub const ITEM_MAGIKARP_BOW: item_id = item_id(1115);
}
impl item_id {
    pub const ITEM_TEMPEST_SASH: item_id = item_id(1116);
}
impl item_id {
    pub const ITEM_DITTO_TORC: item_id = item_id(1117);
}
impl item_id {
    pub const ITEM_AI_BROOCH: item_id = item_id(1118);
}
impl item_id {
    pub const ITEM_SPIKE_BROOCH: item_id = item_id(1119);
}
impl item_id {
    pub const ITEM_AGED_SCARF: item_id = item_id(1120);
}
impl item_id {
    pub const ITEM_KABUTO_HAT: item_id = item_id(1121);
}
impl item_id {
    pub const ITEM_KABU_TORC: item_id = item_id(1122);
}
impl item_id {
    pub const ITEM_OLD_BROOCH: item_id = item_id(1123);
}
impl item_id {
    pub const ITEM_DRAGON_SASH: item_id = item_id(1124);
}
impl item_id {
    pub const ITEM_ALOFT_MANTLE: item_id = item_id(1125);
}
impl item_id {
    pub const ITEM_MIRAGE_CAPE: item_id = item_id(1126);
}
impl item_id {
    pub const ITEM_SENTRET_RUFF: item_id = item_id(1127);
}
impl item_id {
    pub const ITEM_BODY_COLLAR: item_id = item_id(1128);
}
impl item_id {
    pub const ITEM_EXPOSE_SPECS: item_id = item_id(1129);
}
impl item_id {
    pub const ITEM_NOCTOWL_TORC: item_id = item_id(1130);
}
impl item_id {
    pub const ITEM_MORNING_BOW: item_id = item_id(1131);
}
impl item_id {
    pub const ITEM_LEDIAN_BOW: item_id = item_id(1132);
}
impl item_id {
    pub const ITEM_SPINA_SCARF: item_id = item_id(1133);
}
impl item_id {
    pub const ITEM_ARIADOS_BOW: item_id = item_id(1134);
}
impl item_id {
    pub const ITEM_SLASH_BOW: item_id = item_id(1135);
}
impl item_id {
    pub const ITEM_SHINE_TORC: item_id = item_id(1136);
}
impl item_id {
    pub const ITEM_LANTURN_BOW: item_id = item_id(1137);
}
impl item_id {
    pub const ITEM_LIVELY_SCARF: item_id = item_id(1138);
}
impl item_id {
    pub const ITEM_XATU_BOW: item_id = item_id(1139);
}
impl item_id {
    pub const ITEM_WOOL_BOW: item_id = item_id(1140);
}
impl item_id {
    pub const ITEM_FLUFFY_SCARF: item_id = item_id(1141);
}
impl item_id {
    pub const ITEM_SACRED_SCARF: item_id = item_id(1142);
}
impl item_id {
    pub const ITEM_BRIGHT_TIARA: item_id = item_id(1143);
}
impl item_id {
    pub const ITEM_RAIN_CROWN: item_id = item_id(1144);
}
impl item_id {
    pub const ITEM_ZEPHYR_BOW: item_id = item_id(1145);
}
impl item_id {
    pub const ITEM_SKIP_SCARF: item_id = item_id(1146);
}
impl item_id {
    pub const ITEM_COTTON_TORC: item_id = item_id(1147);
}
impl item_id {
    pub const ITEM_REVENGE_RUFF: item_id = item_id(1148);
}
impl item_id {
    pub const ITEM_HASTY_BOW: item_id = item_id(1149);
}
impl item_id {
    pub const ITEM_SUN_SCARF: item_id = item_id(1150);
}
impl item_id {
    pub const ITEM_CHITIN_BOW: item_id = item_id(1151);
}
impl item_id {
    pub const ITEM_WOOPER_BOW: item_id = item_id(1152);
}
impl item_id {
    pub const ITEM_QUAG_TORC: item_id = item_id(1153);
}
impl item_id {
    pub const ITEM_MURKROW_HAT: item_id = item_id(1154);
}
impl item_id {
    pub const ITEM_KING_CAP: item_id = item_id(1155);
}
impl item_id {
    pub const ITEM_MISDREA_CAPE: item_id = item_id(1156);
}
impl item_id {
    pub const ITEM_CRYPTIC_SASH: item_id = item_id(1157);
}
impl item_id {
    pub const ITEM_REVERSE_BOW: item_id = item_id(1158);
}
impl item_id {
    pub const ITEM_ROBUST_BOW: item_id = item_id(1159);
}
impl item_id {
    pub const ITEM_DENSE_PONCHO: item_id = item_id(1160);
}
impl item_id {
    pub const ITEM_ESCAPE_SCARF: item_id = item_id(1161);
}
impl item_id {
    pub const ITEM_TAKEOFF_RUFF: item_id = item_id(1162);
}
impl item_id {
    pub const ITEM_QUARTZ_TORC: item_id = item_id(1163);
}
impl item_id {
    pub const ITEM_SNUB_CAPE: item_id = item_id(1164);
}
impl item_id {
    pub const ITEM_STERN_SASH: item_id = item_id(1165);
}
impl item_id {
    pub const ITEM_QWILFISH_BOW: item_id = item_id(1166);
}
impl item_id {
    pub const ITEM_SHUCKLE_BOW: item_id = item_id(1167);
}
impl item_id {
    pub const ITEM_HORN_TORC: item_id = item_id(1168);
}
impl item_id {
    pub const ITEM_LAVA_BOW: item_id = item_id(1169);
}
impl item_id {
    pub const ITEM_TORRID_SCARF: item_id = item_id(1170);
}
impl item_id {
    pub const ITEM_FRIGID_BOW: item_id = item_id(1171);
}
impl item_id {
    pub const ITEM_FROST_TORC: item_id = item_id(1172);
}
impl item_id {
    pub const ITEM_EAGER_BROOCH: item_id = item_id(1173);
}
impl item_id {
    pub const ITEM_REACH_BOW: item_id = item_id(1174);
}
impl item_id {
    pub const ITEM_PSY_BOW: item_id = item_id(1175);
}
impl item_id {
    pub const ITEM_SNOW_BROOCH: item_id = item_id(1176);
}
impl item_id {
    pub const ITEM_SKAR_CAPE: item_id = item_id(1177);
}
impl item_id {
    pub const ITEM_DARK_CHOKER: item_id = item_id(1178);
}
impl item_id {
    pub const ITEM_PIT_FANG: item_id = item_id(1179);
}
impl item_id {
    pub const ITEM_TORNADO_BOW: item_id = item_id(1180);
}
impl item_id {
    pub const ITEM_VIRTUAL_BOW: item_id = item_id(1181);
}
impl item_id {
    pub const ITEM_DELUSION_BOW: item_id = item_id(1182);
}
impl item_id {
    pub const ITEM_PAINT_SCARF: item_id = item_id(1183);
}
impl item_id {
    pub const ITEM_MILKY_SCARF: item_id = item_id(1184);
}
impl item_id {
    pub const ITEM_LARVITAR_BOW: item_id = item_id(1185);
}
impl item_id {
    pub const ITEM_PUPITA_SCARF: item_id = item_id(1186);
}
impl item_id {
    pub const ITEM_CRASH_CLAW: item_id = item_id(1187);
}
impl item_id {
    pub const ITEM_POOCH_COLLAR: item_id = item_id(1188);
}
impl item_id {
    pub const ITEM_DARK_FANG: item_id = item_id(1189);
}
impl item_id {
    pub const ITEM_MERRY_SCARF: item_id = item_id(1190);
}
impl item_id {
    pub const ITEM_LINOONE_RUFF: item_id = item_id(1191);
}
impl item_id {
    pub const ITEM_WURMPLE_BOW: item_id = item_id(1192);
}
impl item_id {
    pub const ITEM_TOUGH_SCARF: item_id = item_id(1193);
}
impl item_id {
    pub const ITEM_VIVID_SILK: item_id = item_id(1194);
}
impl item_id {
    pub const ITEM_GUARD_BOW: item_id = item_id(1195);
}
impl item_id {
    pub const ITEM_DUSTOX_BOW: item_id = item_id(1196);
}
impl item_id {
    pub const ITEM_KELP_HAT: item_id = item_id(1197);
}
impl item_id {
    pub const ITEM_JOLLY_SCARF: item_id = item_id(1198);
}
impl item_id {
    pub const ITEM_LUDICOLO_HAT: item_id = item_id(1199);
}
impl item_id {
    pub const ITEM_SEEDOT_HAT: item_id = item_id(1200);
}
impl item_id {
    pub const ITEM_NUZLEAF_BOW: item_id = item_id(1201);
}
impl item_id {
    pub const ITEM_SHIFTRY_BELT: item_id = item_id(1202);
}
impl item_id {
    pub const ITEM_TAILLOW_BOW: item_id = item_id(1203);
}
impl item_id {
    pub const ITEM_MIDAIR_SCARF: item_id = item_id(1204);
}
impl item_id {
    pub const ITEM_WINGULL_BOW: item_id = item_id(1205);
}
impl item_id {
    pub const ITEM_STOCK_SCARF: item_id = item_id(1206);
}
impl item_id {
    pub const ITEM_SENSING_HAT: item_id = item_id(1207);
}
impl item_id {
    pub const ITEM_MAGICAL_BOW: item_id = item_id(1208);
}
impl item_id {
    pub const ITEM_CARING_SCARF: item_id = item_id(1209);
}
impl item_id {
    pub const ITEM_BLISS_SCARF: item_id = item_id(1210);
}
impl item_id {
    pub const ITEM_BLOCKING_BOW: item_id = item_id(1211);
}
impl item_id {
    pub const ITEM_MOBILE_BOW: item_id = item_id(1212);
}
impl item_id {
    pub const ITEM_THWART_BOW: item_id = item_id(1213);
}
impl item_id {
    pub const ITEM_SLAK_SCARF: item_id = item_id(1214);
}
impl item_id {
    pub const ITEM_VIGOR_SASH: item_id = item_id(1215);
}
impl item_id {
    pub const ITEM_LAZY_RUFF: item_id = item_id(1216);
}
impl item_id {
    pub const ITEM_NOVICE_SCARF: item_id = item_id(1217);
}
impl item_id {
    pub const ITEM_NINJA_RUFF: item_id = item_id(1218);
}
impl item_id {
    pub const ITEM_AWE_MANTLE: item_id = item_id(1219);
}
impl item_id {
    pub const ITEM_GOOD_EARRING: item_id = item_id(1220);
}
impl item_id {
    pub const ITEM_NICE_BANGLE: item_id = item_id(1221);
}
impl item_id {
    pub const ITEM_GREAT_TORC: item_id = item_id(1222);
}
impl item_id {
    pub const ITEM_MAKUHIT_BELT: item_id = item_id(1223);
}
impl item_id {
    pub const ITEM_THRUST_BELT: item_id = item_id(1224);
}
impl item_id {
    pub const ITEM_NOSE_TORC: item_id = item_id(1225);
}
impl item_id {
    pub const ITEM_SABLE_SCOPE: item_id = item_id(1226);
}
impl item_id {
    pub const ITEM_DECEIT_MASK: item_id = item_id(1227);
}
impl item_id {
    pub const ITEM_IRON_TORC: item_id = item_id(1228);
}
impl item_id {
    pub const ITEM_METAL_BANGLE: item_id = item_id(1229);
}
impl item_id {
    pub const ITEM_IRON_HELMET: item_id = item_id(1230);
}
impl item_id {
    pub const ITEM_INTUIT_BOW: item_id = item_id(1231);
}
impl item_id {
    pub const ITEM_PONDER_SASH: item_id = item_id(1232);
}
impl item_id {
    pub const ITEM_PUNISH_TORC: item_id = item_id(1233);
}
impl item_id {
    pub const ITEM_PROTECT_MASK: item_id = item_id(1234);
}
impl item_id {
    pub const ITEM_NEON_SCARF: item_id = item_id(1235);
}
impl item_id {
    pub const ITEM_EVENING_BOW: item_id = item_id(1236);
}
impl item_id {
    pub const ITEM_THORNED_TORC: item_id = item_id(1237);
}
impl item_id {
    pub const ITEM_GULPIN_BOW: item_id = item_id(1238);
}
impl item_id {
    pub const ITEM_SWALOT_BELT: item_id = item_id(1239);
}
impl item_id {
    pub const ITEM_CARVA_SASH: item_id = item_id(1240);
}
impl item_id {
    pub const ITEM_VICIOUS_BOW: item_id = item_id(1241);
}
impl item_id {
    pub const ITEM_SPOUT_SCARF: item_id = item_id(1242);
}
impl item_id {
    pub const ITEM_HUGE_BOW: item_id = item_id(1243);
}
impl item_id {
    pub const ITEM_NUMEL_BOW: item_id = item_id(1244);
}
impl item_id {
    pub const ITEM_ERUPT_SCARF: item_id = item_id(1245);
}
impl item_id {
    pub const ITEM_SOOTY_SASH: item_id = item_id(1246);
}
impl item_id {
    pub const ITEM_SPRING_BOW: item_id = item_id(1247);
}
impl item_id {
    pub const ITEM_SCHEME_SCARF: item_id = item_id(1248);
}
impl item_id {
    pub const ITEM_HULA_BOW: item_id = item_id(1249);
}
impl item_id {
    pub const ITEM_DESERT_BOW: item_id = item_id(1250);
}
impl item_id {
    pub const ITEM_VIBRA_SCARF: item_id = item_id(1251);
}
impl item_id {
    pub const ITEM_RED_GLASSES: item_id = item_id(1252);
}
impl item_id {
    pub const ITEM_DESERT_SASH: item_id = item_id(1253);
}
impl item_id {
    pub const ITEM_CACTURNE_HAT: item_id = item_id(1254);
}
impl item_id {
    pub const ITEM_TUFT_BOW: item_id = item_id(1255);
}
impl item_id {
    pub const ITEM_CLOUD_RUFF: item_id = item_id(1256);
}
impl item_id {
    pub const ITEM_STRONG_SASH: item_id = item_id(1257);
}
impl item_id {
    pub const ITEM_SEVIPER_BOW: item_id = item_id(1258);
}
impl item_id {
    pub const ITEM_LUNATON_TORC: item_id = item_id(1259);
}
impl item_id {
    pub const ITEM_SOLROCK_BOW: item_id = item_id(1260);
}
impl item_id {
    pub const ITEM_SOAK_SCARF: item_id = item_id(1261);
}
impl item_id {
    pub const ITEM_WHISCASH_BOW: item_id = item_id(1262);
}
impl item_id {
    pub const ITEM_BOSSY_SCARF: item_id = item_id(1263);
}
impl item_id {
    pub const ITEM_COWER_SASH: item_id = item_id(1264);
}
impl item_id {
    pub const ITEM_BAL_BROOCH: item_id = item_id(1265);
}
impl item_id {
    pub const ITEM_CLAYDOL_TORC: item_id = item_id(1266);
}
impl item_id {
    pub const ITEM_BIND_SCARF: item_id = item_id(1267);
}
impl item_id {
    pub const ITEM_CRADILY_BOW: item_id = item_id(1268);
}
impl item_id {
    pub const ITEM_GUARD_CLAW: item_id = item_id(1269);
}
impl item_id {
    pub const ITEM_RIGID_CAPE: item_id = item_id(1270);
}
impl item_id {
    pub const ITEM_ADMIRE_SCARF: item_id = item_id(1271);
}
impl item_id {
    pub const ITEM_GRACE_SCARF: item_id = item_id(1272);
}
impl item_id {
    pub const ITEM_KECLEON_TORC: item_id = item_id(1273);
}
impl item_id {
    pub const ITEM_SHUPPET_CAPE: item_id = item_id(1274);
}
impl item_id {
    pub const ITEM_OMINOUS_TORC: item_id = item_id(1275);
}
impl item_id {
    pub const ITEM_DUSKULL_RUFF: item_id = item_id(1276);
}
impl item_id {
    pub const ITEM_ILLUSION_BOW: item_id = item_id(1277);
}
impl item_id {
    pub const ITEM_TROPIUS_BOW: item_id = item_id(1278);
}
impl item_id {
    pub const ITEM_CHIME_SCARF: item_id = item_id(1279);
}
impl item_id {
    pub const ITEM_PERISH_TORC: item_id = item_id(1280);
}
impl item_id {
    pub const ITEM_CHILLY_HAT: item_id = item_id(1281);
}
impl item_id {
    pub const ITEM_HAIL_SCARF: item_id = item_id(1282);
}
impl item_id {
    pub const ITEM_SLEET_BOW: item_id = item_id(1283);
}
impl item_id {
    pub const ITEM_SAFE_SCARF: item_id = item_id(1284);
}
impl item_id {
    pub const ITEM_WALREIN_TORC: item_id = item_id(1285);
}
impl item_id {
    pub const ITEM_CLAM_BROOCH: item_id = item_id(1286);
}
impl item_id {
    pub const ITEM_DEEP_TORC: item_id = item_id(1287);
}
impl item_id {
    pub const ITEM_GORE_SCARF: item_id = item_id(1288);
}
impl item_id {
    pub const ITEM_RELI_TORC: item_id = item_id(1289);
}
impl item_id {
    pub const ITEM_LUVDISC_TORC: item_id = item_id(1290);
}
impl item_id {
    pub const ITEM_CRAG_HELMET: item_id = item_id(1291);
}
impl item_id {
    pub const ITEM_OUTLAST_BOW: item_id = item_id(1292);
}
impl item_id {
    pub const ITEM_SALA_CAPE: item_id = item_id(1293);
}
impl item_id {
    pub const ITEM_BELDUM_TORC: item_id = item_id(1294);
}
impl item_id {
    pub const ITEM_METANG_SCARF: item_id = item_id(1295);
}
impl item_id {
    pub const ITEM_META_TORC: item_id = item_id(1296);
}
impl item_id {
    pub const ITEM_STARLY_BOW: item_id = item_id(1297);
}
impl item_id {
    pub const ITEM_REGRET_TORC: item_id = item_id(1298);
}
impl item_id {
    pub const ITEM_GUTS_SASH: item_id = item_id(1299);
}
impl item_id {
    pub const ITEM_STILL_BOW: item_id = item_id(1300);
}
impl item_id {
    pub const ITEM_KRICKE_TORC: item_id = item_id(1301);
}
impl item_id {
    pub const ITEM_BUDEW_SCARF: item_id = item_id(1302);
}
impl item_id {
    pub const ITEM_BOUQUET_CAPE: item_id = item_id(1303);
}
impl item_id {
    pub const ITEM_HARD_HELMET: item_id = item_id(1304);
}
impl item_id {
    pub const ITEM_SKULL_HELMET: item_id = item_id(1305);
}
impl item_id {
    pub const ITEM_REBOUND_BOW: item_id = item_id(1306);
}
impl item_id {
    pub const ITEM_BLOCK_BROOCH: item_id = item_id(1307);
}
impl item_id {
    pub const ITEM_STRAW_CAPE: item_id = item_id(1308);
}
impl item_id {
    pub const ITEM_WORMA_BOW: item_id = item_id(1309);
}
impl item_id {
    pub const ITEM_MOTHIM_BOW: item_id = item_id(1310);
}
impl item_id {
    pub const ITEM_NECTAR_BOW: item_id = item_id(1311);
}
impl item_id {
    pub const ITEM_VESPI_TORC: item_id = item_id(1312);
}
impl item_id {
    pub const ITEM_AWAKE_BOW: item_id = item_id(1313);
}
impl item_id {
    pub const ITEM_GASTRO_TORC: item_id = item_id(1314);
}
impl item_id {
    pub const ITEM_AMBIPOM_BOW: item_id = item_id(1315);
}
impl item_id {
    pub const ITEM_DEFROST_RUFF: item_id = item_id(1316);
}
impl item_id {
    pub const ITEM_ALLURE_COAT: item_id = item_id(1317);
}
impl item_id {
    pub const ITEM_MAGIC_HAT: item_id = item_id(1318);
}
impl item_id {
    pub const ITEM_HONCH_CAPE: item_id = item_id(1319);
}
impl item_id {
    pub const ITEM_GLAMEOW_BOW: item_id = item_id(1320);
}
impl item_id {
    pub const ITEM_SCARY_BELT: item_id = item_id(1321);
}
impl item_id {
    pub const ITEM_CHING_TORC: item_id = item_id(1322);
}
impl item_id {
    pub const ITEM_STINKY_SCARF: item_id = item_id(1323);
}
impl item_id {
    pub const ITEM_STENCH_SASH: item_id = item_id(1324);
}
impl item_id {
    pub const ITEM_IMAGE_BROOCH: item_id = item_id(1325);
}
impl item_id {
    pub const ITEM_MIRROR_TORC: item_id = item_id(1326);
}
impl item_id {
    pub const ITEM_CHATOT_SCARF: item_id = item_id(1327);
}
impl item_id {
    pub const ITEM_THICK_SCARF: item_id = item_id(1328);
}
impl item_id {
    pub const ITEM_GRIT_VEIL: item_id = item_id(1329);
}
impl item_id {
    pub const ITEM_SKORUPI_BOW: item_id = item_id(1330);
}
impl item_id {
    pub const ITEM_DUST_SCARF: item_id = item_id(1331);
}
impl item_id {
    pub const ITEM_CROA_TORC: item_id = item_id(1332);
}
impl item_id {
    pub const ITEM_TOXI_BELT: item_id = item_id(1333);
}
impl item_id {
    pub const ITEM_CARNI_BOW: item_id = item_id(1334);
}
impl item_id {
    pub const ITEM_SWIM_BOW: item_id = item_id(1335);
}
impl item_id {
    pub const ITEM_LUMI_TORC: item_id = item_id(1336);
}
impl item_id {
    pub const ITEM_SNOWY_TORC: item_id = item_id(1337);
}
impl item_id {
    pub const ITEM_FROZEN_CAPE: item_id = item_id(1338);
}
impl item_id {
    pub const ITEM_BUILDER_SASH: item_id = item_id(1339);
}
impl item_id {
    pub const ITEM_FLABBY_BELT: item_id = item_id(1340);
}
impl item_id {
    pub const ITEM_RHYPERI_TORC: item_id = item_id(1341);
}
impl item_id {
    pub const ITEM_CLINGING_BOW: item_id = item_id(1342);
}
impl item_id {
    pub const ITEM_YANMEGA_BOW: item_id = item_id(1343);
}
impl item_id {
    pub const ITEM_GLISCOR_CAPE: item_id = item_id(1344);
}
impl item_id {
    pub const ITEM_GLACIER_CAPE: item_id = item_id(1345);
}
impl item_id {
    pub const ITEM_BEST_SCARF: item_id = item_id(1346);
}
impl item_id {
    pub const ITEM_GALLANT_TORC: item_id = item_id(1347);
}
impl item_id {
    pub const ITEM_PROBO_HAT: item_id = item_id(1348);
}
impl item_id {
    pub const ITEM_UNLUCKY_SASH: item_id = item_id(1349);
}
impl item_id {
    pub const ITEM_FROSLASS_BOW: item_id = item_id(1350);
}
impl item_id {
    pub const ITEM_PURIFY_VEIL: item_id = item_id(1351);
}
impl item_id {
    pub const ITEM_UNNAMED_0x548: item_id = item_id(1352);
}
impl item_id {
    pub const ITEM_UNNAMED_0x549: item_id = item_id(1353);
}
impl item_id {
    pub const ITEM_UNNAMED_0x54A: item_id = item_id(1354);
}
impl item_id {
    pub const ITEM_UNNAMED_0x54B: item_id = item_id(1355);
}
impl item_id {
    pub const ITEM_UNNAMED_0x54C: item_id = item_id(1356);
}
impl item_id {
    pub const ITEM_UNNAMED_0x54D: item_id = item_id(1357);
}
impl item_id {
    pub const ITEM_UNNAMED_0x54E: item_id = item_id(1358);
}
impl item_id {
    pub const ITEM_UNNAMED_0x54F: item_id = item_id(1359);
}
impl item_id {
    pub const ITEM_UNNAMED_0x550: item_id = item_id(1360);
}
impl item_id {
    pub const ITEM_UNNAMED_0x551: item_id = item_id(1361);
}
impl item_id {
    pub const ITEM_UNNAMED_0x552: item_id = item_id(1362);
}
impl item_id {
    pub const ITEM_UNNAMED_0x553: item_id = item_id(1363);
}
impl item_id {
    pub const ITEM_UNNAMED_0x554: item_id = item_id(1364);
}
impl item_id {
    pub const ITEM_UNNAMED_0x555: item_id = item_id(1365);
}
impl item_id {
    pub const ITEM_UNNAMED_0x556: item_id = item_id(1366);
}
impl item_id {
    pub const ITEM_UNNAMED_0x557: item_id = item_id(1367);
}
impl item_id {
    pub const ITEM_UNNAMED_0x558: item_id = item_id(1368);
}
impl item_id {
    pub const ITEM_UNNAMED_0x559: item_id = item_id(1369);
}
impl item_id {
    pub const ITEM_UNNAMED_0x55A: item_id = item_id(1370);
}
impl item_id {
    pub const ITEM_UNNAMED_0x55B: item_id = item_id(1371);
}
impl item_id {
    pub const ITEM_UNNAMED_0x55C: item_id = item_id(1372);
}
impl item_id {
    pub const ITEM_UNNAMED_0x55D: item_id = item_id(1373);
}
impl item_id {
    pub const ITEM_UNNAMED_0x55E: item_id = item_id(1374);
}
impl item_id {
    pub const ITEM_UNNAMED_0x55F: item_id = item_id(1375);
}
impl item_id {
    pub const ITEM_UNNAMED_0x560: item_id = item_id(1376);
}
impl item_id {
    pub const ITEM_UNNAMED_0x561: item_id = item_id(1377);
}
impl item_id {
    pub const ITEM_UNNAMED_0x562: item_id = item_id(1378);
}
impl item_id {
    pub const ITEM_UNNAMED_0x563: item_id = item_id(1379);
}
impl item_id {
    pub const ITEM_UNNAMED_0x564: item_id = item_id(1380);
}
impl item_id {
    pub const ITEM_UNNAMED_0x565: item_id = item_id(1381);
}
impl item_id {
    pub const ITEM_UNNAMED_0x566: item_id = item_id(1382);
}
impl item_id {
    pub const ITEM_UNNAMED_0x567: item_id = item_id(1383);
}
impl item_id {
    pub const ITEM_UNNAMED_0x568: item_id = item_id(1384);
}
impl item_id {
    pub const ITEM_UNNAMED_0x569: item_id = item_id(1385);
}
impl item_id {
    pub const ITEM_UNNAMED_0x56A: item_id = item_id(1386);
}
impl item_id {
    pub const ITEM_UNNAMED_0x56B: item_id = item_id(1387);
}
impl item_id {
    pub const ITEM_UNNAMED_0x56C: item_id = item_id(1388);
}
impl item_id {
    pub const ITEM_UNNAMED_0x56D: item_id = item_id(1389);
}
impl item_id {
    pub const ITEM_UNNAMED_0x56E: item_id = item_id(1390);
}
impl item_id {
    pub const ITEM_UNNAMED_0x56F: item_id = item_id(1391);
}
impl item_id {
    pub const ITEM_UNNAMED_0x570: item_id = item_id(1392);
}
impl item_id {
    pub const ITEM_UNNAMED_0x571: item_id = item_id(1393);
}
impl item_id {
    pub const ITEM_UNNAMED_0x572: item_id = item_id(1394);
}
impl item_id {
    pub const ITEM_UNNAMED_0x573: item_id = item_id(1395);
}
impl item_id {
    pub const ITEM_UNNAMED_0x574: item_id = item_id(1396);
}
impl item_id {
    pub const ITEM_UNNAMED_0x575: item_id = item_id(1397);
}
impl item_id {
    pub const ITEM_UNNAMED_0x576: item_id = item_id(1398);
}
impl item_id {
    pub const ITEM_UNNAMED_0x577: item_id = item_id(1399);
}
#[repr(transparent)]
#[derive(Clone, Hash, PartialEq, Eq)]
pub struct item_id(pub(crate) crate::ctypes::c_uint);
#[repr(C)]
#[repr(align(2))]
pub struct item_id_16 {
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 2usize]>,
}
impl item_id_16 {
    #[inline]
    pub fn val(&self) -> item_id {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(0usize, 16u8) as u32) }
    }
    #[inline]
    pub fn set_val(&mut self, val: item_id) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(0usize, 16u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(val: item_id) -> __BindgenBitfieldUnit<[u8; 2usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 2usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 16u8, {
            let val: u32 = unsafe { ::core::mem::transmute(val) };
            val as u64
        });
        __bindgen_bitfield_unit
    }
}
impl item_category {
    pub const CATEGORY_THROWN_LINE: item_category = item_category(0);
}
impl item_category {
    pub const CATEGORY_THROWN_ARC: item_category = item_category(1);
}
impl item_category {
    pub const CATEGORY_BERRIES_SEEDS_VITAMINS: item_category = item_category(2);
}
impl item_category {
    pub const CATEGORY_FOOD_GUMMIES: item_category = item_category(3);
}
impl item_category {
    pub const CATEGORY_HELD_ITEMS: item_category = item_category(4);
}
impl item_category {
    pub const CATEGORY_TMS_HMS: item_category = item_category(5);
}
impl item_category {
    pub const CATEGORY_POKE: item_category = item_category(6);
}
impl item_category {
    pub const CATEGORY_UNK_7: item_category = item_category(7);
}
impl item_category {
    pub const CATEGORY_OTHER: item_category = item_category(8);
}
impl item_category {
    pub const CATEGORY_ORBS: item_category = item_category(9);
}
impl item_category {
    pub const CATEGORY_LINK_BOX: item_category = item_category(10);
}
impl item_category {
    pub const CATEGORY_USED_TM: item_category = item_category(11);
}
impl item_category {
    pub const CATEGORY_TREASURE_BOXES_1: item_category = item_category(12);
}
impl item_category {
    pub const CATEGORY_TREASURE_BOXES_2: item_category = item_category(13);
}
impl item_category {
    pub const CATEGORY_TREASURE_BOXES_3: item_category = item_category(14);
}
impl item_category {
    pub const CATEGORY_EXCLUSIVE_ITEMS: item_category = item_category(15);
}
#[repr(transparent)]
#[derive(Clone, Hash, PartialEq, Eq)]
pub struct item_category(pub crate::ctypes::c_uint);
#[repr(C, packed)]
pub struct item_category_8 {
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 1usize]>,
}
impl item_category_8 {
    #[inline]
    pub fn val(&self) -> item_category {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(0usize, 8u8) as u32) }
    }
    #[inline]
    pub fn set_val(&mut self, val: item_category) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(0usize, 8u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(val: item_category) -> __BindgenBitfieldUnit<[u8; 1usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 1usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 8u8, {
            let val: u32 = unsafe { ::core::mem::transmute(val) };
            val as u64
        });
        __bindgen_bitfield_unit
    }
}
impl type_id {
    pub const TYPE_NONE: type_id = type_id(0);
}
impl type_id {
    pub const TYPE_NORMAL: type_id = type_id(1);
}
impl type_id {
    pub const TYPE_FIRE: type_id = type_id(2);
}
impl type_id {
    pub const TYPE_WATER: type_id = type_id(3);
}
impl type_id {
    pub const TYPE_GRASS: type_id = type_id(4);
}
impl type_id {
    pub const TYPE_ELECTRIC: type_id = type_id(5);
}
impl type_id {
    pub const TYPE_ICE: type_id = type_id(6);
}
impl type_id {
    pub const TYPE_FIGHTING: type_id = type_id(7);
}
impl type_id {
    pub const TYPE_POISON: type_id = type_id(8);
}
impl type_id {
    pub const TYPE_GROUND: type_id = type_id(9);
}
impl type_id {
    pub const TYPE_FLYING: type_id = type_id(10);
}
impl type_id {
    pub const TYPE_PSYCHIC: type_id = type_id(11);
}
impl type_id {
    pub const TYPE_BUG: type_id = type_id(12);
}
impl type_id {
    pub const TYPE_ROCK: type_id = type_id(13);
}
impl type_id {
    pub const TYPE_GHOST: type_id = type_id(14);
}
impl type_id {
    pub const TYPE_DRAGON: type_id = type_id(15);
}
impl type_id {
    pub const TYPE_DARK: type_id = type_id(16);
}
impl type_id {
    pub const TYPE_STEEL: type_id = type_id(17);
}
impl type_id {
    pub const TYPE_NEUTRAL: type_id = type_id(18);
}
#[repr(transparent)]
#[derive(Clone, Hash, PartialEq, Eq)]
pub struct type_id(pub(crate) crate::ctypes::c_uint);
#[repr(C, packed)]
pub struct type_id_8 {
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 1usize]>,
}
impl type_id_8 {
    #[inline]
    pub fn val(&self) -> type_id {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(0usize, 8u8) as u32) }
    }
    #[inline]
    pub fn set_val(&mut self, val: type_id) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(0usize, 8u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(val: type_id) -> __BindgenBitfieldUnit<[u8; 1usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 1usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 8u8, {
            let val: u32 = unsafe { ::core::mem::transmute(val) };
            val as u64
        });
        __bindgen_bitfield_unit
    }
}
pub mod type_matchup {
    pub type Type = crate::ctypes::c_uint;
    pub const MATCHUP_IMMUNE: Type = 0;
    pub const MATCHUP_NOT_VERY_EFFECTIVE: Type = 1;
    pub const MATCHUP_NEUTRAL: Type = 2;
    pub const MATCHUP_SUPER_EFFECTIVE: Type = 3;
}
#[repr(C)]
#[repr(align(2))]
pub struct type_matchup_16 {
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 2usize]>,
}
impl type_matchup_16 {
    #[inline]
    pub fn val(&self) -> type_matchup::Type {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(0usize, 16u8) as u32) }
    }
    #[inline]
    pub fn set_val(&mut self, val: type_matchup::Type) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(0usize, 16u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(val: type_matchup::Type) -> __BindgenBitfieldUnit<[u8; 2usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 2usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 16u8, {
            let val: u32 = unsafe { ::core::mem::transmute(val) };
            val as u64
        });
        __bindgen_bitfield_unit
    }
}
impl move_id {
    pub const MOVE_NOTHING: move_id = move_id(0);
}
impl move_id {
    pub const MOVE_IRON_TAIL: move_id = move_id(1);
}
impl move_id {
    pub const MOVE_ICE_BALL: move_id = move_id(2);
}
impl move_id {
    pub const MOVE_YAWN: move_id = move_id(3);
}
impl move_id {
    pub const MOVE_LOVELY_KISS: move_id = move_id(4);
}
impl move_id {
    pub const MOVE_NIGHTMARE: move_id = move_id(5);
}
impl move_id {
    pub const MOVE_MORNING_SUN: move_id = move_id(6);
}
impl move_id {
    pub const MOVE_VITAL_THROW: move_id = move_id(7);
}
impl move_id {
    pub const MOVE_DIG: move_id = move_id(8);
}
impl move_id {
    pub const MOVE_THRASH: move_id = move_id(9);
}
impl move_id {
    pub const MOVE_SWEET_SCENT: move_id = move_id(10);
}
impl move_id {
    pub const MOVE_CHARM: move_id = move_id(11);
}
impl move_id {
    pub const MOVE_RAIN_DANCE: move_id = move_id(12);
}
impl move_id {
    pub const MOVE_CONFUSE_RAY: move_id = move_id(13);
}
impl move_id {
    pub const MOVE_HAIL: move_id = move_id(14);
}
impl move_id {
    pub const MOVE_AROMATHERAPY: move_id = move_id(15);
}
impl move_id {
    pub const MOVE_BUBBLE: move_id = move_id(16);
}
impl move_id {
    pub const MOVE_ENCORE: move_id = move_id(17);
}
impl move_id {
    pub const MOVE_CUT: move_id = move_id(18);
}
impl move_id {
    pub const MOVE_RAGE: move_id = move_id(19);
}
impl move_id {
    pub const MOVE_SUPER_FANG: move_id = move_id(20);
}
impl move_id {
    pub const MOVE_PAIN_SPLIT: move_id = move_id(21);
}
impl move_id {
    pub const MOVE_TORMENT: move_id = move_id(22);
}
impl move_id {
    pub const MOVE_STRING_SHOT: move_id = move_id(23);
}
impl move_id {
    pub const MOVE_SWAGGER: move_id = move_id(24);
}
impl move_id {
    pub const MOVE_SNORE: move_id = move_id(25);
}
impl move_id {
    pub const MOVE_HEAL_BELL: move_id = move_id(26);
}
impl move_id {
    pub const MOVE_SCREECH: move_id = move_id(27);
}
impl move_id {
    pub const MOVE_ROCK_THROW: move_id = move_id(28);
}
impl move_id {
    pub const MOVE_ROCK_SMASH: move_id = move_id(29);
}
impl move_id {
    pub const MOVE_ROCK_SLIDE: move_id = move_id(30);
}
impl move_id {
    pub const MOVE_WEATHER_BALL: move_id = move_id(31);
}
impl move_id {
    pub const MOVE_WHIRLPOOL: move_id = move_id(32);
}
impl move_id {
    pub const MOVE_FAKE_TEARS: move_id = move_id(33);
}
impl move_id {
    pub const MOVE_SING: move_id = move_id(34);
}
impl move_id {
    pub const MOVE_SPITE: move_id = move_id(35);
}
impl move_id {
    pub const MOVE_AIR_CUTTER: move_id = move_id(36);
}
impl move_id {
    pub const MOVE_SMOKESCREEN: move_id = move_id(37);
}
impl move_id {
    pub const MOVE_PURSUIT: move_id = move_id(38);
}
impl move_id {
    pub const MOVE_DOUBLESLAP: move_id = move_id(39);
}
impl move_id {
    pub const MOVE_MIRROR_MOVE: move_id = move_id(40);
}
impl move_id {
    pub const MOVE_OVERHEAT: move_id = move_id(41);
}
impl move_id {
    pub const MOVE_AURORA_BEAM: move_id = move_id(42);
}
impl move_id {
    pub const MOVE_MEMENTO: move_id = move_id(43);
}
impl move_id {
    pub const MOVE_OCTAZOOKA: move_id = move_id(44);
}
impl move_id {
    pub const MOVE_FLATTER: move_id = move_id(45);
}
impl move_id {
    pub const MOVE_ASTONISH: move_id = move_id(46);
}
impl move_id {
    pub const MOVE_WILL_O_WISP: move_id = move_id(47);
}
impl move_id {
    pub const MOVE_RETURN: move_id = move_id(48);
}
impl move_id {
    pub const MOVE_GRUDGE: move_id = move_id(49);
}
impl move_id {
    pub const MOVE_STRENGTH: move_id = move_id(50);
}
impl move_id {
    pub const MOVE_COUNTER: move_id = move_id(51);
}
impl move_id {
    pub const MOVE_FLAME_WHEEL: move_id = move_id(52);
}
impl move_id {
    pub const MOVE_FLAMETHROWER: move_id = move_id(53);
}
impl move_id {
    pub const MOVE_ODOR_SLEUTH: move_id = move_id(54);
}
impl move_id {
    pub const MOVE_SHARPEN: move_id = move_id(55);
}
impl move_id {
    pub const MOVE_DOUBLE_TEAM: move_id = move_id(56);
}
impl move_id {
    pub const MOVE_GUST: move_id = move_id(57);
}
impl move_id {
    pub const MOVE_HARDEN: move_id = move_id(58);
}
impl move_id {
    pub const MOVE_DISABLE: move_id = move_id(59);
}
impl move_id {
    pub const MOVE_RAZOR_WIND: move_id = move_id(60);
}
impl move_id {
    pub const MOVE_BIDE: move_id = move_id(61);
}
impl move_id {
    pub const MOVE_CRUNCH: move_id = move_id(62);
}
impl move_id {
    pub const MOVE_BITE: move_id = move_id(63);
}
impl move_id {
    pub const MOVE_THUNDER: move_id = move_id(64);
}
impl move_id {
    pub const MOVE_THUNDERPUNCH: move_id = move_id(65);
}
impl move_id {
    pub const MOVE_ENDEAVOR: move_id = move_id(66);
}
impl move_id {
    pub const MOVE_FACADE: move_id = move_id(67);
}
impl move_id {
    pub const MOVE_KARATE_CHOP: move_id = move_id(68);
}
impl move_id {
    pub const MOVE_CLAMP: move_id = move_id(69);
}
impl move_id {
    pub const MOVE_WITHDRAW: move_id = move_id(70);
}
impl move_id {
    pub const MOVE_CONSTRICT: move_id = move_id(71);
}
impl move_id {
    pub const MOVE_BRICK_BREAK: move_id = move_id(72);
}
impl move_id {
    pub const MOVE_ROCK_TOMB: move_id = move_id(73);
}
impl move_id {
    pub const MOVE_FOCUS_ENERGY: move_id = move_id(74);
}
impl move_id {
    pub const MOVE_FOCUS_PUNCH: move_id = move_id(75);
}
impl move_id {
    pub const MOVE_GIGA_DRAIN: move_id = move_id(76);
}
impl move_id {
    pub const MOVE_REVERSAL: move_id = move_id(77);
}
impl move_id {
    pub const MOVE_SMELLINGSALT: move_id = move_id(78);
}
impl move_id {
    pub const MOVE_SPORE: move_id = move_id(79);
}
impl move_id {
    pub const MOVE_LEECH_LIFE: move_id = move_id(80);
}
impl move_id {
    pub const MOVE_SLASH: move_id = move_id(81);
}
impl move_id {
    pub const MOVE_SILVER_WIND: move_id = move_id(82);
}
impl move_id {
    pub const MOVE_METAL_SOUND: move_id = move_id(83);
}
impl move_id {
    pub const MOVE_GRASSWHISTLE: move_id = move_id(84);
}
impl move_id {
    pub const MOVE_TICKLE: move_id = move_id(85);
}
impl move_id {
    pub const MOVE_SPIDER_WEB: move_id = move_id(86);
}
impl move_id {
    pub const MOVE_CRABHAMMER: move_id = move_id(87);
}
impl move_id {
    pub const MOVE_HAZE: move_id = move_id(88);
}
impl move_id {
    pub const MOVE_MEAN_LOOK: move_id = move_id(89);
}
impl move_id {
    pub const MOVE_CROSS_CHOP: move_id = move_id(90);
}
impl move_id {
    pub const MOVE_OUTRAGE: move_id = move_id(91);
}
impl move_id {
    pub const MOVE_LOW_KICK: move_id = move_id(92);
}
impl move_id {
    pub const MOVE_ANCIENTPOWER: move_id = move_id(93);
}
impl move_id {
    pub const MOVE_SYNTHESIS: move_id = move_id(94);
}
impl move_id {
    pub const MOVE_AGILITY: move_id = move_id(95);
}
impl move_id {
    pub const MOVE_RAPID_SPIN: move_id = move_id(96);
}
impl move_id {
    pub const MOVE_ICY_WIND: move_id = move_id(97);
}
impl move_id {
    pub const MOVE_MIND_READER: move_id = move_id(98);
}
impl move_id {
    pub const MOVE_COSMIC_POWER: move_id = move_id(99);
}
impl move_id {
    pub const MOVE_SKY_ATTACK: move_id = move_id(100);
}
impl move_id {
    pub const MOVE_POWDER_SNOW: move_id = move_id(101);
}
impl move_id {
    pub const MOVE_FOLLOW_ME: move_id = move_id(102);
}
impl move_id {
    pub const MOVE_METEOR_MASH: move_id = move_id(103);
}
impl move_id {
    pub const MOVE_ENDURE: move_id = move_id(104);
}
impl move_id {
    pub const MOVE_ROLLOUT: move_id = move_id(105);
}
impl move_id {
    pub const MOVE_SCARY_FACE: move_id = move_id(106);
}
impl move_id {
    pub const MOVE_PSYBEAM: move_id = move_id(107);
}
impl move_id {
    pub const MOVE_PSYWAVE: move_id = move_id(108);
}
impl move_id {
    pub const MOVE_PSYCHIC: move_id = move_id(109);
}
impl move_id {
    pub const MOVE_PSYCHO_BOOST: move_id = move_id(110);
}
impl move_id {
    pub const MOVE_HYPNOSIS: move_id = move_id(111);
}
impl move_id {
    pub const MOVE_UPROAR: move_id = move_id(112);
}
impl move_id {
    pub const MOVE_WATER_SPOUT: move_id = move_id(113);
}
impl move_id {
    pub const MOVE_SIGNAL_BEAM: move_id = move_id(114);
}
impl move_id {
    pub const MOVE_PSYCH_UP: move_id = move_id(115);
}
impl move_id {
    pub const MOVE_SUBMISSION: move_id = move_id(116);
}
impl move_id {
    pub const MOVE_RECOVER: move_id = move_id(117);
}
impl move_id {
    pub const MOVE_EARTHQUAKE: move_id = move_id(118);
}
impl move_id {
    pub const MOVE_NATURE_POWER: move_id = move_id(119);
}
impl move_id {
    pub const MOVE_LICK: move_id = move_id(120);
}
impl move_id {
    pub const MOVE_FLAIL: move_id = move_id(121);
}
impl move_id {
    pub const MOVE_TAIL_WHIP: move_id = move_id(122);
}
impl move_id {
    pub const MOVE_SELFDESTRUCT: move_id = move_id(123);
}
impl move_id {
    pub const MOVE_STUN_SPORE: move_id = move_id(124);
}
impl move_id {
    pub const MOVE_BIND: move_id = move_id(125);
}
impl move_id {
    pub const MOVE_SHADOW_PUNCH: move_id = move_id(126);
}
impl move_id {
    pub const MOVE_SHADOW_BALL: move_id = move_id(127);
}
impl move_id {
    pub const MOVE_CHARGE: move_id = move_id(128);
}
impl move_id {
    pub const MOVE_THUNDERBOLT: move_id = move_id(129);
}
impl move_id {
    pub const MOVE_MIST: move_id = move_id(130);
}
impl move_id {
    pub const MOVE_FISSURE: move_id = move_id(131);
}
impl move_id {
    pub const MOVE_EXTREMESPEED: move_id = move_id(132);
}
impl move_id {
    pub const MOVE_EXTRASENSORY: move_id = move_id(133);
}
impl move_id {
    pub const MOVE_SAFEGUARD: move_id = move_id(134);
}
impl move_id {
    pub const MOVE_ABSORB: move_id = move_id(135);
}
impl move_id {
    pub const MOVE_SKY_UPPERCUT: move_id = move_id(136);
}
impl move_id {
    pub const MOVE_SKILL_SWAP: move_id = move_id(137);
}
impl move_id {
    pub const MOVE_SKETCH: move_id = move_id(138);
}
impl move_id {
    pub const MOVE_HEADBUTT: move_id = move_id(139);
}
impl move_id {
    pub const MOVE_DOUBLE_EDGE: move_id = move_id(140);
}
impl move_id {
    pub const MOVE_SANDSTORM: move_id = move_id(141);
}
impl move_id {
    pub const MOVE_SAND_ATTACK: move_id = move_id(142);
}
impl move_id {
    pub const MOVE_SAND_TOMB: move_id = move_id(143);
}
impl move_id {
    pub const MOVE_SPARK: move_id = move_id(144);
}
impl move_id {
    pub const MOVE_SWIFT: move_id = move_id(145);
}
impl move_id {
    pub const MOVE_KINESIS: move_id = move_id(146);
}
impl move_id {
    pub const MOVE_SMOG: move_id = move_id(147);
}
impl move_id {
    pub const MOVE_GROWTH: move_id = move_id(148);
}
impl move_id {
    pub const MOVE_SACRED_FIRE: move_id = move_id(149);
}
impl move_id {
    pub const MOVE_SHEER_COLD: move_id = move_id(150);
}
impl move_id {
    pub const MOVE_SOLARBEAM: move_id = move_id(151);
}
impl move_id {
    pub const MOVE_SONICBOOM: move_id = move_id(152);
}
impl move_id {
    pub const MOVE_FLY: move_id = move_id(153);
}
impl move_id {
    pub const MOVE_TACKLE: move_id = move_id(154);
}
impl move_id {
    pub const MOVE_EXPLOSION: move_id = move_id(155);
}
impl move_id {
    pub const MOVE_DIVE: move_id = move_id(156);
}
impl move_id {
    pub const MOVE_FIRE_BLAST: move_id = move_id(157);
}
impl move_id {
    pub const MOVE_WATERFALL: move_id = move_id(158);
}
impl move_id {
    pub const MOVE_MUDDY_WATER: move_id = move_id(159);
}
impl move_id {
    pub const MOVE_STOCKPILE: move_id = move_id(160);
}
impl move_id {
    pub const MOVE_SLAM: move_id = move_id(161);
}
impl move_id {
    pub const MOVE_TWISTER: move_id = move_id(162);
}
impl move_id {
    pub const MOVE_BULLET_SEED: move_id = move_id(163);
}
impl move_id {
    pub const MOVE_TWINEEDLE: move_id = move_id(164);
}
impl move_id {
    pub const MOVE_SOFTBOILED: move_id = move_id(165);
}
impl move_id {
    pub const MOVE_EGG_BOMB: move_id = move_id(166);
}
impl move_id {
    pub const MOVE_FAINT_ATTACK: move_id = move_id(167);
}
impl move_id {
    pub const MOVE_BARRAGE: move_id = move_id(168);
}
impl move_id {
    pub const MOVE_MINIMIZE: move_id = move_id(169);
}
impl move_id {
    pub const MOVE_SEISMIC_TOSS: move_id = move_id(170);
}
impl move_id {
    pub const MOVE_SUPERSONIC: move_id = move_id(171);
}
impl move_id {
    pub const MOVE_TAUNT: move_id = move_id(172);
}
impl move_id {
    pub const MOVE_MOONLIGHT: move_id = move_id(173);
}
impl move_id {
    pub const MOVE_PECK: move_id = move_id(174);
}
impl move_id {
    pub const MOVE_ARM_THRUST: move_id = move_id(175);
}
impl move_id {
    pub const MOVE_HORN_ATTACK: move_id = move_id(176);
}
impl move_id {
    pub const MOVE_HORN_DRILL: move_id = move_id(177);
}
impl move_id {
    pub const MOVE_WING_ATTACK: move_id = move_id(178);
}
impl move_id {
    pub const MOVE_AERIAL_ACE: move_id = move_id(179);
}
impl move_id {
    pub const MOVE_ICICLE_SPEAR: move_id = move_id(180);
}
impl move_id {
    pub const MOVE_SWORDS_DANCE: move_id = move_id(181);
}
impl move_id {
    pub const MOVE_VINE_WHIP: move_id = move_id(182);
}
impl move_id {
    pub const MOVE_CONVERSION: move_id = move_id(183);
}
impl move_id {
    pub const MOVE_CONVERSION_2: move_id = move_id(184);
}
impl move_id {
    pub const MOVE_HELPING_HAND: move_id = move_id(185);
}
impl move_id {
    pub const MOVE_IRON_DEFENSE: move_id = move_id(186);
}
impl move_id {
    pub const MOVE_TELEPORT: move_id = move_id(187);
}
impl move_id {
    pub const MOVE_THUNDERSHOCK: move_id = move_id(188);
}
impl move_id {
    pub const MOVE_SHOCK_WAVE: move_id = move_id(189);
}
impl move_id {
    pub const MOVE_QUICK_ATTACK: move_id = move_id(190);
}
impl move_id {
    pub const MOVE_SWEET_KISS: move_id = move_id(191);
}
impl move_id {
    pub const MOVE_THUNDER_WAVE: move_id = move_id(192);
}
impl move_id {
    pub const MOVE_ZAP_CANNON: move_id = move_id(193);
}
impl move_id {
    pub const MOVE_BLOCK: move_id = move_id(194);
}
impl move_id {
    pub const MOVE_HOWL: move_id = move_id(195);
}
impl move_id {
    pub const MOVE_POISON_GAS: move_id = move_id(196);
}
impl move_id {
    pub const MOVE_TOXIC: move_id = move_id(197);
}
impl move_id {
    pub const MOVE_POISON_FANG: move_id = move_id(198);
}
impl move_id {
    pub const MOVE_POISONPOWDER: move_id = move_id(199);
}
impl move_id {
    pub const MOVE_POISON_STING: move_id = move_id(200);
}
impl move_id {
    pub const MOVE_SPIKE_CANNON: move_id = move_id(201);
}
impl move_id {
    pub const MOVE_ACID_ARMOR: move_id = move_id(202);
}
impl move_id {
    pub const MOVE_TAKE_DOWN: move_id = move_id(203);
}
impl move_id {
    pub const MOVE_JUMP_KICK: move_id = move_id(204);
}
impl move_id {
    pub const MOVE_BOUNCE: move_id = move_id(205);
}
impl move_id {
    pub const MOVE_HI_JUMP_KICK: move_id = move_id(206);
}
impl move_id {
    pub const MOVE_TRI_ATTACK: move_id = move_id(207);
}
impl move_id {
    pub const MOVE_DRAGON_CLAW: move_id = move_id(208);
}
impl move_id {
    pub const MOVE_TRICK: move_id = move_id(209);
}
impl move_id {
    pub const MOVE_TRIPLE_KICK: move_id = move_id(210);
}
impl move_id {
    pub const MOVE_DRILL_PECK: move_id = move_id(211);
}
impl move_id {
    pub const MOVE_MUD_SPORT: move_id = move_id(212);
}
impl move_id {
    pub const MOVE_MUD_SLAP: move_id = move_id(213);
}
impl move_id {
    pub const MOVE_THIEF: move_id = move_id(214);
}
impl move_id {
    pub const MOVE_AMNESIA: move_id = move_id(215);
}
impl move_id {
    pub const MOVE_NIGHT_SHADE: move_id = move_id(216);
}
impl move_id {
    pub const MOVE_GROWL: move_id = move_id(217);
}
impl move_id {
    pub const MOVE_SLACK_OFF: move_id = move_id(218);
}
impl move_id {
    pub const MOVE_SURF: move_id = move_id(219);
}
impl move_id {
    pub const MOVE_ROLE_PLAY: move_id = move_id(220);
}
impl move_id {
    pub const MOVE_NEEDLE_ARM: move_id = move_id(221);
}
impl move_id {
    pub const MOVE_DOUBLE_KICK: move_id = move_id(222);
}
impl move_id {
    pub const MOVE_SUNNY_DAY: move_id = move_id(223);
}
impl move_id {
    pub const MOVE_LEER: move_id = move_id(224);
}
impl move_id {
    pub const MOVE_WISH: move_id = move_id(225);
}
impl move_id {
    pub const MOVE_FAKE_OUT: move_id = move_id(226);
}
impl move_id {
    pub const MOVE_SLEEP_TALK: move_id = move_id(227);
}
impl move_id {
    pub const MOVE_PAY_DAY: move_id = move_id(228);
}
impl move_id {
    pub const MOVE_ASSIST: move_id = move_id(229);
}
impl move_id {
    pub const MOVE_HEAT_WAVE: move_id = move_id(230);
}
impl move_id {
    pub const MOVE_SLEEP_POWDER: move_id = move_id(231);
}
impl move_id {
    pub const MOVE_REST: move_id = move_id(232);
}
impl move_id {
    pub const MOVE_INGRAIN: move_id = move_id(233);
}
impl move_id {
    pub const MOVE_CONFUSION: move_id = move_id(234);
}
impl move_id {
    pub const MOVE_BODY_SLAM: move_id = move_id(235);
}
impl move_id {
    pub const MOVE_SWALLOW: move_id = move_id(236);
}
impl move_id {
    pub const MOVE_CURSE: move_id = move_id(237);
}
impl move_id {
    pub const MOVE_FRENZY_PLANT: move_id = move_id(238);
}
impl move_id {
    pub const MOVE_HYDRO_CANNON: move_id = move_id(239);
}
impl move_id {
    pub const MOVE_HYDRO_PUMP: move_id = move_id(240);
}
impl move_id {
    pub const MOVE_HYPER_VOICE: move_id = move_id(241);
}
impl move_id {
    pub const MOVE_HYPER_BEAM: move_id = move_id(242);
}
impl move_id {
    pub const MOVE_SUPERPOWER: move_id = move_id(243);
}
impl move_id {
    pub const MOVE_STEEL_WING: move_id = move_id(244);
}
impl move_id {
    pub const MOVE_SPIT_UP: move_id = move_id(245);
}
impl move_id {
    pub const MOVE_DYNAMICPUNCH: move_id = move_id(246);
}
impl move_id {
    pub const MOVE_GUILLOTINE: move_id = move_id(247);
}
impl move_id {
    pub const MOVE_VICEGRIP: move_id = move_id(248);
}
impl move_id {
    pub const MOVE_KNOCK_OFF: move_id = move_id(249);
}
impl move_id {
    pub const MOVE_POUND: move_id = move_id(250);
}
impl move_id {
    pub const MOVE_RAZOR_LEAF: move_id = move_id(251);
}
impl move_id {
    pub const MOVE_BATON_PASS: move_id = move_id(252);
}
impl move_id {
    pub const MOVE_PETAL_DANCE: move_id = move_id(253);
}
impl move_id {
    pub const MOVE_SPLASH: move_id = move_id(254);
}
impl move_id {
    pub const MOVE_BUBBLEBEAM: move_id = move_id(255);
}
impl move_id {
    pub const MOVE_DOOM_DESIRE: move_id = move_id(256);
}
impl move_id {
    pub const MOVE_BELLY_DRUM: move_id = move_id(257);
}
impl move_id {
    pub const MOVE_BARRIER: move_id = move_id(258);
}
impl move_id {
    pub const MOVE_LIGHT_SCREEN: move_id = move_id(259);
}
impl move_id {
    pub const MOVE_SCRATCH: move_id = move_id(260);
}
impl move_id {
    pub const MOVE_HYPER_FANG: move_id = move_id(261);
}
impl move_id {
    pub const MOVE_EMBER: move_id = move_id(262);
}
impl move_id {
    pub const MOVE_SECRET_POWER: move_id = move_id(263);
}
impl move_id {
    pub const MOVE_DIZZY_PUNCH: move_id = move_id(264);
}
impl move_id {
    pub const MOVE_BULK_UP: move_id = move_id(265);
}
impl move_id {
    pub const MOVE_IMPRISON: move_id = move_id(266);
}
impl move_id {
    pub const MOVE_FEATHERDANCE: move_id = move_id(267);
}
impl move_id {
    pub const MOVE_WHIRLWIND: move_id = move_id(268);
}
impl move_id {
    pub const MOVE_BEAT_UP: move_id = move_id(269);
}
impl move_id {
    pub const MOVE_BLIZZARD: move_id = move_id(270);
}
impl move_id {
    pub const MOVE_STOMP: move_id = move_id(271);
}
impl move_id {
    pub const MOVE_BLAST_BURN: move_id = move_id(272);
}
impl move_id {
    pub const MOVE_FLASH: move_id = move_id(273);
}
impl move_id {
    pub const MOVE_TEETER_DANCE: move_id = move_id(274);
}
impl move_id {
    pub const MOVE_CRUSH_CLAW: move_id = move_id(275);
}
impl move_id {
    pub const MOVE_BLAZE_KICK: move_id = move_id(276);
}
impl move_id {
    pub const MOVE_PRESENT: move_id = move_id(277);
}
impl move_id {
    pub const MOVE_ERUPTION: move_id = move_id(278);
}
impl move_id {
    pub const MOVE_SLUDGE: move_id = move_id(279);
}
impl move_id {
    pub const MOVE_SLUDGE_BOMB: move_id = move_id(280);
}
impl move_id {
    pub const MOVE_GLARE: move_id = move_id(281);
}
impl move_id {
    pub const MOVE_TRANSFORM: move_id = move_id(282);
}
impl move_id {
    pub const MOVE_POISON_TAIL: move_id = move_id(283);
}
impl move_id {
    pub const MOVE_ROAR: move_id = move_id(284);
}
impl move_id {
    pub const MOVE_BONE_RUSH: move_id = move_id(285);
}
impl move_id {
    pub const MOVE_CAMOUFLAGE: move_id = move_id(286);
}
impl move_id {
    pub const MOVE_COVET: move_id = move_id(287);
}
impl move_id {
    pub const MOVE_TAIL_GLOW: move_id = move_id(288);
}
impl move_id {
    pub const MOVE_BONE_CLUB: move_id = move_id(289);
}
impl move_id {
    pub const MOVE_BONEMERANG: move_id = move_id(290);
}
impl move_id {
    pub const MOVE_FIRE_SPIN: move_id = move_id(291);
}
impl move_id {
    pub const MOVE_FIRE_PUNCH: move_id = move_id(292);
}
impl move_id {
    pub const MOVE_PERISH_SONG: move_id = move_id(293);
}
impl move_id {
    pub const MOVE_WRAP: move_id = move_id(294);
}
impl move_id {
    pub const MOVE_SPIKES: move_id = move_id(295);
}
impl move_id {
    pub const MOVE_MAGNITUDE: move_id = move_id(296);
}
impl move_id {
    pub const MOVE_MAGICAL_LEAF: move_id = move_id(297);
}
impl move_id {
    pub const MOVE_MAGIC_COAT: move_id = move_id(298);
}
impl move_id {
    pub const MOVE_MUD_SHOT: move_id = move_id(299);
}
impl move_id {
    pub const MOVE_MACH_PUNCH: move_id = move_id(300);
}
impl move_id {
    pub const MOVE_PROTECT: move_id = move_id(301);
}
impl move_id {
    pub const MOVE_DEFENSE_CURL: move_id = move_id(302);
}
impl move_id {
    pub const MOVE_ROLLING_KICK: move_id = move_id(303);
}
impl move_id {
    pub const MOVE_SUBSTITUTE: move_id = move_id(304);
}
impl move_id {
    pub const MOVE_DETECT: move_id = move_id(305);
}
impl move_id {
    pub const MOVE_PIN_MISSILE: move_id = move_id(306);
}
impl move_id {
    pub const MOVE_WATER_SPORT: move_id = move_id(307);
}
impl move_id {
    pub const MOVE_WATER_GUN: move_id = move_id(308);
}
impl move_id {
    pub const MOVE_MIST_BALL: move_id = move_id(309);
}
impl move_id {
    pub const MOVE_WATER_PULSE: move_id = move_id(310);
}
impl move_id {
    pub const MOVE_FURY_ATTACK: move_id = move_id(311);
}
impl move_id {
    pub const MOVE_FURY_SWIPES: move_id = move_id(312);
}
impl move_id {
    pub const MOVE_DESTINY_BOND: move_id = move_id(313);
}
impl move_id {
    pub const MOVE_FALSE_SWIPE: move_id = move_id(314);
}
impl move_id {
    pub const MOVE_FORESIGHT: move_id = move_id(315);
}
impl move_id {
    pub const MOVE_MIRROR_COAT: move_id = move_id(316);
}
impl move_id {
    pub const MOVE_FUTURE_SIGHT: move_id = move_id(317);
}
impl move_id {
    pub const MOVE_MILK_DRINK: move_id = move_id(318);
}
impl move_id {
    pub const MOVE_CALM_MIND: move_id = move_id(319);
}
impl move_id {
    pub const MOVE_MEGA_DRAIN: move_id = move_id(320);
}
impl move_id {
    pub const MOVE_MEGA_KICK: move_id = move_id(321);
}
impl move_id {
    pub const MOVE_MEGA_PUNCH: move_id = move_id(322);
}
impl move_id {
    pub const MOVE_MEGAHORN: move_id = move_id(323);
}
impl move_id {
    pub const MOVE_HIDDEN_POWER: move_id = move_id(324);
}
impl move_id {
    pub const MOVE_METAL_CLAW: move_id = move_id(325);
}
impl move_id {
    pub const MOVE_ATTRACT: move_id = move_id(326);
}
impl move_id {
    pub const MOVE_MIMIC: move_id = move_id(327);
}
impl move_id {
    pub const MOVE_FRUSTRATION: move_id = move_id(328);
}
impl move_id {
    pub const MOVE_LEECH_SEED: move_id = move_id(329);
}
impl move_id {
    pub const MOVE_METRONOME: move_id = move_id(330);
}
impl move_id {
    pub const MOVE_DREAM_EATER: move_id = move_id(331);
}
impl move_id {
    pub const MOVE_ACID: move_id = move_id(332);
}
impl move_id {
    pub const MOVE_MEDITATE: move_id = move_id(333);
}
impl move_id {
    pub const MOVE_SNATCH: move_id = move_id(334);
}
impl move_id {
    pub const MOVE_LUSTER_PURGE: move_id = move_id(335);
}
impl move_id {
    pub const MOVE_LEAF_BLADE: move_id = move_id(336);
}
impl move_id {
    pub const MOVE_RECYCLE: move_id = move_id(337);
}
impl move_id {
    pub const MOVE_REFLECT: move_id = move_id(338);
}
impl move_id {
    pub const MOVE_REFRESH: move_id = move_id(339);
}
impl move_id {
    pub const MOVE_REVENGE: move_id = move_id(340);
}
impl move_id {
    pub const MOVE_DRAGON_RAGE: move_id = move_id(341);
}
impl move_id {
    pub const MOVE_DRAGONBREATH: move_id = move_id(342);
}
impl move_id {
    pub const MOVE_DRAGON_DANCE: move_id = move_id(343);
}
impl move_id {
    pub const MOVE_ICE_PUNCH: move_id = move_id(344);
}
impl move_id {
    pub const MOVE_ICE_BEAM: move_id = move_id(345);
}
impl move_id {
    pub const MOVE_FURY_CUTTER: move_id = move_id(346);
}
impl move_id {
    pub const MOVE_COMET_PUNCH: move_id = move_id(347);
}
impl move_id {
    pub const MOVE_SKULL_BASH: move_id = move_id(348);
}
impl move_id {
    pub const MOVE_LOCK_ON: move_id = move_id(349);
}
impl move_id {
    pub const MOVE_ROCK_BLAST: move_id = move_id(350);
}
impl move_id {
    pub const MOVE_COTTON_SPORE: move_id = move_id(351);
}
impl move_id {
    pub const MOVE_STRUGGLE: move_id = move_id(352);
}
impl move_id {
    pub const MOVE_AEROBLAST: move_id = move_id(353);
}
impl move_id {
    pub const MOVE_VOLT_TACKLE: move_id = move_id(354);
}
impl move_id {
    pub const MOVE_REGULAR_ATTACK: move_id = move_id(355);
}
impl move_id {
    pub const MOVE_IS_WATCHING: move_id = move_id(356);
}
impl move_id {
    pub const MOVE_BIDE_UNLEASH: move_id = move_id(357);
}
impl move_id {
    pub const MOVE_REVENGE_UNLEASH: move_id = move_id(358);
}
impl move_id {
    pub const MOVE_AVALANCHE_UNLEASH: move_id = move_id(359);
}
impl move_id {
    pub const MOVE_WIDE_SLASH: move_id = move_id(360);
}
impl move_id {
    pub const MOVE_UNNAMED_0x169: move_id = move_id(361);
}
impl move_id {
    pub const MOVE_UNNAMED_0x16A: move_id = move_id(362);
}
impl move_id {
    pub const MOVE_SEE_TRAP: move_id = move_id(363);
}
impl move_id {
    pub const MOVE_TAKEAWAY: move_id = move_id(364);
}
impl move_id {
    pub const MOVE_REBOUND: move_id = move_id(365);
}
impl move_id {
    pub const MOVE_BLOOP_SLASH: move_id = move_id(366);
}
impl move_id {
    pub const MOVE_SWITCHER: move_id = move_id(367);
}
impl move_id {
    pub const MOVE_BLOWBACK: move_id = move_id(368);
}
impl move_id {
    pub const MOVE_WARP: move_id = move_id(369);
}
impl move_id {
    pub const MOVE_TRANSFER: move_id = move_id(370);
}
impl move_id {
    pub const MOVE_SLOW_DOWN: move_id = move_id(371);
}
impl move_id {
    pub const MOVE_SPEED_BOOST: move_id = move_id(372);
}
impl move_id {
    pub const MOVE_SEARCHLIGHT: move_id = move_id(373);
}
impl move_id {
    pub const MOVE_PETRIFY: move_id = move_id(374);
}
impl move_id {
    pub const MOVE_STAY_AWAY: move_id = move_id(375);
}
impl move_id {
    pub const MOVE_POUNCE: move_id = move_id(376);
}
impl move_id {
    pub const MOVE_TRAWL: move_id = move_id(377);
}
impl move_id {
    pub const MOVE_CLEANSE: move_id = move_id(378);
}
impl move_id {
    pub const MOVE_OBSERVER: move_id = move_id(379);
}
impl move_id {
    pub const MOVE_DECOY_MAKER: move_id = move_id(380);
}
impl move_id {
    pub const MOVE_SIESTA: move_id = move_id(381);
}
impl move_id {
    pub const MOVE_TOTTER: move_id = move_id(382);
}
impl move_id {
    pub const MOVE_TWO_EDGE: move_id = move_id(383);
}
impl move_id {
    pub const MOVE_NO_MOVE: move_id = move_id(384);
}
impl move_id {
    pub const MOVE_ESCAPE: move_id = move_id(385);
}
impl move_id {
    pub const MOVE_SCAN: move_id = move_id(386);
}
impl move_id {
    pub const MOVE_POWER_EARS: move_id = move_id(387);
}
impl move_id {
    pub const MOVE_DROUGHT: move_id = move_id(388);
}
impl move_id {
    pub const MOVE_TRAP_BUSTER: move_id = move_id(389);
}
impl move_id {
    pub const MOVE_WILD_CALL: move_id = move_id(390);
}
impl move_id {
    pub const MOVE_INVISIFY: move_id = move_id(391);
}
impl move_id {
    pub const MOVE_ONE_SHOT: move_id = move_id(392);
}
impl move_id {
    pub const MOVE_HP_GAUGE: move_id = move_id(393);
}
impl move_id {
    pub const MOVE_VACUUM_CUT: move_id = move_id(394);
}
impl move_id {
    pub const MOVE_REVIVER: move_id = move_id(395);
}
impl move_id {
    pub const MOVE_SHOCKER: move_id = move_id(396);
}
impl move_id {
    pub const MOVE_ECHO: move_id = move_id(397);
}
impl move_id {
    pub const MOVE_FAMISH: move_id = move_id(398);
}
impl move_id {
    pub const MOVE_ONE_ROOM: move_id = move_id(399);
}
impl move_id {
    pub const MOVE_FILL_IN: move_id = move_id(400);
}
impl move_id {
    pub const MOVE_TRAPPER: move_id = move_id(401);
}
impl move_id {
    pub const MOVE_POSSESS: move_id = move_id(402);
}
impl move_id {
    pub const MOVE_ITEMIZE: move_id = move_id(403);
}
impl move_id {
    pub const MOVE_TAG_0x194: move_id = move_id(404);
}
impl move_id {
    pub const MOVE_PROJECTILE: move_id = move_id(405);
}
impl move_id {
    pub const MOVE_HURL: move_id = move_id(406);
}
impl move_id {
    pub const MOVE_MOBILE: move_id = move_id(407);
}
impl move_id {
    pub const MOVE_ITEM_TOSS: move_id = move_id(408);
}
impl move_id {
    pub const MOVE_SEE_STAIRS: move_id = move_id(409);
}
impl move_id {
    pub const MOVE_LONG_TOSS: move_id = move_id(410);
}
impl move_id {
    pub const MOVE_TAG_0x19B: move_id = move_id(411);
}
impl move_id {
    pub const MOVE_PIERCE: move_id = move_id(412);
}
impl move_id {
    pub const MOVE_TAG_0x19D: move_id = move_id(413);
}
impl move_id {
    pub const MOVE_TAG_0x19E: move_id = move_id(414);
}
impl move_id {
    pub const MOVE_TAG_0x19F: move_id = move_id(415);
}
impl move_id {
    pub const MOVE_TAG_0x1A0: move_id = move_id(416);
}
impl move_id {
    pub const MOVE_TAG_0x1A1: move_id = move_id(417);
}
impl move_id {
    pub const MOVE_TAG_0x1A2: move_id = move_id(418);
}
impl move_id {
    pub const MOVE_TAG_0x1A3: move_id = move_id(419);
}
impl move_id {
    pub const MOVE_TAG_0x1A4: move_id = move_id(420);
}
impl move_id {
    pub const MOVE_TAG_0x1A5: move_id = move_id(421);
}
impl move_id {
    pub const MOVE_TAG_0x1A6: move_id = move_id(422);
}
impl move_id {
    pub const MOVE_TAG_0x1A7: move_id = move_id(423);
}
impl move_id {
    pub const MOVE_TAG_0x1A8: move_id = move_id(424);
}
impl move_id {
    pub const MOVE_TAG_0x1A9: move_id = move_id(425);
}
impl move_id {
    pub const MOVE_TAG_0x1AA: move_id = move_id(426);
}
impl move_id {
    pub const MOVE_TAG_0x1AB: move_id = move_id(427);
}
impl move_id {
    pub const MOVE_TAG_0x1AC: move_id = move_id(428);
}
impl move_id {
    pub const MOVE_TAG_0x1AD: move_id = move_id(429);
}
impl move_id {
    pub const MOVE_HAMMER_ARM: move_id = move_id(430);
}
impl move_id {
    pub const MOVE_IRON_HEAD: move_id = move_id(431);
}
impl move_id {
    pub const MOVE_AQUA_JET: move_id = move_id(432);
}
impl move_id {
    pub const MOVE_AQUA_TAIL: move_id = move_id(433);
}
impl move_id {
    pub const MOVE_AQUA_RING: move_id = move_id(434);
}
impl move_id {
    pub const MOVE_SPACIAL_REND: move_id = move_id(435);
}
impl move_id {
    pub const MOVE_DARK_PULSE: move_id = move_id(436);
}
impl move_id {
    pub const MOVE_OMINOUS_WIND: move_id = move_id(437);
}
impl move_id {
    pub const MOVE_GASTRO_ACID: move_id = move_id(438);
}
impl move_id {
    pub const MOVE_HEALING_WISH: move_id = move_id(439);
}
impl move_id {
    pub const MOVE_CLOSE_COMBAT: move_id = move_id(440);
}
impl move_id {
    pub const MOVE_WOOD_HAMMER: move_id = move_id(441);
}
impl move_id {
    pub const MOVE_AIR_SLASH: move_id = move_id(442);
}
impl move_id {
    pub const MOVE_ENERGY_BALL: move_id = move_id(443);
}
impl move_id {
    pub const MOVE_TAILWIND: move_id = move_id(444);
}
impl move_id {
    pub const MOVE_PUNISHMENT: move_id = move_id(445);
}
impl move_id {
    pub const MOVE_CHATTER: move_id = move_id(446);
}
impl move_id {
    pub const MOVE_LUCKY_CHANT: move_id = move_id(447);
}
impl move_id {
    pub const MOVE_GUARD_SWAP: move_id = move_id(448);
}
impl move_id {
    pub const MOVE_HEAL_ORDER: move_id = move_id(449);
}
impl move_id {
    pub const MOVE_HEAL_BLOCK: move_id = move_id(450);
}
impl move_id {
    pub const MOVE_SHADOW_SNEAK: move_id = move_id(451);
}
impl move_id {
    pub const MOVE_THUNDER_FANG: move_id = move_id(452);
}
impl move_id {
    pub const MOVE_ROCK_WRECKER: move_id = move_id(453);
}
impl move_id {
    pub const MOVE_FOCUS_BLAST: move_id = move_id(454);
}
impl move_id {
    pub const MOVE_GIGA_IMPACT: move_id = move_id(455);
}
impl move_id {
    pub const MOVE_DEFOG: move_id = move_id(456);
}
impl move_id {
    pub const MOVE_TRUMP_CARD: move_id = move_id(457);
}
impl move_id {
    pub const MOVE_GRASS_KNOT: move_id = move_id(458);
}
impl move_id {
    pub const MOVE_CROSS_POISON: move_id = move_id(459);
}
impl move_id {
    pub const MOVE_ATTACK_ORDER: move_id = move_id(460);
}
impl move_id {
    pub const MOVE_ICE_FANG: move_id = move_id(461);
}
impl move_id {
    pub const MOVE_ICE_SHARD: move_id = move_id(462);
}
impl move_id {
    pub const MOVE_PSYCHO_CUT: move_id = move_id(463);
}
impl move_id {
    pub const MOVE_PSYCHO_SHIFT: move_id = move_id(464);
}
impl move_id {
    pub const MOVE_ME_FIRST: move_id = move_id(465);
}
impl move_id {
    pub const MOVE_EMBARGO: move_id = move_id(466);
}
impl move_id {
    pub const MOVE_JUDGMENT: move_id = move_id(467);
}
impl move_id {
    pub const MOVE_SEED_FLARE: move_id = move_id(468);
}
impl move_id {
    pub const MOVE_BRINE: move_id = move_id(469);
}
impl move_id {
    pub const MOVE_X_SCISSOR: move_id = move_id(470);
}
impl move_id {
    pub const MOVE_NATURAL_GIFT: move_id = move_id(471);
}
impl move_id {
    pub const MOVE_PAYBACK: move_id = move_id(472);
}
impl move_id {
    pub const MOVE_ZEN_HEADBUTT: move_id = move_id(473);
}
impl move_id {
    pub const MOVE_WRING_OUT: move_id = move_id(474);
}
impl move_id {
    pub const MOVE_GYRO_BALL: move_id = move_id(475);
}
impl move_id {
    pub const MOVE_SHADOW_CLAW: move_id = move_id(476);
}
impl move_id {
    pub const MOVE_SHADOW_FORCE: move_id = move_id(477);
}
impl move_id {
    pub const MOVE_GRAVITY: move_id = move_id(478);
}
impl move_id {
    pub const MOVE_VACUUM_WAVE: move_id = move_id(479);
}
impl move_id {
    pub const MOVE_STEALTH_ROCK: move_id = move_id(480);
}
impl move_id {
    pub const MOVE_STONE_EDGE: move_id = move_id(481);
}
impl move_id {
    pub const MOVE_SWITCHEROO: move_id = move_id(482);
}
impl move_id {
    pub const MOVE_DARK_VOID: move_id = move_id(483);
}
impl move_id {
    pub const MOVE_EARTH_POWER: move_id = move_id(484);
}
impl move_id {
    pub const MOVE_GUNK_SHOT: move_id = move_id(485);
}
impl move_id {
    pub const MOVE_SEED_BOMB: move_id = move_id(486);
}
impl move_id {
    pub const MOVE_DOUBLE_HIT: move_id = move_id(487);
}
impl move_id {
    pub const MOVE_ASSURANCE: move_id = move_id(488);
}
impl move_id {
    pub const MOVE_CHARGE_BEAM: move_id = move_id(489);
}
impl move_id {
    pub const MOVE_PLUCK: move_id = move_id(490);
}
impl move_id {
    pub const MOVE_NIGHT_SLASH: move_id = move_id(491);
}
impl move_id {
    pub const MOVE_ACUPRESSURE: move_id = move_id(492);
}
impl move_id {
    pub const MOVE_MAGNET_RISE: move_id = move_id(493);
}
impl move_id {
    pub const MOVE_ROAR_OF_TIME: move_id = move_id(494);
}
impl move_id {
    pub const MOVE_POISON_JAB: move_id = move_id(495);
}
impl move_id {
    pub const MOVE_TOXIC_SPIKES: move_id = move_id(496);
}
impl move_id {
    pub const MOVE_LAST_RESORT: move_id = move_id(497);
}
impl move_id {
    pub const MOVE_DRAGON_RUSH: move_id = move_id(498);
}
impl move_id {
    pub const MOVE_TRICK_ROOM: move_id = move_id(499);
}
impl move_id {
    pub const MOVE_DRAIN_PUNCH: move_id = move_id(500);
}
impl move_id {
    pub const MOVE_MUD_BOMB: move_id = move_id(501);
}
impl move_id {
    pub const MOVE_U_TURN: move_id = move_id(502);
}
impl move_id {
    pub const MOVE_FLING: move_id = move_id(503);
}
impl move_id {
    pub const MOVE_WORRY_SEED: move_id = move_id(504);
}
impl move_id {
    pub const MOVE_CRUSH_GRIP: move_id = move_id(505);
}
impl move_id {
    pub const MOVE_HEART_SWAP: move_id = move_id(506);
}
impl move_id {
    pub const MOVE_FORCE_PALM: move_id = move_id(507);
}
impl move_id {
    pub const MOVE_AURA_SPHERE: move_id = move_id(508);
}
impl move_id {
    pub const MOVE_ROOST: move_id = move_id(509);
}
impl move_id {
    pub const MOVE_BULLET_PUNCH: move_id = move_id(510);
}
impl move_id {
    pub const MOVE_POWER_WHIP: move_id = move_id(511);
}
impl move_id {
    pub const MOVE_POWER_GEM: move_id = move_id(512);
}
impl move_id {
    pub const MOVE_POWER_SWAP: move_id = move_id(513);
}
impl move_id {
    pub const MOVE_POWER_TRICK: move_id = move_id(514);
}
impl move_id {
    pub const MOVE_SUCKER_PUNCH: move_id = move_id(515);
}
impl move_id {
    pub const MOVE_FEINT: move_id = move_id(516);
}
impl move_id {
    pub const MOVE_FLARE_BLITZ: move_id = move_id(517);
}
impl move_id {
    pub const MOVE_BRAVE_BIRD: move_id = move_id(518);
}
impl move_id {
    pub const MOVE_LAVA_PLUME: move_id = move_id(519);
}
impl move_id {
    pub const MOVE_DEFEND_ORDER: move_id = move_id(520);
}
impl move_id {
    pub const MOVE_DISCHARGE: move_id = move_id(521);
}
impl move_id {
    pub const MOVE_FIRE_FANG: move_id = move_id(522);
}
impl move_id {
    pub const MOVE_MAGNET_BOMB: move_id = move_id(523);
}
impl move_id {
    pub const MOVE_MAGMA_STORM: move_id = move_id(524);
}
impl move_id {
    pub const MOVE_COPYCAT: move_id = move_id(525);
}
impl move_id {
    pub const MOVE_LUNAR_DANCE: move_id = move_id(526);
}
impl move_id {
    pub const MOVE_MIRROR_SHOT: move_id = move_id(527);
}
impl move_id {
    pub const MOVE_MIRACLE_EYE: move_id = move_id(528);
}
impl move_id {
    pub const MOVE_BUG_BITE: move_id = move_id(529);
}
impl move_id {
    pub const MOVE_BUG_BUZZ: move_id = move_id(530);
}
impl move_id {
    pub const MOVE_WAKE_UP_SLAP: move_id = move_id(531);
}
impl move_id {
    pub const MOVE_METAL_BURST: move_id = move_id(532);
}
impl move_id {
    pub const MOVE_HEAD_SMASH: move_id = move_id(533);
}
impl move_id {
    pub const MOVE_CAPTIVATE: move_id = move_id(534);
}
impl move_id {
    pub const MOVE_AVALANCHE: move_id = move_id(535);
}
impl move_id {
    pub const MOVE_FLASH_CANNON: move_id = move_id(536);
}
impl move_id {
    pub const MOVE_LEAF_STORM: move_id = move_id(537);
}
impl move_id {
    pub const MOVE_DRACO_METEOR: move_id = move_id(538);
}
impl move_id {
    pub const MOVE_DRAGON_PULSE: move_id = move_id(539);
}
impl move_id {
    pub const MOVE_ROCK_POLISH: move_id = move_id(540);
}
impl move_id {
    pub const MOVE_ROCK_CLIMB: move_id = move_id(541);
}
impl move_id {
    pub const MOVE_NASTY_PLOT: move_id = move_id(542);
}
impl move_id {
    pub const MOVE_TAG_0x21F: move_id = move_id(543);
}
impl move_id {
    pub const MOVE_TAG_0x220: move_id = move_id(544);
}
impl move_id {
    pub const MOVE_TAG_0x221: move_id = move_id(545);
}
impl move_id {
    pub const MOVE_TAG_0x222: move_id = move_id(546);
}
impl move_id {
    pub const MOVE_TAG_0x223: move_id = move_id(547);
}
impl move_id {
    pub const MOVE_TAG_0x224: move_id = move_id(548);
}
impl move_id {
    pub const MOVE_TAG_0x225: move_id = move_id(549);
}
impl move_id {
    pub const MOVE_TAG_0x226: move_id = move_id(550);
}
impl move_id {
    pub const MOVE_TAG_0x227: move_id = move_id(551);
}
impl move_id {
    pub const MOVE_TAG_0x228: move_id = move_id(552);
}
impl move_id {
    pub const MOVE_TAG_0x229: move_id = move_id(553);
}
impl move_id {
    pub const MOVE_TAG_0x22A: move_id = move_id(554);
}
impl move_id {
    pub const MOVE_TAG_0x22B: move_id = move_id(555);
}
impl move_id {
    pub const MOVE_TAG_0x22C: move_id = move_id(556);
}
impl move_id {
    pub const MOVE_TAG_0x22D: move_id = move_id(557);
}
impl move_id {
    pub const MOVE_TAG_0x22E: move_id = move_id(558);
}
#[repr(transparent)]
#[derive(Clone, Hash, PartialEq, Eq)]
pub struct move_id(pub(crate) crate::ctypes::c_uint);
#[repr(C)]
#[repr(align(2))]
pub struct move_id_16 {
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 2usize]>,
}
impl move_id_16 {
    #[inline]
    pub fn val(&self) -> move_id {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(0usize, 16u8) as u32) }
    }
    #[inline]
    pub fn set_val(&mut self, val: move_id) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(0usize, 16u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(val: move_id) -> __BindgenBitfieldUnit<[u8; 2usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 2usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 16u8, {
            let val: u32 = unsafe { ::core::mem::transmute(val) };
            val as u64
        });
        __bindgen_bitfield_unit
    }
}
pub mod move_category {
    pub type Type = crate::ctypes::c_uint;
    pub const CATEGORY_PHYSICAL: Type = 0;
    pub const CATEGORY_SPECIAL: Type = 1;
    pub const CATEGORY_STATUS: Type = 2;
    pub const CATEGORY_NONE: Type = 3;
}
#[repr(C, packed)]
pub struct move_category_8 {
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 1usize]>,
}
impl move_category_8 {
    #[inline]
    pub fn val(&self) -> move_category::Type {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(0usize, 8u8) as u32) }
    }
    #[inline]
    pub fn set_val(&mut self, val: move_category::Type) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(0usize, 8u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(val: move_category::Type) -> __BindgenBitfieldUnit<[u8; 1usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 1usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 8u8, {
            let val: u32 = unsafe { ::core::mem::transmute(val) };
            val as u64
        });
        __bindgen_bitfield_unit
    }
}
pub mod move_range {
    pub type Type = crate::ctypes::c_uint;
    pub const RANGE_FRONT: Type = 0;
    pub const RANGE_FRONT_AND_SIDES: Type = 1;
    pub const RANGE_NEARBY: Type = 2;
    pub const RANGE_ROOM: Type = 3;
    pub const RANGE_FRONT_2: Type = 4;
    pub const RANGE_FRONT_10: Type = 5;
    pub const RANGE_FLOOR: Type = 6;
    pub const RANGE_USER: Type = 7;
    pub const RANGE_FRONT_WITH_CORNER_CUTTING: Type = 8;
    pub const RANGE_FRONT_2_WITH_CORNER_CUTTING: Type = 9;
    pub const RANGE_SPECIAL: Type = 15;
}
pub mod move_target {
    pub type Type = crate::ctypes::c_uint;
    pub const TARGET_ENEMIES: Type = 0;
    pub const TARGET_PARTY: Type = 1;
    pub const TARGET_ALL: Type = 2;
    pub const TARGET_USER: Type = 3;
    pub const TARGET_ENEMIES_AFTER_CHARGING: Type = 4;
    pub const TARGET_ALL_EXCEPT_USER: Type = 5;
    pub const TARGET_TEAMMATES: Type = 6;
    pub const TARGET_SPECIAL: Type = 15;
}
pub mod move_ai_condition {
    pub type Type = crate::ctypes::c_uint;
    pub const AI_CONDITION_NONE: Type = 0;
    pub const AI_CONDITION_RANDOM: Type = 1;
    pub const AI_CONDITION_HP_25: Type = 2;
    pub const AI_CONDITION_STATUS: Type = 3;
    pub const AI_CONDITION_ASLEEP: Type = 4;
    pub const AI_CONDITION_GHOST: Type = 5;
    pub const AI_CONDITION_HP_25_OR_STATUS: Type = 6;
}
impl ability_id {
    pub const ABILITY_UNKNOWN: ability_id = ability_id(0);
}
impl ability_id {
    pub const ABILITY_STENCH: ability_id = ability_id(1);
}
impl ability_id {
    pub const ABILITY_THICK_FAT: ability_id = ability_id(2);
}
impl ability_id {
    pub const ABILITY_RAIN_DISH: ability_id = ability_id(3);
}
impl ability_id {
    pub const ABILITY_DRIZZLE: ability_id = ability_id(4);
}
impl ability_id {
    pub const ABILITY_ARENA_TRAP: ability_id = ability_id(5);
}
impl ability_id {
    pub const ABILITY_INTIMIDATE: ability_id = ability_id(6);
}
impl ability_id {
    pub const ABILITY_ROCK_HEAD: ability_id = ability_id(7);
}
impl ability_id {
    pub const ABILITY_AIR_LOCK: ability_id = ability_id(8);
}
impl ability_id {
    pub const ABILITY_HYPER_CUTTER: ability_id = ability_id(9);
}
impl ability_id {
    pub const ABILITY_SHADOW_TAG: ability_id = ability_id(10);
}
impl ability_id {
    pub const ABILITY_SPEED_BOOST: ability_id = ability_id(11);
}
impl ability_id {
    pub const ABILITY_BATTLE_ARMOR: ability_id = ability_id(12);
}
impl ability_id {
    pub const ABILITY_STURDY: ability_id = ability_id(13);
}
impl ability_id {
    pub const ABILITY_SUCTION_CUPS: ability_id = ability_id(14);
}
impl ability_id {
    pub const ABILITY_CLEAR_BODY: ability_id = ability_id(15);
}
impl ability_id {
    pub const ABILITY_TORRENT: ability_id = ability_id(16);
}
impl ability_id {
    pub const ABILITY_GUTS: ability_id = ability_id(17);
}
impl ability_id {
    pub const ABILITY_ROUGH_SKIN: ability_id = ability_id(18);
}
impl ability_id {
    pub const ABILITY_SHELL_ARMOR: ability_id = ability_id(19);
}
impl ability_id {
    pub const ABILITY_NATURAL_CURE: ability_id = ability_id(20);
}
impl ability_id {
    pub const ABILITY_DAMP: ability_id = ability_id(21);
}
impl ability_id {
    pub const ABILITY_LIMBER: ability_id = ability_id(22);
}
impl ability_id {
    pub const ABILITY_MAGNET_PULL: ability_id = ability_id(23);
}
impl ability_id {
    pub const ABILITY_WHITE_SMOKE: ability_id = ability_id(24);
}
impl ability_id {
    pub const ABILITY_SYNCHRONIZE: ability_id = ability_id(25);
}
impl ability_id {
    pub const ABILITY_OVERGROW: ability_id = ability_id(26);
}
impl ability_id {
    pub const ABILITY_SWIFT_SWIM: ability_id = ability_id(27);
}
impl ability_id {
    pub const ABILITY_SAND_STREAM: ability_id = ability_id(28);
}
impl ability_id {
    pub const ABILITY_SAND_VEIL: ability_id = ability_id(29);
}
impl ability_id {
    pub const ABILITY_KEEN_EYE: ability_id = ability_id(30);
}
impl ability_id {
    pub const ABILITY_INNER_FOCUS: ability_id = ability_id(31);
}
impl ability_id {
    pub const ABILITY_STATIC: ability_id = ability_id(32);
}
impl ability_id {
    pub const ABILITY_SHED_SKIN: ability_id = ability_id(33);
}
impl ability_id {
    pub const ABILITY_HUGE_POWER: ability_id = ability_id(34);
}
impl ability_id {
    pub const ABILITY_VOLT_ABSORB: ability_id = ability_id(35);
}
impl ability_id {
    pub const ABILITY_WATER_ABSORB: ability_id = ability_id(36);
}
impl ability_id {
    pub const ABILITY_FORECAST: ability_id = ability_id(37);
}
impl ability_id {
    pub const ABILITY_SERENE_GRACE: ability_id = ability_id(38);
}
impl ability_id {
    pub const ABILITY_POISON_POINT: ability_id = ability_id(39);
}
impl ability_id {
    pub const ABILITY_TRACE: ability_id = ability_id(40);
}
impl ability_id {
    pub const ABILITY_OBLIVIOUS: ability_id = ability_id(41);
}
impl ability_id {
    pub const ABILITY_TRUANT: ability_id = ability_id(42);
}
impl ability_id {
    pub const ABILITY_RUN_AWAY: ability_id = ability_id(43);
}
impl ability_id {
    pub const ABILITY_STICKY_HOLD: ability_id = ability_id(44);
}
impl ability_id {
    pub const ABILITY_CLOUD_NINE: ability_id = ability_id(45);
}
impl ability_id {
    pub const ABILITY_ILLUMINATE: ability_id = ability_id(46);
}
impl ability_id {
    pub const ABILITY_EARLY_BIRD: ability_id = ability_id(47);
}
impl ability_id {
    pub const ABILITY_HUSTLE: ability_id = ability_id(48);
}
impl ability_id {
    pub const ABILITY_DROUGHT: ability_id = ability_id(49);
}
impl ability_id {
    pub const ABILITY_LIGHTNINGROD: ability_id = ability_id(50);
}
impl ability_id {
    pub const ABILITY_COMPOUNDEYES: ability_id = ability_id(51);
}
impl ability_id {
    pub const ABILITY_MARVEL_SCALE: ability_id = ability_id(52);
}
impl ability_id {
    pub const ABILITY_WONDER_GUARD: ability_id = ability_id(53);
}
impl ability_id {
    pub const ABILITY_INSOMNIA: ability_id = ability_id(54);
}
impl ability_id {
    pub const ABILITY_LEVITATE: ability_id = ability_id(55);
}
impl ability_id {
    pub const ABILITY_PLUS: ability_id = ability_id(56);
}
impl ability_id {
    pub const ABILITY_PRESSURE: ability_id = ability_id(57);
}
impl ability_id {
    pub const ABILITY_LIQUID_OOZE: ability_id = ability_id(58);
}
impl ability_id {
    pub const ABILITY_COLOR_CHANGE: ability_id = ability_id(59);
}
impl ability_id {
    pub const ABILITY_SOUNDPROOF: ability_id = ability_id(60);
}
impl ability_id {
    pub const ABILITY_EFFECT_SPORE: ability_id = ability_id(61);
}
impl ability_id {
    pub const ABILITY_FLAME_BODY: ability_id = ability_id(62);
}
impl ability_id {
    pub const ABILITY_MINUS: ability_id = ability_id(63);
}
impl ability_id {
    pub const ABILITY_OWN_TEMPO: ability_id = ability_id(64);
}
impl ability_id {
    pub const ABILITY_MAGMA_ARMOR: ability_id = ability_id(65);
}
impl ability_id {
    pub const ABILITY_WATER_VEIL: ability_id = ability_id(66);
}
impl ability_id {
    pub const ABILITY_SWARM: ability_id = ability_id(67);
}
impl ability_id {
    pub const ABILITY_CUTE_CHARM: ability_id = ability_id(68);
}
impl ability_id {
    pub const ABILITY_IMMUNITY: ability_id = ability_id(69);
}
impl ability_id {
    pub const ABILITY_BLAZE: ability_id = ability_id(70);
}
impl ability_id {
    pub const ABILITY_PICKUP: ability_id = ability_id(71);
}
impl ability_id {
    pub const ABILITY_FLASH_FIRE: ability_id = ability_id(72);
}
impl ability_id {
    pub const ABILITY_VITAL_SPIRIT: ability_id = ability_id(73);
}
impl ability_id {
    pub const ABILITY_CHLOROPHYLL: ability_id = ability_id(74);
}
impl ability_id {
    pub const ABILITY_PURE_POWER: ability_id = ability_id(75);
}
impl ability_id {
    pub const ABILITY_SHIELD_DUST: ability_id = ability_id(76);
}
impl ability_id {
    pub const ABILITY_ICE_BODY: ability_id = ability_id(77);
}
impl ability_id {
    pub const ABILITY_STALL: ability_id = ability_id(78);
}
impl ability_id {
    pub const ABILITY_ANGER_POINT: ability_id = ability_id(79);
}
impl ability_id {
    pub const ABILITY_TINTED_LENS: ability_id = ability_id(80);
}
impl ability_id {
    pub const ABILITY_HYDRATION: ability_id = ability_id(81);
}
impl ability_id {
    pub const ABILITY_FRISK: ability_id = ability_id(82);
}
impl ability_id {
    pub const ABILITY_MOLD_BREAKER: ability_id = ability_id(83);
}
impl ability_id {
    pub const ABILITY_UNBURDEN: ability_id = ability_id(84);
}
impl ability_id {
    pub const ABILITY_DRY_SKIN: ability_id = ability_id(85);
}
impl ability_id {
    pub const ABILITY_ANTICIPATION: ability_id = ability_id(86);
}
impl ability_id {
    pub const ABILITY_SCRAPPY: ability_id = ability_id(87);
}
impl ability_id {
    pub const ABILITY_SUPER_LUCK: ability_id = ability_id(88);
}
impl ability_id {
    pub const ABILITY_GLUTTONY: ability_id = ability_id(89);
}
impl ability_id {
    pub const ABILITY_SOLAR_POWER: ability_id = ability_id(90);
}
impl ability_id {
    pub const ABILITY_SKILL_LINK: ability_id = ability_id(91);
}
impl ability_id {
    pub const ABILITY_RECKLESS: ability_id = ability_id(92);
}
impl ability_id {
    pub const ABILITY_SNIPER: ability_id = ability_id(93);
}
impl ability_id {
    pub const ABILITY_SLOW_START: ability_id = ability_id(94);
}
impl ability_id {
    pub const ABILITY_HEATPROOF: ability_id = ability_id(95);
}
impl ability_id {
    pub const ABILITY_DOWNLOAD: ability_id = ability_id(96);
}
impl ability_id {
    pub const ABILITY_SIMPLE: ability_id = ability_id(97);
}
impl ability_id {
    pub const ABILITY_TANGLED_FEET: ability_id = ability_id(98);
}
impl ability_id {
    pub const ABILITY_ADAPTABILITY: ability_id = ability_id(99);
}
impl ability_id {
    pub const ABILITY_TECHNICIAN: ability_id = ability_id(100);
}
impl ability_id {
    pub const ABILITY_IRON_FIST: ability_id = ability_id(101);
}
impl ability_id {
    pub const ABILITY_MOTOR_DRIVE: ability_id = ability_id(102);
}
impl ability_id {
    pub const ABILITY_UNAWARE: ability_id = ability_id(103);
}
impl ability_id {
    pub const ABILITY_RIVALRY: ability_id = ability_id(104);
}
impl ability_id {
    pub const ABILITY_BAD_DREAMS: ability_id = ability_id(105);
}
impl ability_id {
    pub const ABILITY_NO_GUARD: ability_id = ability_id(106);
}
impl ability_id {
    pub const ABILITY_NORMALIZE: ability_id = ability_id(107);
}
impl ability_id {
    pub const ABILITY_SOLID_ROCK: ability_id = ability_id(108);
}
impl ability_id {
    pub const ABILITY_QUICK_FEET: ability_id = ability_id(109);
}
impl ability_id {
    pub const ABILITY_FILTER: ability_id = ability_id(110);
}
impl ability_id {
    pub const ABILITY_KLUTZ: ability_id = ability_id(111);
}
impl ability_id {
    pub const ABILITY_STEADFAST: ability_id = ability_id(112);
}
impl ability_id {
    pub const ABILITY_FLOWER_GIFT: ability_id = ability_id(113);
}
impl ability_id {
    pub const ABILITY_POISON_HEAL: ability_id = ability_id(114);
}
impl ability_id {
    pub const ABILITY_MAGIC_GUARD: ability_id = ability_id(115);
}
impl ability_id {
    pub const ABILITY_UNNAMED_0x74: ability_id = ability_id(116);
}
impl ability_id {
    pub const ABILITY_HONEY_GATHER: ability_id = ability_id(117);
}
impl ability_id {
    pub const ABILITY_AFTERMATH: ability_id = ability_id(118);
}
impl ability_id {
    pub const ABILITY_SNOW_CLOAK: ability_id = ability_id(119);
}
impl ability_id {
    pub const ABILITY_SNOW_WARNING: ability_id = ability_id(120);
}
impl ability_id {
    pub const ABILITY_FOREWARN: ability_id = ability_id(121);
}
impl ability_id {
    pub const ABILITY_STORM_DRAIN: ability_id = ability_id(122);
}
impl ability_id {
    pub const ABILITY_LEAF_GUARD: ability_id = ability_id(123);
}
#[repr(transparent)]
#[derive(Clone, Hash, PartialEq, Eq)]
pub struct ability_id(pub(crate) crate::ctypes::c_uint);
#[repr(C, packed)]
pub struct ability_id_8 {
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 1usize]>,
}
impl ability_id_8 {
    #[inline]
    pub fn val(&self) -> ability_id {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(0usize, 8u8) as u32) }
    }
    #[inline]
    pub fn set_val(&mut self, val: ability_id) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(0usize, 8u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(val: ability_id) -> __BindgenBitfieldUnit<[u8; 1usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 1usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 8u8, {
            let val: u32 = unsafe { ::core::mem::transmute(val) };
            val as u64
        });
        __bindgen_bitfield_unit
    }
}
impl dungeon_id {
    pub const DUNGEON_TEST_DUNGEON: dungeon_id = dungeon_id(0);
}
impl dungeon_id {
    pub const DUNGEON_BEACH_CAVE: dungeon_id = dungeon_id(1);
}
impl dungeon_id {
    pub const DUNGEON_BEACH_CAVE_PIT: dungeon_id = dungeon_id(2);
}
impl dungeon_id {
    pub const DUNGEON_DRENCHED_BLUFF: dungeon_id = dungeon_id(3);
}
impl dungeon_id {
    pub const DUNGEON_MT_BRISTLE: dungeon_id = dungeon_id(4);
}
impl dungeon_id {
    pub const DUNGEON_MT_BRISTLE_PEAK: dungeon_id = dungeon_id(5);
}
impl dungeon_id {
    pub const DUNGEON_WATERFALL_CAVE: dungeon_id = dungeon_id(6);
}
impl dungeon_id {
    pub const DUNGEON_APPLE_WOODS: dungeon_id = dungeon_id(7);
}
impl dungeon_id {
    pub const DUNGEON_CRAGGY_COAST: dungeon_id = dungeon_id(8);
}
impl dungeon_id {
    pub const DUNGEON_SIDE_PATH: dungeon_id = dungeon_id(9);
}
impl dungeon_id {
    pub const DUNGEON_MT_HORN: dungeon_id = dungeon_id(10);
}
impl dungeon_id {
    pub const DUNGEON_ROCK_PATH: dungeon_id = dungeon_id(11);
}
impl dungeon_id {
    pub const DUNGEON_FOGGY_FOREST: dungeon_id = dungeon_id(12);
}
impl dungeon_id {
    pub const DUNGEON_FOREST_PATH: dungeon_id = dungeon_id(13);
}
impl dungeon_id {
    pub const DUNGEON_STEAM_CAVE: dungeon_id = dungeon_id(14);
}
impl dungeon_id {
    pub const DUNGEON_UPPER_STEAM_CAVE: dungeon_id = dungeon_id(15);
}
impl dungeon_id {
    pub const DUNGEON_STEAM_CAVE_PEAK: dungeon_id = dungeon_id(16);
}
impl dungeon_id {
    pub const DUNGEON_AMP_PLAINS: dungeon_id = dungeon_id(17);
}
impl dungeon_id {
    pub const DUNGEON_FAR_AMP_PLAINS: dungeon_id = dungeon_id(18);
}
impl dungeon_id {
    pub const DUNGEON_AMP_CLEARING: dungeon_id = dungeon_id(19);
}
impl dungeon_id {
    pub const DUNGEON_NORTHERN_DESERT: dungeon_id = dungeon_id(20);
}
impl dungeon_id {
    pub const DUNGEON_QUICKSAND_CAVE: dungeon_id = dungeon_id(21);
}
impl dungeon_id {
    pub const DUNGEON_QUICKSAND_PIT: dungeon_id = dungeon_id(22);
}
impl dungeon_id {
    pub const DUNGEON_UNDERGROUND_LAKE: dungeon_id = dungeon_id(23);
}
impl dungeon_id {
    pub const DUNGEON_CRYSTAL_CAVE: dungeon_id = dungeon_id(24);
}
impl dungeon_id {
    pub const DUNGEON_CRYSTAL_CROSSING: dungeon_id = dungeon_id(25);
}
impl dungeon_id {
    pub const DUNGEON_CRYSTAL_LAKE: dungeon_id = dungeon_id(26);
}
impl dungeon_id {
    pub const DUNGEON_CHASM_CAVE: dungeon_id = dungeon_id(27);
}
impl dungeon_id {
    pub const DUNGEON_DARK_HILL: dungeon_id = dungeon_id(28);
}
impl dungeon_id {
    pub const DUNGEON_SEALED_RUIN: dungeon_id = dungeon_id(29);
}
impl dungeon_id {
    pub const DUNGEON_DEEP_SEALED_RUIN: dungeon_id = dungeon_id(30);
}
impl dungeon_id {
    pub const DUNGEON_SEALED_RUIN_PIT: dungeon_id = dungeon_id(31);
}
impl dungeon_id {
    pub const DUNGEON_DUSK_FOREST: dungeon_id = dungeon_id(32);
}
impl dungeon_id {
    pub const DUNGEON_DEEP_DUSK_FOREST: dungeon_id = dungeon_id(33);
}
impl dungeon_id {
    pub const DUNGEON_TREESHROUD_FOREST: dungeon_id = dungeon_id(34);
}
impl dungeon_id {
    pub const DUNGEON_BRINE_CAVE: dungeon_id = dungeon_id(35);
}
impl dungeon_id {
    pub const DUNGEON_LOWER_BRINE_CAVE: dungeon_id = dungeon_id(36);
}
impl dungeon_id {
    pub const DUNGEON_BRINE_CAVE_PIT: dungeon_id = dungeon_id(37);
}
impl dungeon_id {
    pub const DUNGEON_HIDDEN_LAND: dungeon_id = dungeon_id(38);
}
impl dungeon_id {
    pub const DUNGEON_HIDDEN_HIGHLAND: dungeon_id = dungeon_id(39);
}
impl dungeon_id {
    pub const DUNGEON_OLD_RUINS: dungeon_id = dungeon_id(40);
}
impl dungeon_id {
    pub const DUNGEON_TEMPORAL_TOWER: dungeon_id = dungeon_id(41);
}
impl dungeon_id {
    pub const DUNGEON_TEMPORAL_SPIRE: dungeon_id = dungeon_id(42);
}
impl dungeon_id {
    pub const DUNGEON_TEMPORAL_PINNACLE: dungeon_id = dungeon_id(43);
}
impl dungeon_id {
    pub const DUNGEON_MYSTIFYING_FOREST: dungeon_id = dungeon_id(44);
}
impl dungeon_id {
    pub const DUNGEON_MYSTIFYING_FOREST_CLEARING: dungeon_id = dungeon_id(45);
}
impl dungeon_id {
    pub const DUNGEON_BLIZZARD_ISLAND: dungeon_id = dungeon_id(46);
}
impl dungeon_id {
    pub const DUNGEON_CREVICE_CAVE: dungeon_id = dungeon_id(47);
}
impl dungeon_id {
    pub const DUNGEON_LOWER_CREVICE_CAVE: dungeon_id = dungeon_id(48);
}
impl dungeon_id {
    pub const DUNGEON_CREVICE_CAVE_PIT: dungeon_id = dungeon_id(49);
}
impl dungeon_id {
    pub const DUNGEON_SURROUNDED_SEA: dungeon_id = dungeon_id(50);
}
impl dungeon_id {
    pub const DUNGEON_MIRACLE_SEA: dungeon_id = dungeon_id(51);
}
impl dungeon_id {
    pub const DUNGEON_DEEP_MIRACLE_SEA: dungeon_id = dungeon_id(52);
}
impl dungeon_id {
    pub const DUNGEON_MIRACLE_SEABED: dungeon_id = dungeon_id(53);
}
impl dungeon_id {
    pub const DUNGEON_ICE_AEGIS_CAVE: dungeon_id = dungeon_id(54);
}
impl dungeon_id {
    pub const DUNGEON_REGICE_CHAMBER: dungeon_id = dungeon_id(55);
}
impl dungeon_id {
    pub const DUNGEON_ROCK_AEGIS_CAVE: dungeon_id = dungeon_id(56);
}
impl dungeon_id {
    pub const DUNGEON_REGIROCK_CHAMBER: dungeon_id = dungeon_id(57);
}
impl dungeon_id {
    pub const DUNGEON_STEEL_AEGIS_CAVE: dungeon_id = dungeon_id(58);
}
impl dungeon_id {
    pub const DUNGEON_REGISTEEL_CHAMBER: dungeon_id = dungeon_id(59);
}
impl dungeon_id {
    pub const DUNGEON_AEGIS_CAVE_PIT: dungeon_id = dungeon_id(60);
}
impl dungeon_id {
    pub const DUNGEON_REGIGIGAS_CHAMBER: dungeon_id = dungeon_id(61);
}
impl dungeon_id {
    pub const DUNGEON_MT_TRAVAIL: dungeon_id = dungeon_id(62);
}
impl dungeon_id {
    pub const DUNGEON_THE_NIGHTMARE: dungeon_id = dungeon_id(63);
}
impl dungeon_id {
    pub const DUNGEON_SPACIAL_RIFT: dungeon_id = dungeon_id(64);
}
impl dungeon_id {
    pub const DUNGEON_DEEP_SPACIAL_RIFT: dungeon_id = dungeon_id(65);
}
impl dungeon_id {
    pub const DUNGEON_SPACIAL_RIFT_BOTTOM: dungeon_id = dungeon_id(66);
}
impl dungeon_id {
    pub const DUNGEON_DARK_CRATER: dungeon_id = dungeon_id(67);
}
impl dungeon_id {
    pub const DUNGEON_DEEP_DARK_CRATER: dungeon_id = dungeon_id(68);
}
impl dungeon_id {
    pub const DUNGEON_DARK_CRATER_PIT: dungeon_id = dungeon_id(69);
}
impl dungeon_id {
    pub const DUNGEON_CONCEALED_RUINS: dungeon_id = dungeon_id(70);
}
impl dungeon_id {
    pub const DUNGEON_DEEP_CONCEALED_RUINS: dungeon_id = dungeon_id(71);
}
impl dungeon_id {
    pub const DUNGEON_MARINE_RESORT: dungeon_id = dungeon_id(72);
}
impl dungeon_id {
    pub const DUNGEON_BOTTOMLESS_SEA: dungeon_id = dungeon_id(73);
}
impl dungeon_id {
    pub const DUNGEON_BOTTOMLESS_SEA_DEPTHS: dungeon_id = dungeon_id(74);
}
impl dungeon_id {
    pub const DUNGEON_SHIMMER_DESERT: dungeon_id = dungeon_id(75);
}
impl dungeon_id {
    pub const DUNGEON_SHIMMER_DESERT_PIT: dungeon_id = dungeon_id(76);
}
impl dungeon_id {
    pub const DUNGEON_MT_AVALANCHE: dungeon_id = dungeon_id(77);
}
impl dungeon_id {
    pub const DUNGEON_MT_AVALANCHE_PEAK: dungeon_id = dungeon_id(78);
}
impl dungeon_id {
    pub const DUNGEON_GIANT_VOLCANO: dungeon_id = dungeon_id(79);
}
impl dungeon_id {
    pub const DUNGEON_GIANT_VOLCANO_PEAK: dungeon_id = dungeon_id(80);
}
impl dungeon_id {
    pub const DUNGEON_WORLD_ABYSS: dungeon_id = dungeon_id(81);
}
impl dungeon_id {
    pub const DUNGEON_WORLD_ABYSS_PIT: dungeon_id = dungeon_id(82);
}
impl dungeon_id {
    pub const DUNGEON_SKY_STAIRWAY: dungeon_id = dungeon_id(83);
}
impl dungeon_id {
    pub const DUNGEON_SKY_STAIRWAY_APEX: dungeon_id = dungeon_id(84);
}
impl dungeon_id {
    pub const DUNGEON_MYSTERY_JUNGLE: dungeon_id = dungeon_id(85);
}
impl dungeon_id {
    pub const DUNGEON_DEEP_MYSTERY_JUNGLE: dungeon_id = dungeon_id(86);
}
impl dungeon_id {
    pub const DUNGEON_SERENITY_RIVER: dungeon_id = dungeon_id(87);
}
impl dungeon_id {
    pub const DUNGEON_LANDSLIDE_CAVE: dungeon_id = dungeon_id(88);
}
impl dungeon_id {
    pub const DUNGEON_LUSH_PRAIRIE: dungeon_id = dungeon_id(89);
}
impl dungeon_id {
    pub const DUNGEON_TINY_MEADOW: dungeon_id = dungeon_id(90);
}
impl dungeon_id {
    pub const DUNGEON_LABYRINTH_CAVE: dungeon_id = dungeon_id(91);
}
impl dungeon_id {
    pub const DUNGEON_ORAN_FOREST: dungeon_id = dungeon_id(92);
}
impl dungeon_id {
    pub const DUNGEON_LAKE_AFAR: dungeon_id = dungeon_id(93);
}
impl dungeon_id {
    pub const DUNGEON_HAPPY_OUTLOOK: dungeon_id = dungeon_id(94);
}
impl dungeon_id {
    pub const DUNGEON_MY_MISTRAL: dungeon_id = dungeon_id(95);
}
impl dungeon_id {
    pub const DUNGEON_SHIMMER_HILL: dungeon_id = dungeon_id(96);
}
impl dungeon_id {
    pub const DUNGEON_LOST_WILDERNESS: dungeon_id = dungeon_id(97);
}
impl dungeon_id {
    pub const DUNGEON_MIDNIGHT_FOREST: dungeon_id = dungeon_id(98);
}
impl dungeon_id {
    pub const DUNGEON_ZERO_ISLE_NORTH: dungeon_id = dungeon_id(99);
}
impl dungeon_id {
    pub const DUNGEON_ZERO_ISLE_EAST: dungeon_id = dungeon_id(100);
}
impl dungeon_id {
    pub const DUNGEON_ZERO_ISLE_WEST: dungeon_id = dungeon_id(101);
}
impl dungeon_id {
    pub const DUNGEON_ZERO_ISLE_SOUTH: dungeon_id = dungeon_id(102);
}
impl dungeon_id {
    pub const DUNGEON_ZERO_ISLE_CENTER: dungeon_id = dungeon_id(103);
}
impl dungeon_id {
    pub const DUNGEON_DESTINY_TOWER: dungeon_id = dungeon_id(104);
}
impl dungeon_id {
    pub const DUNGEON_DUMMY_0x69: dungeon_id = dungeon_id(105);
}
impl dungeon_id {
    pub const DUNGEON_DUMMY_0x6A: dungeon_id = dungeon_id(106);
}
impl dungeon_id {
    pub const DUNGEON_OBLIVION_FOREST: dungeon_id = dungeon_id(107);
}
impl dungeon_id {
    pub const DUNGEON_TREACHEROUS_WATERS: dungeon_id = dungeon_id(108);
}
impl dungeon_id {
    pub const DUNGEON_SOUTHEASTERN_ISLANDS: dungeon_id = dungeon_id(109);
}
impl dungeon_id {
    pub const DUNGEON_INFERNO_CAVE: dungeon_id = dungeon_id(110);
}
impl dungeon_id {
    pub const DUNGEON_1ST_STATION_PASS: dungeon_id = dungeon_id(111);
}
impl dungeon_id {
    pub const DUNGEON_2ND_STATION_PASS: dungeon_id = dungeon_id(112);
}
impl dungeon_id {
    pub const DUNGEON_3RD_STATION_PASS: dungeon_id = dungeon_id(113);
}
impl dungeon_id {
    pub const DUNGEON_4TH_STATION_PASS: dungeon_id = dungeon_id(114);
}
impl dungeon_id {
    pub const DUNGEON_5TH_STATION_PASS: dungeon_id = dungeon_id(115);
}
impl dungeon_id {
    pub const DUNGEON_6TH_STATION_PASS: dungeon_id = dungeon_id(116);
}
impl dungeon_id {
    pub const DUNGEON_7TH_STATION_PASS: dungeon_id = dungeon_id(117);
}
impl dungeon_id {
    pub const DUNGEON_8TH_STATION_PASS: dungeon_id = dungeon_id(118);
}
impl dungeon_id {
    pub const DUNGEON_9TH_STATION_PASS: dungeon_id = dungeon_id(119);
}
impl dungeon_id {
    pub const DUNGEON_SKY_PEAK_SUMMIT_PASS: dungeon_id = dungeon_id(120);
}
impl dungeon_id {
    pub const DUNGEON_5TH_STATION_CLEARING: dungeon_id = dungeon_id(121);
}
impl dungeon_id {
    pub const DUNGEON_SKY_PEAK_SUMMIT: dungeon_id = dungeon_id(122);
}
impl dungeon_id {
    pub const DUNGEON_STAR_CAVE_SE1: dungeon_id = dungeon_id(123);
}
impl dungeon_id {
    pub const DUNGEON_DEEP_STAR_CAVE: dungeon_id = dungeon_id(124);
}
impl dungeon_id {
    pub const DUNGEON_DEEP_STAR_CAVE_TEAM_ROGUE: dungeon_id = dungeon_id(125);
}
impl dungeon_id {
    pub const DUNGEON_STAR_CAVE_DEPTHS: dungeon_id = dungeon_id(126);
}
impl dungeon_id {
    pub const DUNGEON_STAR_CAVE_PIT: dungeon_id = dungeon_id(127);
}
impl dungeon_id {
    pub const DUNGEON_MURKY_FOREST: dungeon_id = dungeon_id(128);
}
impl dungeon_id {
    pub const DUNGEON_EASTERN_CAVE: dungeon_id = dungeon_id(129);
}
impl dungeon_id {
    pub const DUNGEON_FORTUNE_RAVINE: dungeon_id = dungeon_id(130);
}
impl dungeon_id {
    pub const DUNGEON_FORTUNE_RAVINE_DEPTHS: dungeon_id = dungeon_id(131);
}
impl dungeon_id {
    pub const DUNGEON_FORTUNE_RAVINE_PIT: dungeon_id = dungeon_id(132);
}
impl dungeon_id {
    pub const DUNGEON_BARREN_VALLEY: dungeon_id = dungeon_id(133);
}
impl dungeon_id {
    pub const DUNGEON_DEEP_BARREN_VALLEY: dungeon_id = dungeon_id(134);
}
impl dungeon_id {
    pub const DUNGEON_BARREN_VALLEY_CLEARING: dungeon_id = dungeon_id(135);
}
impl dungeon_id {
    pub const DUNGEON_DARK_WASTELAND: dungeon_id = dungeon_id(136);
}
impl dungeon_id {
    pub const DUNGEON_TEMPORAL_TOWER_SE5: dungeon_id = dungeon_id(137);
}
impl dungeon_id {
    pub const DUNGEON_TEMPORAL_SPIRE_SE5: dungeon_id = dungeon_id(138);
}
impl dungeon_id {
    pub const DUNGEON_DUSK_FOREST_SE5: dungeon_id = dungeon_id(139);
}
impl dungeon_id {
    pub const DUNGEON_BLACK_SWAMP: dungeon_id = dungeon_id(140);
}
impl dungeon_id {
    pub const DUNGEON_SPACIAL_CLIFFS: dungeon_id = dungeon_id(141);
}
impl dungeon_id {
    pub const DUNGEON_DARK_ICE_MOUNTAIN: dungeon_id = dungeon_id(142);
}
impl dungeon_id {
    pub const DUNGEON_DARK_ICE_MOUNTAIN_PEAK: dungeon_id = dungeon_id(143);
}
impl dungeon_id {
    pub const DUNGEON_DARK_ICE_MOUNTAIN_PINNACLE: dungeon_id = dungeon_id(144);
}
impl dungeon_id {
    pub const DUNGEON_ICICLE_FOREST: dungeon_id = dungeon_id(145);
}
impl dungeon_id {
    pub const DUNGEON_VAST_ICE_MOUNTAIN: dungeon_id = dungeon_id(146);
}
impl dungeon_id {
    pub const DUNGEON_VAST_ICE_MOUNTAIN_PEAK: dungeon_id = dungeon_id(147);
}
impl dungeon_id {
    pub const DUNGEON_VAST_ICE_MOUNTAIN_PINNACLE: dungeon_id = dungeon_id(148);
}
impl dungeon_id {
    pub const DUNGEON_SOUTHERN_JUNGLE: dungeon_id = dungeon_id(149);
}
impl dungeon_id {
    pub const DUNGEON_BOULDER_QUARRY: dungeon_id = dungeon_id(150);
}
impl dungeon_id {
    pub const DUNGEON_DEEP_BOULDER_QUARRY: dungeon_id = dungeon_id(151);
}
impl dungeon_id {
    pub const DUNGEON_BOULDER_QUARRY_CLEARING: dungeon_id = dungeon_id(152);
}
impl dungeon_id {
    pub const DUNGEON_RIGHT_CAVE_PATH: dungeon_id = dungeon_id(153);
}
impl dungeon_id {
    pub const DUNGEON_LEFT_CAVE_PATH: dungeon_id = dungeon_id(154);
}
impl dungeon_id {
    pub const DUNGEON_LIMESTONE_CAVERN: dungeon_id = dungeon_id(155);
}
impl dungeon_id {
    pub const DUNGEON_DEEP_LIMESTONE_CAVERN: dungeon_id = dungeon_id(156);
}
impl dungeon_id {
    pub const DUNGEON_LIMESTONE_CAVERN_DEPTHS: dungeon_id = dungeon_id(157);
}
impl dungeon_id {
    pub const DUNGEON_SPRING_CAVE: dungeon_id = dungeon_id(158);
}
impl dungeon_id {
    pub const DUNGEON_UPPER_SPRING_CAVE_HAUNTER: dungeon_id = dungeon_id(159);
}
impl dungeon_id {
    pub const DUNGEON_UPPER_SPRING_CAVE: dungeon_id = dungeon_id(160);
}
impl dungeon_id {
    pub const DUNGEON_MIDDLE_SPRING_CAVE: dungeon_id = dungeon_id(161);
}
impl dungeon_id {
    pub const DUNGEON_LOWER_SPRING_CAVE: dungeon_id = dungeon_id(162);
}
impl dungeon_id {
    pub const DUNGEON_SPRING_CAVE_DEPTHS: dungeon_id = dungeon_id(163);
}
impl dungeon_id {
    pub const DUNGEON_SPRING_CAVE_PIT: dungeon_id = dungeon_id(164);
}
impl dungeon_id {
    pub const DUNGEON_LITTLE_PLAINS: dungeon_id = dungeon_id(165);
}
impl dungeon_id {
    pub const DUNGEON_MT_CLEAR: dungeon_id = dungeon_id(166);
}
impl dungeon_id {
    pub const DUNGEON_CHALLENGE_RIVER: dungeon_id = dungeon_id(167);
}
impl dungeon_id {
    pub const DUNGEON_TRIAL_FOREST: dungeon_id = dungeon_id(168);
}
impl dungeon_id {
    pub const DUNGEON_GUIDING_SEA: dungeon_id = dungeon_id(169);
}
impl dungeon_id {
    pub const DUNGEON_HIDDEN_SHOPKEEPER_VILLAGE: dungeon_id = dungeon_id(170);
}
impl dungeon_id {
    pub const DUNGEON_DUMMY_0xAB: dungeon_id = dungeon_id(171);
}
impl dungeon_id {
    pub const DUNGEON_DUMMY_0xAC: dungeon_id = dungeon_id(172);
}
impl dungeon_id {
    pub const DUNGEON_DUMMY_0xAD: dungeon_id = dungeon_id(173);
}
impl dungeon_id {
    pub const DUNGEON_STAR_CAVE: dungeon_id = dungeon_id(174);
}
impl dungeon_id {
    pub const DUNGEON_SHAYMIN_VILLAGE: dungeon_id = dungeon_id(175);
}
impl dungeon_id {
    pub const DUNGEON_ARMALDOS_SHELTER: dungeon_id = dungeon_id(176);
}
impl dungeon_id {
    pub const DUNGEON_LUMINOUS_SPRING: dungeon_id = dungeon_id(177);
}
impl dungeon_id {
    pub const DUNGEON_HOT_SPRING: dungeon_id = dungeon_id(178);
}
impl dungeon_id {
    pub const DUNGEON_RESCUE: dungeon_id = dungeon_id(179);
}
impl dungeon_id {
    pub const DUNGEON_NORMAL_FLY_MAZE: dungeon_id = dungeon_id(180);
}
impl dungeon_id {
    pub const DUNGEON_DARK_FIRE_MAZE: dungeon_id = dungeon_id(181);
}
impl dungeon_id {
    pub const DUNGEON_ROCK_WATER_MAZE: dungeon_id = dungeon_id(182);
}
impl dungeon_id {
    pub const DUNGEON_GRASS_MAZE: dungeon_id = dungeon_id(183);
}
impl dungeon_id {
    pub const DUNGEON_ELEC_STEEL_MAZE: dungeon_id = dungeon_id(184);
}
impl dungeon_id {
    pub const DUNGEON_ICE_GROUND_MAZE: dungeon_id = dungeon_id(185);
}
impl dungeon_id {
    pub const DUNGEON_FIGHT_PSYCH_MAZE: dungeon_id = dungeon_id(186);
}
impl dungeon_id {
    pub const DUNGEON_POISON_BUG_MAZE: dungeon_id = dungeon_id(187);
}
impl dungeon_id {
    pub const DUNGEON_DRAGON_MAZE: dungeon_id = dungeon_id(188);
}
impl dungeon_id {
    pub const DUNGEON_GHOST_MAZE: dungeon_id = dungeon_id(189);
}
impl dungeon_id {
    pub const DUNGEON_EXPLORER_MAZE: dungeon_id = dungeon_id(190);
}
impl dungeon_id {
    pub const DUNGEON_FINAL_MAZE: dungeon_id = dungeon_id(191);
}
impl dungeon_id {
    pub const DUNGEON_DOJO_0xC0: dungeon_id = dungeon_id(192);
}
impl dungeon_id {
    pub const DUNGEON_DOJO_0xC1: dungeon_id = dungeon_id(193);
}
impl dungeon_id {
    pub const DUNGEON_DOJO_0xC2: dungeon_id = dungeon_id(194);
}
impl dungeon_id {
    pub const DUNGEON_DOJO_0xC3: dungeon_id = dungeon_id(195);
}
impl dungeon_id {
    pub const DUNGEON_DOJO_0xC4: dungeon_id = dungeon_id(196);
}
impl dungeon_id {
    pub const DUNGEON_DOJO_0xC5: dungeon_id = dungeon_id(197);
}
impl dungeon_id {
    pub const DUNGEON_DOJO_0xC6: dungeon_id = dungeon_id(198);
}
impl dungeon_id {
    pub const DUNGEON_DOJO_0xC7: dungeon_id = dungeon_id(199);
}
impl dungeon_id {
    pub const DUNGEON_DOJO_0xC8: dungeon_id = dungeon_id(200);
}
impl dungeon_id {
    pub const DUNGEON_DOJO_0xC9: dungeon_id = dungeon_id(201);
}
impl dungeon_id {
    pub const DUNGEON_DOJO_0xCA: dungeon_id = dungeon_id(202);
}
impl dungeon_id {
    pub const DUNGEON_DOJO_0xCB: dungeon_id = dungeon_id(203);
}
impl dungeon_id {
    pub const DUNGEON_DOJO_0xCC: dungeon_id = dungeon_id(204);
}
impl dungeon_id {
    pub const DUNGEON_DOJO_0xCD: dungeon_id = dungeon_id(205);
}
impl dungeon_id {
    pub const DUNGEON_DOJO_0xCE: dungeon_id = dungeon_id(206);
}
impl dungeon_id {
    pub const DUNGEON_DOJO_0xCF: dungeon_id = dungeon_id(207);
}
impl dungeon_id {
    pub const DUNGEON_DOJO_0xD0: dungeon_id = dungeon_id(208);
}
impl dungeon_id {
    pub const DUNGEON_DOJO_0xD1: dungeon_id = dungeon_id(209);
}
impl dungeon_id {
    pub const DUNGEON_DOJO_0xD2: dungeon_id = dungeon_id(210);
}
impl dungeon_id {
    pub const DUNGEON_DOJO_0xD3: dungeon_id = dungeon_id(211);
}
impl dungeon_id {
    pub const DUNGEON_RESCUE_DUNGEON: dungeon_id = dungeon_id(212);
}
impl dungeon_id {
    pub const DUNGEON_BASE: dungeon_id = dungeon_id(213);
}
impl dungeon_id {
    pub const DUNGEON_JOINED_AT_QUESTION_MARKS: dungeon_id = dungeon_id(214);
}
impl dungeon_id {
    pub const DUNGEON_BEACH: dungeon_id = dungeon_id(215);
}
impl dungeon_id {
    pub const DUNGEON_JOINED_AT_UNKNOWN: dungeon_id = dungeon_id(216);
}
impl dungeon_id {
    pub const DUNGEON_JOINED_AT_BIDOOF: dungeon_id = dungeon_id(217);
}
impl dungeon_id {
    pub const DUNGEON_JOINED_AT_GROVYLE: dungeon_id = dungeon_id(218);
}
impl dungeon_id {
    pub const DUNGEON_JOINED_AT_CELEBI: dungeon_id = dungeon_id(219);
}
impl dungeon_id {
    pub const DUNGEON_JOINED_AT_CHATOT: dungeon_id = dungeon_id(220);
}
impl dungeon_id {
    pub const DUNGEON_JOINED_AT_CRESSELIA: dungeon_id = dungeon_id(221);
}
impl dungeon_id {
    pub const DUNGEON_DUMMY_0xDE: dungeon_id = dungeon_id(222);
}
impl dungeon_id {
    pub const DUNGEON_DUMMY_0xDF: dungeon_id = dungeon_id(223);
}
impl dungeon_id {
    pub const DUNGEON_DUMMY_0xE0: dungeon_id = dungeon_id(224);
}
impl dungeon_id {
    pub const DUNGEON_DUMMY_0xE1: dungeon_id = dungeon_id(225);
}
impl dungeon_id {
    pub const DUNGEON_DUMMY_0xE2: dungeon_id = dungeon_id(226);
}
impl dungeon_id {
    pub const DUNGEON_DUMMY_0xE3: dungeon_id = dungeon_id(227);
}
impl dungeon_id {
    pub const DUNGEON_DUMMY_0xE4: dungeon_id = dungeon_id(228);
}
impl dungeon_id {
    pub const DUNGEON_DUMMY_0xE5: dungeon_id = dungeon_id(229);
}
impl dungeon_id {
    pub const DUNGEON_DUMMY_0xE6: dungeon_id = dungeon_id(230);
}
impl dungeon_id {
    pub const DUNGEON_DUMMY_0xE7: dungeon_id = dungeon_id(231);
}
impl dungeon_id {
    pub const DUNGEON_DUMMY_0xE8: dungeon_id = dungeon_id(232);
}
impl dungeon_id {
    pub const DUNGEON_DUMMY_0xE9: dungeon_id = dungeon_id(233);
}
impl dungeon_id {
    pub const DUNGEON_DUMMY_0xEA: dungeon_id = dungeon_id(234);
}
impl dungeon_id {
    pub const DUNGEON_DUMMY_0xEB: dungeon_id = dungeon_id(235);
}
impl dungeon_id {
    pub const DUNGEON_DUMMY_0xEC: dungeon_id = dungeon_id(236);
}
impl dungeon_id {
    pub const DUNGEON_DUMMY_0xED: dungeon_id = dungeon_id(237);
}
impl dungeon_id {
    pub const DUNGEON_DUMMY_0xEE: dungeon_id = dungeon_id(238);
}
impl dungeon_id {
    pub const DUNGEON_DUMMY_0xEF: dungeon_id = dungeon_id(239);
}
impl dungeon_id {
    pub const DUNGEON_DUMMY_0xF0: dungeon_id = dungeon_id(240);
}
impl dungeon_id {
    pub const DUNGEON_JOINED_AT_MANAPHY_RECRUITED: dungeon_id = dungeon_id(241);
}
impl dungeon_id {
    pub const DUNGEON_JOINED_AT_CRESSELIA_RECRUITED: dungeon_id = dungeon_id(242);
}
impl dungeon_id {
    pub const DUNGEON_JOINED_AT_SHAYMIN_LAND_RECRUITED: dungeon_id = dungeon_id(243);
}
impl dungeon_id {
    pub const DUNGEON_DUMMY_0xF4: dungeon_id = dungeon_id(244);
}
impl dungeon_id {
    pub const DUNGEON_DUMMY_0xF5: dungeon_id = dungeon_id(245);
}
impl dungeon_id {
    pub const DUNGEON_DUMMY_0xF6: dungeon_id = dungeon_id(246);
}
impl dungeon_id {
    pub const DUNGEON_TREASURE_TOWN_0xF7: dungeon_id = dungeon_id(247);
}
impl dungeon_id {
    pub const DUNGEON_TREASURE_TOWN_0xF8: dungeon_id = dungeon_id(248);
}
impl dungeon_id {
    pub const DUNGEON_OUTSIDE: dungeon_id = dungeon_id(249);
}
impl dungeon_id {
    pub const DUNGEON_CLIENT: dungeon_id = dungeon_id(250);
}
impl dungeon_id {
    pub const DUNGEON_DUMMY_0xFB: dungeon_id = dungeon_id(251);
}
impl dungeon_id {
    pub const DUNGEON_DUMMY_0xFC: dungeon_id = dungeon_id(252);
}
impl dungeon_id {
    pub const DUNGEON_DUMMY_0xFD: dungeon_id = dungeon_id(253);
}
impl dungeon_id {
    pub const DUNGEON_DUMMY_0xFE: dungeon_id = dungeon_id(254);
}
impl dungeon_id {
    pub const DUNGEON_DUMMY_0xFF: dungeon_id = dungeon_id(255);
}
#[repr(transparent)]
#[derive(Clone, Hash, PartialEq, Eq)]
pub struct dungeon_id(pub(crate) crate::ctypes::c_uint);
#[repr(C, packed)]
pub struct dungeon_id_8 {
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 1usize]>,
}
impl dungeon_id_8 {
    #[inline]
    pub fn val(&self) -> dungeon_id {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(0usize, 8u8) as u32) }
    }
    #[inline]
    pub fn set_val(&mut self, val: dungeon_id) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(0usize, 8u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(val: dungeon_id) -> __BindgenBitfieldUnit<[u8; 1usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 1usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 8u8, {
            let val: u32 = unsafe { ::core::mem::transmute(val) };
            val as u64
        });
        __bindgen_bitfield_unit
    }
}
#[repr(C)]
#[repr(align(2))]
pub struct dungeon_id_16 {
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 2usize]>,
}
impl dungeon_id_16 {
    #[inline]
    pub fn val(&self) -> dungeon_id {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(0usize, 16u8) as u32) }
    }
    #[inline]
    pub fn set_val(&mut self, val: dungeon_id) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(0usize, 16u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(val: dungeon_id) -> __BindgenBitfieldUnit<[u8; 2usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 2usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 16u8, {
            let val: u32 = unsafe { ::core::mem::transmute(val) };
            val as u64
        });
        __bindgen_bitfield_unit
    }
}
impl dungeon_group_id {
    pub const DGROUP_TEST_DUNGEON: dungeon_group_id = dungeon_group_id(0);
}
impl dungeon_group_id {
    pub const DGROUP_BEACH_CAVE: dungeon_group_id = dungeon_group_id(1);
}
impl dungeon_group_id {
    pub const DGROUP_DRENCHED_BLUFF: dungeon_group_id = dungeon_group_id(2);
}
impl dungeon_group_id {
    pub const DGROUP_MT_BRISTLE: dungeon_group_id = dungeon_group_id(3);
}
impl dungeon_group_id {
    pub const DGROUP_WATERFALL_CAVE: dungeon_group_id = dungeon_group_id(4);
}
impl dungeon_group_id {
    pub const DGROUP_APPLE_WOODS: dungeon_group_id = dungeon_group_id(5);
}
impl dungeon_group_id {
    pub const DGROUP_CRAGGY_COAST: dungeon_group_id = dungeon_group_id(6);
}
impl dungeon_group_id {
    pub const DGROUP_SIDE_PATH: dungeon_group_id = dungeon_group_id(7);
}
impl dungeon_group_id {
    pub const DGROUP_MT_HORN: dungeon_group_id = dungeon_group_id(8);
}
impl dungeon_group_id {
    pub const DGROUP_ROCK_PATH: dungeon_group_id = dungeon_group_id(9);
}
impl dungeon_group_id {
    pub const DGROUP_FOGGY_FOREST: dungeon_group_id = dungeon_group_id(10);
}
impl dungeon_group_id {
    pub const DGROUP_FOREST_PATH: dungeon_group_id = dungeon_group_id(11);
}
impl dungeon_group_id {
    pub const DGROUP_STEAM_CAVE: dungeon_group_id = dungeon_group_id(12);
}
impl dungeon_group_id {
    pub const DGROUP_AMP_PLAINS: dungeon_group_id = dungeon_group_id(13);
}
impl dungeon_group_id {
    pub const DGROUP_NORTHERN_DESERT: dungeon_group_id = dungeon_group_id(14);
}
impl dungeon_group_id {
    pub const DGROUP_QUICKSAND_CAVE: dungeon_group_id = dungeon_group_id(15);
}
impl dungeon_group_id {
    pub const DGROUP_CRYSTAL_CAVE: dungeon_group_id = dungeon_group_id(16);
}
impl dungeon_group_id {
    pub const DGROUP_CRYSTAL_CROSSING: dungeon_group_id = dungeon_group_id(17);
}
impl dungeon_group_id {
    pub const DGROUP_CHASM_CAVE: dungeon_group_id = dungeon_group_id(18);
}
impl dungeon_group_id {
    pub const DGROUP_DARK_HILL: dungeon_group_id = dungeon_group_id(19);
}
impl dungeon_group_id {
    pub const DGROUP_SEALED_RUIN: dungeon_group_id = dungeon_group_id(20);
}
impl dungeon_group_id {
    pub const DGROUP_DUSK_FOREST: dungeon_group_id = dungeon_group_id(21);
}
impl dungeon_group_id {
    pub const DGROUP_DEEP_DUSK_FOREST: dungeon_group_id = dungeon_group_id(22);
}
impl dungeon_group_id {
    pub const DGROUP_TREESHROUD_FOREST: dungeon_group_id = dungeon_group_id(23);
}
impl dungeon_group_id {
    pub const DGROUP_BRINE_CAVE: dungeon_group_id = dungeon_group_id(24);
}
impl dungeon_group_id {
    pub const DGROUP_HIDDEN_LAND: dungeon_group_id = dungeon_group_id(25);
}
impl dungeon_group_id {
    pub const DGROUP_TEMPORAL_TOWER: dungeon_group_id = dungeon_group_id(26);
}
impl dungeon_group_id {
    pub const DGROUP_MYSTIFYING_FOREST: dungeon_group_id = dungeon_group_id(27);
}
impl dungeon_group_id {
    pub const DGROUP_MIDNIGHT_FOREST: dungeon_group_id = dungeon_group_id(28);
}
impl dungeon_group_id {
    pub const DGROUP_LAKE_AFAR: dungeon_group_id = dungeon_group_id(29);
}
impl dungeon_group_id {
    pub const DGROUP_MT_MISTRAL: dungeon_group_id = dungeon_group_id(30);
}
impl dungeon_group_id {
    pub const DGROUP_SHIMMER_HILL: dungeon_group_id = dungeon_group_id(31);
}
impl dungeon_group_id {
    pub const DGROUP_BOTTOMLESS_SEA: dungeon_group_id = dungeon_group_id(32);
}
impl dungeon_group_id {
    pub const DGROUP_SURROUNDED_SEA: dungeon_group_id = dungeon_group_id(33);
}
impl dungeon_group_id {
    pub const DGROUP_MIRACLE_SEA: dungeon_group_id = dungeon_group_id(34);
}
impl dungeon_group_id {
    pub const DGROUP_CONCEALED_RUINS: dungeon_group_id = dungeon_group_id(35);
}
impl dungeon_group_id {
    pub const DGROUP_LOST_WILDERNESS: dungeon_group_id = dungeon_group_id(36);
}
impl dungeon_group_id {
    pub const DGROUP_MYSTERY_JUNGLE: dungeon_group_id = dungeon_group_id(37);
}
impl dungeon_group_id {
    pub const DGROUP_HAPPY_OUTLOOK: dungeon_group_id = dungeon_group_id(38);
}
impl dungeon_group_id {
    pub const DGROUP_SERENITY_RIVER: dungeon_group_id = dungeon_group_id(39);
}
impl dungeon_group_id {
    pub const DGROUP_LANDSLIDE_CAVE: dungeon_group_id = dungeon_group_id(40);
}
impl dungeon_group_id {
    pub const DGROUP_BLIZZARD_ISLAND: dungeon_group_id = dungeon_group_id(41);
}
impl dungeon_group_id {
    pub const DGROUP_SHIMMER_DESERT: dungeon_group_id = dungeon_group_id(42);
}
impl dungeon_group_id {
    pub const DGROUP_CREVICE_CAVE: dungeon_group_id = dungeon_group_id(43);
}
impl dungeon_group_id {
    pub const DGROUP_MT_AVALANCHE: dungeon_group_id = dungeon_group_id(44);
}
impl dungeon_group_id {
    pub const DGROUP_GIANT_VOLCANO: dungeon_group_id = dungeon_group_id(45);
}
impl dungeon_group_id {
    pub const DGROUP_WORLD_ABYSS: dungeon_group_id = dungeon_group_id(46);
}
impl dungeon_group_id {
    pub const DGROUP_LUSH_PRAIRIE: dungeon_group_id = dungeon_group_id(47);
}
impl dungeon_group_id {
    pub const DGROUP_TINY_MEADOW: dungeon_group_id = dungeon_group_id(48);
}
impl dungeon_group_id {
    pub const DGROUP_LABYRINTH_CAVE: dungeon_group_id = dungeon_group_id(49);
}
impl dungeon_group_id {
    pub const DGROUP_ORAN_FOREST: dungeon_group_id = dungeon_group_id(50);
}
impl dungeon_group_id {
    pub const DGROUP_SKY_STAIRWAY: dungeon_group_id = dungeon_group_id(51);
}
impl dungeon_group_id {
    pub const DGROUP_AEGIS_CAVE: dungeon_group_id = dungeon_group_id(52);
}
impl dungeon_group_id {
    pub const DGROUP_MAROWAK_DOJO: dungeon_group_id = dungeon_group_id(53);
}
impl dungeon_group_id {
    pub const DGROUP_DARK_CRATER: dungeon_group_id = dungeon_group_id(54);
}
impl dungeon_group_id {
    pub const DGROUP_MARINE_RESORT: dungeon_group_id = dungeon_group_id(55);
}
impl dungeon_group_id {
    pub const DGROUP_MT_TRAVAIL: dungeon_group_id = dungeon_group_id(56);
}
impl dungeon_group_id {
    pub const DGROUP_THE_NIGHTMARE: dungeon_group_id = dungeon_group_id(57);
}
impl dungeon_group_id {
    pub const DGROUP_SPACIAL_RIFT: dungeon_group_id = dungeon_group_id(58);
}
impl dungeon_group_id {
    pub const DGROUP_ZERO_ISLE_NORTH: dungeon_group_id = dungeon_group_id(59);
}
impl dungeon_group_id {
    pub const DGROUP_ZERO_ISLE_WEST: dungeon_group_id = dungeon_group_id(60);
}
impl dungeon_group_id {
    pub const DGROUP_ZERO_ISLE_EAST: dungeon_group_id = dungeon_group_id(61);
}
impl dungeon_group_id {
    pub const DGROUP_ZERO_ISLE_SOUTH: dungeon_group_id = dungeon_group_id(62);
}
impl dungeon_group_id {
    pub const DGROUP_RESCUE: dungeon_group_id = dungeon_group_id(63);
}
impl dungeon_group_id {
    pub const DGROUP_ZERO_ISLE_CENTER: dungeon_group_id = dungeon_group_id(64);
}
impl dungeon_group_id {
    pub const DGROUP_DESTINY_TOWER: dungeon_group_id = dungeon_group_id(65);
}
impl dungeon_group_id {
    pub const DGROUP_DUMMY_0x42: dungeon_group_id = dungeon_group_id(66);
}
impl dungeon_group_id {
    pub const DGROUP_DUMMY_0x43: dungeon_group_id = dungeon_group_id(67);
}
impl dungeon_group_id {
    pub const DGROUP_OBLIVION_FOREST: dungeon_group_id = dungeon_group_id(68);
}
impl dungeon_group_id {
    pub const DGROUP_TREACHEROUS_WATERS: dungeon_group_id = dungeon_group_id(69);
}
impl dungeon_group_id {
    pub const DGROUP_SOUTHEASTERN_ISLANDS: dungeon_group_id = dungeon_group_id(70);
}
impl dungeon_group_id {
    pub const DGROUP_INFERNO_CAVE: dungeon_group_id = dungeon_group_id(71);
}
impl dungeon_group_id {
    pub const DGROUP_SKY_PEAK: dungeon_group_id = dungeon_group_id(72);
}
impl dungeon_group_id {
    pub const DGROUP_STAR_CAVE_SE1: dungeon_group_id = dungeon_group_id(73);
}
impl dungeon_group_id {
    pub const DGROUP_MURKY_FOREST: dungeon_group_id = dungeon_group_id(74);
}
impl dungeon_group_id {
    pub const DGROUP_EASTERN_CAVE: dungeon_group_id = dungeon_group_id(75);
}
impl dungeon_group_id {
    pub const DGROUP_FORTUNE_RAVINE: dungeon_group_id = dungeon_group_id(76);
}
impl dungeon_group_id {
    pub const DGROUP_BARREN_VALLEY: dungeon_group_id = dungeon_group_id(77);
}
impl dungeon_group_id {
    pub const DGROUP_DARK_WASTELAND: dungeon_group_id = dungeon_group_id(78);
}
impl dungeon_group_id {
    pub const DGROUP_TEMPORAL_TOWER_SE5: dungeon_group_id = dungeon_group_id(79);
}
impl dungeon_group_id {
    pub const DGROUP_DUSK_FOREST_SE5: dungeon_group_id = dungeon_group_id(80);
}
impl dungeon_group_id {
    pub const DGROUP_SPACIAL_CLIFFS: dungeon_group_id = dungeon_group_id(81);
}
impl dungeon_group_id {
    pub const DGROUP_DARK_ICE_MOUNTAIN: dungeon_group_id = dungeon_group_id(82);
}
impl dungeon_group_id {
    pub const DGROUP_ICICLE_FOREST: dungeon_group_id = dungeon_group_id(83);
}
impl dungeon_group_id {
    pub const DGROUP_VAST_ICE_MOUNTAIN: dungeon_group_id = dungeon_group_id(84);
}
impl dungeon_group_id {
    pub const DGROUP_SOUTHERN_JUNGLE: dungeon_group_id = dungeon_group_id(85);
}
impl dungeon_group_id {
    pub const DGROUP_BOULDER_QUARRY: dungeon_group_id = dungeon_group_id(86);
}
impl dungeon_group_id {
    pub const DGROUP_RIGHT_CAVE_PATH: dungeon_group_id = dungeon_group_id(87);
}
impl dungeon_group_id {
    pub const DGROUP_LEFT_CAVE_PATH: dungeon_group_id = dungeon_group_id(88);
}
impl dungeon_group_id {
    pub const DGROUP_LIMESTONE_CAVERN: dungeon_group_id = dungeon_group_id(89);
}
impl dungeon_group_id {
    pub const DGROUP_SPRING_CAVE: dungeon_group_id = dungeon_group_id(90);
}
impl dungeon_group_id {
    pub const DGROUP_STAR_CAVE: dungeon_group_id = dungeon_group_id(91);
}
impl dungeon_group_id {
    pub const DGROUP_LITTLE_PLAINS: dungeon_group_id = dungeon_group_id(92);
}
impl dungeon_group_id {
    pub const DGROUP_MT_CLEAR: dungeon_group_id = dungeon_group_id(93);
}
impl dungeon_group_id {
    pub const DGROUP_CHALLENGE_RIVER: dungeon_group_id = dungeon_group_id(94);
}
impl dungeon_group_id {
    pub const DGROUP_TRIAL_FOREST: dungeon_group_id = dungeon_group_id(95);
}
impl dungeon_group_id {
    pub const DGROUP_GUIDING_SEA: dungeon_group_id = dungeon_group_id(96);
}
impl dungeon_group_id {
    pub const DGROUP_HIDDEN_SHOPKEEPER_VILLAGE: dungeon_group_id = dungeon_group_id(97);
}
impl dungeon_group_id {
    pub const DGROUP_DUMMY_0x62: dungeon_group_id = dungeon_group_id(98);
}
impl dungeon_group_id {
    pub const DGROUP_DUMMY_0x63: dungeon_group_id = dungeon_group_id(99);
}
#[repr(transparent)]
#[derive(Clone, Hash, PartialEq, Eq)]
pub struct dungeon_group_id(pub(crate) crate::ctypes::c_uint);
#[repr(C, packed)]
pub struct dungeon_group_id_8 {
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 1usize]>,
}
impl dungeon_group_id_8 {
    #[inline]
    pub fn val(&self) -> dungeon_group_id {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(0usize, 8u8) as u32) }
    }
    #[inline]
    pub fn set_val(&mut self, val: dungeon_group_id) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(0usize, 8u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(val: dungeon_group_id) -> __BindgenBitfieldUnit<[u8; 1usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 1usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 8u8, {
            let val: u32 = unsafe { ::core::mem::transmute(val) };
            val as u64
        });
        __bindgen_bitfield_unit
    }
}
pub mod music_id {
    pub type Type = crate::ctypes::c_uint;
    pub const MUSIC_NONE_0x0: Type = 0;
    pub const MUSIC_POKEMON_EXPLORATION_TEAM_THEME: Type = 1;
    pub const MUSIC_TOP_MENU_THEME: Type = 2;
    pub const MUSIC_MAROWAK_DOJO: Type = 3;
    pub const MUSIC_THE_GATEKEEPERS: Type = 4;
    pub const MUSIC_JOB_CLEAR: Type = 5;
    pub const MUSIC_WELCOME_TO_THE_WORLD_OF_POKEMON: Type = 6;
    pub const MUSIC_WIGGLYTUFFS_GUILD: Type = 7;
    pub const MUSIC_WIGGLYTUFFS_GUILD_REMIX: Type = 8;
    pub const MUSIC_TREASURE_TOWN: Type = 9;
    pub const MUSIC_DO_YOUR_BEST_AS_ALWAYS: Type = 10;
    pub const MUSIC_MONSTER_HOUSE: Type = 11;
    pub const MUSIC_KECLEONS_SHOP: Type = 12;
    pub const MUSIC_OUTLAW: Type = 13;
    pub const MUSIC_IN_THE_DEPTHS_OF_THE_PIT: Type = 14;
    pub const MUSIC_BOSS_BATTLE: Type = 15;
    pub const MUSIC_DIALGAS_FIGHT_TO_THE_FINISH: Type = 16;
    pub const MUSIC_BATTLE_AGAINST_DUSKNOIR: Type = 17;
    pub const MUSIC_DEFY_THE_LEGENDS: Type = 18;
    pub const MUSIC_MISSION_FAILURE: Type = 19;
    pub const MUSIC_MISSION_SUCCESS: Type = 20;
    pub const MUSIC_BEACH_CAVE: Type = 21;
    pub const MUSIC_DRENCHED_BLUFF: Type = 22;
    pub const MUSIC_MT_BRISTLE: Type = 23;
    pub const MUSIC_WATERFALL_CAVE: Type = 24;
    pub const MUSIC_APPLE_WOODS: Type = 25;
    pub const MUSIC_CRAGGY_COAST: Type = 26;
    pub const MUSIC_CAVE_AND_SIDE_PATH: Type = 27;
    pub const MUSIC_MT_HORN: Type = 28;
    pub const MUSIC_FOGGY_FOREST: Type = 29;
    pub const MUSIC_STEAM_CAVE: Type = 30;
    pub const MUSIC_UPPER_STEAM_CAVE: Type = 31;
    pub const MUSIC_AMP_PLAINS: Type = 32;
    pub const MUSIC_FAR_AMP_PLAINS: Type = 33;
    pub const MUSIC_NORTHERN_DESERT: Type = 34;
    pub const MUSIC_QUICKSAND_CAVE: Type = 35;
    pub const MUSIC_QUICKSAND_PIT: Type = 36;
    pub const MUSIC_CRYSTAL_CAVE: Type = 37;
    pub const MUSIC_CRYSTAL_CROSSING: Type = 38;
    pub const MUSIC_CHASM_CAVE: Type = 39;
    pub const MUSIC_DARK_HILL: Type = 40;
    pub const MUSIC_SEALED_RUIN: Type = 41;
    pub const MUSIC_DEEP_SEALED_RUIN: Type = 42;
    pub const MUSIC_DUSK_FOREST: Type = 43;
    pub const MUSIC_DEEP_DUSK_FOREST: Type = 44;
    pub const MUSIC_RANDOM_DUNGEON_THEME_2: Type = 45;
    pub const MUSIC_BRINE_CAVE: Type = 46;
    pub const MUSIC_LOWER_BRINE_CAVE: Type = 47;
    pub const MUSIC_HIDDEN_LAND: Type = 48;
    pub const MUSIC_HIDDEN_HIGHLAND: Type = 49;
    pub const MUSIC_TEMPORAL_TOWER: Type = 50;
    pub const MUSIC_TEMPORAL_SPIRE: Type = 51;
    pub const MUSIC_MYSTIFYING_FOREST: Type = 52;
    pub const MUSIC_BLIZZARD_ISLAND_RESCUE_TEAM_MEDLEY: Type = 53;
    pub const MUSIC_SURROUNDED_SEA: Type = 54;
    pub const MUSIC_RANDOM_DUNGEON_THEME_1: Type = 55;
    pub const MUSIC_AEGIS_CAVE: Type = 56;
    pub const MUSIC_CONCEALED_RUINS: Type = 57;
    pub const MUSIC_MT_TRAVAIL: Type = 58;
    pub const MUSIC_IN_THE_NIGHTMARE: Type = 59;
    pub const MUSIC_MIRACLE_SEA: Type = 60;
    pub const MUSIC_TREESHROUD_FOREST: Type = 61;
    pub const MUSIC_DARK_CRATER: Type = 62;
    pub const MUSIC_DEEP_DARK_CRATER: Type = 63;
    pub const MUSIC_INTRO_ALTERNATE_UNUSED: Type = 64;
    pub const MUSIC_PERFECT_SENTRY_DUTY: Type = 65;
    pub const MUSIC_GOOD_SENTRY_DUTY: Type = 66;
    pub const MUSIC_DECENT_SENTRY_DUTY: Type = 67;
    pub const MUSIC_FAILED_SENTRY_DUTY: Type = 68;
    pub const MUSIC_ON_THE_BEACH_AT_DUSK: Type = 69;
    pub const MUSIC_GOODNIGHT: Type = 70;
    pub const MUSIC_GOODNIGHT_ALTERNATE_UNUSED: Type = 71;
    pub const MUSIC_AT_THE_END_OF_THE_DAY: Type = 72;
    pub const MUSIC_GUILDMASTER_WIGGLYTUFF: Type = 73;
    pub const MUSIC_GROWING_ANXIETY: Type = 74;
    pub const MUSIC_THE_POWER_OF_DARKNESS: Type = 75;
    pub const MUSIC_OH_NO: Type = 76;
    pub const MUSIC_TIME_GEAR: Type = 77;
    pub const MUSIC_TIME_GEAR_REMIX: Type = 78;
    pub const MUSIC_I_SAW_SOMETHING_AGAIN: Type = 79;
    pub const MUSIC_IN_THE_FUTURE: Type = 80;
    pub const MUSIC_PLANETS_PARALYSIS: Type = 81;
    pub const MUSIC_THROUGH_THE_SEA_OF_TIME: Type = 82;
    pub const MUSIC_IN_THE_HANDS_OF_FATE: Type = 83;
    pub const MUSIC_TIME_RESTORED: Type = 84;
    pub const MUSIC_DONT_EVER_FORGET: Type = 85;
    pub const MUSIC_A_WISH_FOR_PEACE: Type = 86;
    pub const MUSIC_ON_THE_BEACH_AT_DUSK_INTRO_ONLY: Type = 87;
    pub const MUSIC_MEMORIES_RETURNED: Type = 88;
    pub const MUSIC_ENDING_THEME_INTRO: Type = 89;
    pub const MUSIC_ENDING_THEME: Type = 90;
    pub const MUSIC_EPILOGUE_THEME: Type = 91;
    pub const MUSIC_TITLE_THEME_ALTERNATE_1_UNUSED: Type = 92;
    pub const MUSIC_TITLE_THEME_ALTERNATE_2_UNUSED: Type = 93;
    pub const MUSIC_MURKY_FOREST: Type = 94;
    pub const MUSIC_SKY_PEAK_CAVE: Type = 95;
    pub const MUSIC_SOUTHERN_JUNGLE: Type = 96;
    pub const MUSIC_SKY_PEAK_COAST: Type = 97;
    pub const MUSIC_SPRING_CAVE: Type = 98;
    pub const MUSIC_LOWER_SPRING_CAVE: Type = 99;
    pub const MUSIC_OCEAN_SFX: Type = 100;
    pub const MUSIC_THUNDERSTORM_SFX: Type = 101;
    pub const MUSIC_THUNDERSTORM_MUFFLED_SFX: Type = 102;
    pub const MUSIC_RUMBLING_SFX: Type = 103;
    pub const MUSIC_RUMBLING_LOUDER_SFX: Type = 104;
    pub const MUSIC_RUMBLING_LOUDEST_SFX: Type = 105;
    pub const MUSIC_RUNNING_HOT_WATER_SFX: Type = 106;
    pub const MUSIC_TEMPORAL_PINNACLE_SFX: Type = 107;
    pub const MUSIC_TEMPORAL_PINNACLE: Type = 108;
    pub const MUSIC_NULL_0x6D: Type = 109;
    pub const MUSIC_HEAVY_FOOTSTEPS_SFX: Type = 110;
    pub const MUSIC_SINGLE_TONE_RINGING_SFX: Type = 111;
    pub const MUSIC_ELECTRICITY_SFX_1: Type = 112;
    pub const MUSIC_ELECTRICITY_SFX_2: Type = 113;
    pub const MUSIC_ELECTRICITY_SFX_3: Type = 114;
    pub const MUSIC_FIRE_CRACKLING_SFX_1: Type = 115;
    pub const MUSIC_FIRE_CRACKLING_SFX_2: Type = 116;
    pub const MUSIC_RELIC_FRAGMENT_SFX: Type = 117;
    pub const MUSIC_RAINBOW_STONESHIP_SFX: Type = 118;
    pub const MUSIC_RAINBOW_STONESHIP_PREPARING_SFX: Type = 119;
    pub const MUSIC_HUMMING_SFX: Type = 120;
    pub const MUSIC_HAVE_TO_GET_HOME: Type = 121;
    pub const MUSIC_FARTHER_AWAY: Type = 122;
    pub const MUSIC_PALKIAS_ONSLAUGHT: Type = 123;
    pub const MUSIC_NONE_0x7C: Type = 124;
    pub const MUSIC_WATERFALL_SFX: Type = 125;
    pub const MUSIC_EATING_SFX: Type = 126;
    pub const MUSIC_OMINOUS_STRING_NOTE_SFX: Type = 127;
    pub const MUSIC_FLOOD_SFX: Type = 128;
    pub const MUSIC_PELIPPER_ISLAND: Type = 129;
    pub const MUSIC_TITLE_THEME: Type = 130;
    pub const MUSIC_HEARTWARMING: Type = 131;
    pub const MUSIC_DOWN_A_DARK_PATH: Type = 132;
    pub const MUSIC_RISING_FEAR: Type = 133;
    pub const MUSIC_TEAM_SKULL: Type = 134;
    pub const MUSIC_SYMPATHY: Type = 135;
    pub const MUSIC_BEYOND_THE_DREAM: Type = 136;
    pub const MUSIC_AIR_OF_UNEASE: Type = 137;
    pub const MUSIC_ONE_FOR_ALL: Type = 138;
    pub const MUSIC__ALL_FOR_ONE: Type = 139;
    pub const MUSIC_BOULDER_QUARRY: Type = 140;
    pub const MUSIC_SPRING_CAVE_DEPTHS: Type = 141;
    pub const MUSIC_STAR_CAVE: Type = 142;
    pub const MUSIC_DEEP_STAR_CAVE: Type = 143;
    pub const MUSIC_LIMESTONE_CAVE: Type = 144;
    pub const MUSIC_DEEP_LIMESTONE_CAVE: Type = 145;
    pub const MUSIC_RANDOM_DUNGEON_THEME_3: Type = 146;
    pub const MUSIC_FORTUNE_RAVINE: Type = 147;
    pub const MUSIC_FORTUNE_RAVINE_DEPTHS: Type = 148;
    pub const MUSIC_BARREN_VALLEY: Type = 149;
    pub const MUSIC_DARK_WASTELAND: Type = 150;
    pub const MUSIC_SPACIAL_CLIFFS: Type = 151;
    pub const MUSIC_DARK_ICE_MOUNTAIN: Type = 152;
    pub const MUSIC_ICICLE_FOREST: Type = 153;
    pub const MUSIC_VAST_ICE_MOUNTAIN: Type = 154;
    pub const MUSIC_VAST_ICE_MOUNTAIN_PEAK: Type = 155;
    pub const MUSIC_SKY_PEAK_FOREST: Type = 156;
    pub const MUSIC_SKY_PEAK_PRAIRIE: Type = 157;
    pub const MUSIC_SKY_PEAK_SNOWFIELD: Type = 158;
    pub const MUSIC_SKY_PEAK_FINAL_PASS: Type = 159;
    pub const MUSIC_SPINDAS_CAFE: Type = 160;
    pub const MUSIC_LUDICOLO_DANCE: Type = 161;
    pub const MUSIC_ILLUSION_STONE_CHAMBER: Type = 162;
    pub const MUSIC_IT_CANT_BE: Type = 163;
    pub const MUSIC_DEFEND_GLOBE: Type = 164;
    pub const MUSIC_DEFEND_GLOBE_ENDING: Type = 165;
    pub const MUSIC_TEAM_CHARMS_THEME: Type = 166;
    pub const MUSIC_HERE_COMES_TEAM_CHARM: Type = 167;
    pub const MUSIC_FOR_A_NEW_LIFE: Type = 168;
    pub const MUSIC_LIVING_SPIRIT: Type = 169;
    pub const MUSIC_PROUD_ACCOMPLISHMENT: Type = 170;
    pub const MUSIC_IN_THE_MORNING_SUN: Type = 171;
    pub const MUSIC_A_NEW_WORLD: Type = 172;
    pub const MUSIC_THOUGHTS_FOR_FRIENDS: Type = 173;
    pub const MUSIC_LIFE_GOES_ON_ENDING: Type = 174;
    pub const MUSIC_ITS_NOT_A_MIRACLE: Type = 175;
    pub const MUSIC_A_MESSAGE_ON_THE_WIND: Type = 176;
    pub const MUSIC_A_FUN_EXPLORATION: Type = 177;
    pub const MUSIC_SHAYMIN_VILLAGE: Type = 178;
    pub const MUSIC_TEAM_CHARMS_THEME_INTRO_ONLY: Type = 179;
    pub const MUSIC_RUMBLING_SFX_4: Type = 180;
    pub const MUSIC_RUMBLING_SFX_5: Type = 181;
    pub const MUSIC_OCEAN_MUFFLED_SFX: Type = 182;
    pub const MUSIC_WIND_SFX_1: Type = 183;
    pub const MUSIC_LIMESTONE_CAVERN_DEPTHS_SFX: Type = 184;
    pub const MUSIC_FIRE_CRACKLING_SFX_3: Type = 185;
    pub const MUSIC_SKY_PEAK_8TH_STATION_CLEARING_SFX: Type = 186;
    pub const MUSIC_WIND_AND_RAIN_SFX: Type = 187;
    pub const MUSIC_VAST_ICE_MOUNTAIN_PINNACLE_SFX: Type = 188;
    pub const MUSIC_SPRING_CAVE_SFX: Type = 189;
    pub const MUSIC_WIND_SFX_2: Type = 190;
    pub const MUSIC_SOUTHERN_JUNGLE_EXIT_SFX: Type = 191;
    pub const MUSIC_BOULDER_QUARRY_CLEARING_SFX: Type = 192;
    pub const MUSIC_WATERFALL_CAVE_VISION_SFX: Type = 193;
    pub const MUSIC_WIND_SFX_3: Type = 194;
    pub const MUSIC_NULL_0xC2: Type = 195;
    pub const MUSIC_NULL_0xC3: Type = 196;
    pub const MUSIC_NULL_0xC4: Type = 197;
    pub const MUSIC_NULL_0xC5: Type = 198;
    pub const MUSIC_NULL_0xC6: Type = 199;
    pub const MUSIC_TEAM_CHARMS_THEME_ALTERNATE_1_UNUSED: Type = 200;
    pub const MUSIC_TEAM_CHARM_JINGLE: Type = 201;
    pub const MUSIC_TEAM_CHARMS_THEME_ALTERNATE_2_UNUSED: Type = 202;
    pub const MUSIC_NONE_0x3E7: Type = 999;
}
#[repr(C)]
#[repr(align(2))]
pub struct music_id_16 {
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 2usize]>,
}
impl music_id_16 {
    #[inline]
    pub fn val(&self) -> music_id::Type {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(0usize, 16u8) as u32) }
    }
    #[inline]
    pub fn set_val(&mut self, val: music_id::Type) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(0usize, 16u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(val: music_id::Type) -> __BindgenBitfieldUnit<[u8; 2usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 2usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 16u8, {
            let val: u32 = unsafe { ::core::mem::transmute(val) };
            val as u64
        });
        __bindgen_bitfield_unit
    }
}
impl iq_skill_id {
    pub const IQ_NONE: iq_skill_id = iq_skill_id(0);
}
impl iq_skill_id {
    pub const IQ_TYPE_ADVANTAGE_MASTER: iq_skill_id = iq_skill_id(1);
}
impl iq_skill_id {
    pub const IQ_ITEM_CATCHER: iq_skill_id = iq_skill_id(2);
}
impl iq_skill_id {
    pub const IQ_COURSE_CHECKER: iq_skill_id = iq_skill_id(3);
}
impl iq_skill_id {
    pub const IQ_SURE_HIT_ATTACKER: iq_skill_id = iq_skill_id(4);
}
impl iq_skill_id {
    pub const IQ_QUICK_DODGER: iq_skill_id = iq_skill_id(5);
}
impl iq_skill_id {
    pub const IQ_PP_CHECKER: iq_skill_id = iq_skill_id(6);
}
impl iq_skill_id {
    pub const IQ_NONTRAITOR: iq_skill_id = iq_skill_id(7);
}
impl iq_skill_id {
    pub const IQ_STATUS_CHECKER: iq_skill_id = iq_skill_id(8);
}
impl iq_skill_id {
    pub const IQ_EXP_GO_GETTER: iq_skill_id = iq_skill_id(9);
}
impl iq_skill_id {
    pub const IQ_EFFICIENCY_EXPERT: iq_skill_id = iq_skill_id(10);
}
impl iq_skill_id {
    pub const IQ_WEAK_TYPE_PICKER: iq_skill_id = iq_skill_id(11);
}
impl iq_skill_id {
    pub const IQ_ALL_TERRAIN_HIKER: iq_skill_id = iq_skill_id(12);
}
impl iq_skill_id {
    pub const IQ_ABSOLUTE_MOVER: iq_skill_id = iq_skill_id(13);
}
impl iq_skill_id {
    pub const IQ_TRAP_AVOIDER: iq_skill_id = iq_skill_id(14);
}
impl iq_skill_id {
    pub const IQ_HOUSE_AVOIDER: iq_skill_id = iq_skill_id(15);
}
impl iq_skill_id {
    pub const IQ_ENERGY_SAVER: iq_skill_id = iq_skill_id(16);
}
impl iq_skill_id {
    pub const IQ_NONSLEEPER: iq_skill_id = iq_skill_id(17);
}
impl iq_skill_id {
    pub const IQ_SELF_CURER: iq_skill_id = iq_skill_id(18);
}
impl iq_skill_id {
    pub const IQ_TRAP_SEER: iq_skill_id = iq_skill_id(19);
}
impl iq_skill_id {
    pub const IQ_LAVA_EVADER: iq_skill_id = iq_skill_id(20);
}
impl iq_skill_id {
    pub const IQ_DEDICATED_TRAVELER: iq_skill_id = iq_skill_id(21);
}
impl iq_skill_id {
    pub const IQ_ITEM_MASTER: iq_skill_id = iq_skill_id(22);
}
impl iq_skill_id {
    pub const IQ_EXCLUSIVE_MOVE_USER: iq_skill_id = iq_skill_id(23);
}
impl iq_skill_id {
    pub const IQ_ESCAPIST: iq_skill_id = iq_skill_id(24);
}
impl iq_skill_id {
    pub const IQ_LOCK_PICKER: iq_skill_id = iq_skill_id(25);
}
impl iq_skill_id {
    pub const IQ_STAIR_SENSOR: iq_skill_id = iq_skill_id(26);
}
impl iq_skill_id {
    pub const IQ_COIN_WATCHER: iq_skill_id = iq_skill_id(27);
}
impl iq_skill_id {
    pub const IQ_EXP_ELITE: iq_skill_id = iq_skill_id(28);
}
impl iq_skill_id {
    pub const IQ_SHARPSHOOTER: iq_skill_id = iq_skill_id(29);
}
impl iq_skill_id {
    pub const IQ_FAST_FRIEND: iq_skill_id = iq_skill_id(30);
}
impl iq_skill_id {
    pub const IQ_PP_SAVER: iq_skill_id = iq_skill_id(31);
}
impl iq_skill_id {
    pub const IQ_BODYGUARD: iq_skill_id = iq_skill_id(32);
}
impl iq_skill_id {
    pub const IQ_CAUTIOUS_CREEPER: iq_skill_id = iq_skill_id(33);
}
impl iq_skill_id {
    pub const IQ_AGGRESSOR: iq_skill_id = iq_skill_id(34);
}
impl iq_skill_id {
    pub const IQ_DEFENDER: iq_skill_id = iq_skill_id(35);
}
impl iq_skill_id {
    pub const IQ_INTIMIDATOR: iq_skill_id = iq_skill_id(36);
}
impl iq_skill_id {
    pub const IQ_SURVIVALIST: iq_skill_id = iq_skill_id(37);
}
impl iq_skill_id {
    pub const IQ_TRAP_BUSTER: iq_skill_id = iq_skill_id(38);
}
impl iq_skill_id {
    pub const IQ_COUNTER_HITTER: iq_skill_id = iq_skill_id(39);
}
impl iq_skill_id {
    pub const IQ_EXTRA_STRIKER: iq_skill_id = iq_skill_id(40);
}
impl iq_skill_id {
    pub const IQ_HIT_AND_RUNNER: iq_skill_id = iq_skill_id(41);
}
impl iq_skill_id {
    pub const IQ_PARRY_EXPERT: iq_skill_id = iq_skill_id(42);
}
impl iq_skill_id {
    pub const IQ_QUICK_STRIKER: iq_skill_id = iq_skill_id(43);
}
impl iq_skill_id {
    pub const IQ_NO_CHARGER: iq_skill_id = iq_skill_id(44);
}
impl iq_skill_id {
    pub const IQ_WARY_FIGHTER: iq_skill_id = iq_skill_id(45);
}
impl iq_skill_id {
    pub const IQ_GAP_PROBER: iq_skill_id = iq_skill_id(46);
}
impl iq_skill_id {
    pub const IQ_POWER_PITCHER: iq_skill_id = iq_skill_id(47);
}
impl iq_skill_id {
    pub const IQ_CONCENTRATOR: iq_skill_id = iq_skill_id(48);
}
impl iq_skill_id {
    pub const IQ_COUNTER_BASHER: iq_skill_id = iq_skill_id(49);
}
impl iq_skill_id {
    pub const IQ_CHEERLEADER: iq_skill_id = iq_skill_id(50);
}
impl iq_skill_id {
    pub const IQ_NATURE_GIFTER: iq_skill_id = iq_skill_id(51);
}
impl iq_skill_id {
    pub const IQ_WISE_HEALER: iq_skill_id = iq_skill_id(52);
}
impl iq_skill_id {
    pub const IQ_QUICK_HEALER: iq_skill_id = iq_skill_id(53);
}
impl iq_skill_id {
    pub const IQ_ACUTE_SNIFFER: iq_skill_id = iq_skill_id(54);
}
impl iq_skill_id {
    pub const IQ_DEEP_BREATHER: iq_skill_id = iq_skill_id(55);
}
impl iq_skill_id {
    pub const IQ_BRICK_TOUGH: iq_skill_id = iq_skill_id(56);
}
impl iq_skill_id {
    pub const IQ_MULTITALENT: iq_skill_id = iq_skill_id(57);
}
impl iq_skill_id {
    pub const IQ_TIME_TRIPPER: iq_skill_id = iq_skill_id(58);
}
impl iq_skill_id {
    pub const IQ_ERRATIC_PLAYER: iq_skill_id = iq_skill_id(59);
}
impl iq_skill_id {
    pub const IQ_PRACTICE_SWINGER: iq_skill_id = iq_skill_id(60);
}
impl iq_skill_id {
    pub const IQ_NO_DEFEATIST: iq_skill_id = iq_skill_id(61);
}
impl iq_skill_id {
    pub const IQ_HAGGLER: iq_skill_id = iq_skill_id(62);
}
impl iq_skill_id {
    pub const IQ_CLUTCH_PERFORMER: iq_skill_id = iq_skill_id(63);
}
impl iq_skill_id {
    pub const IQ_CRITICAL_DODGER: iq_skill_id = iq_skill_id(64);
}
impl iq_skill_id {
    pub const IQ_MAP_SURVEYOR: iq_skill_id = iq_skill_id(65);
}
impl iq_skill_id {
    pub const IQ_PIERCE_HURLER: iq_skill_id = iq_skill_id(66);
}
impl iq_skill_id {
    pub const IQ_COLLECTOR: iq_skill_id = iq_skill_id(67);
}
impl iq_skill_id {
    pub const IQ_TRUE_POWERIST: iq_skill_id = iq_skill_id(68);
}
#[repr(transparent)]
#[derive(Clone, Hash, PartialEq, Eq)]
pub struct iq_skill_id(pub(crate) crate::ctypes::c_uint);
impl iq_group_id {
    pub const IQ_GROUP_A: iq_group_id = iq_group_id(0);
}
impl iq_group_id {
    pub const IQ_GROUP_B: iq_group_id = iq_group_id(1);
}
impl iq_group_id {
    pub const IQ_GROUP_C: iq_group_id = iq_group_id(2);
}
impl iq_group_id {
    pub const IQ_GROUP_D: iq_group_id = iq_group_id(3);
}
impl iq_group_id {
    pub const IQ_GROUP_E: iq_group_id = iq_group_id(4);
}
impl iq_group_id {
    pub const IQ_GROUP_F: iq_group_id = iq_group_id(5);
}
impl iq_group_id {
    pub const IQ_GROUP_G: iq_group_id = iq_group_id(6);
}
impl iq_group_id {
    pub const IQ_GROUP_H: iq_group_id = iq_group_id(7);
}
impl iq_group_id {
    pub const IQ_GROUP_UNUSED_0x8: iq_group_id = iq_group_id(8);
}
impl iq_group_id {
    pub const IQ_GROUP_UNUSED_0x9: iq_group_id = iq_group_id(9);
}
impl iq_group_id {
    pub const IQ_GROUP_I: iq_group_id = iq_group_id(10);
}
impl iq_group_id {
    pub const IQ_GROUP_J: iq_group_id = iq_group_id(11);
}
impl iq_group_id {
    pub const IQ_GROUP_UNUSED_0xC: iq_group_id = iq_group_id(12);
}
impl iq_group_id {
    pub const IQ_GROUP_UNUSED_0xD: iq_group_id = iq_group_id(13);
}
impl iq_group_id {
    pub const IQ_GROUP_UNUSED_0xE: iq_group_id = iq_group_id(14);
}
impl iq_group_id {
    pub const IQ_GROUP_NONE: iq_group_id = iq_group_id(15);
}
#[repr(transparent)]
#[derive(Clone, Hash, PartialEq, Eq)]
pub struct iq_group_id(pub(crate) crate::ctypes::c_uint);
pub mod monster_gender {
    pub type Type = crate::ctypes::c_uint;
    pub const GENDER_INVALID: Type = 0;
    pub const GENDER_MALE: Type = 1;
    pub const GENDER_FEMALE: Type = 2;
    pub const GENDER_GENDERLESS: Type = 3;
}
pub mod direction_id {
    pub type Type = crate::ctypes::c_int;
    pub const DIR_NONE: Type = -1;
    pub const DIR_DOWN: Type = 0;
    pub const DIR_DOWN_RIGHT: Type = 1;
    pub const DIR_RIGHT: Type = 2;
    pub const DIR_UP_RIGHT: Type = 3;
    pub const DIR_UP: Type = 4;
    pub const DIR_UP_LEFT: Type = 5;
    pub const DIR_LEFT: Type = 6;
    pub const DIR_DOWN_LEFT: Type = 7;
    pub const DIR_CURRENT: Type = 8;
}
#[repr(C, packed)]
pub struct direction_id_8 {
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 1usize]>,
}
impl direction_id_8 {
    #[inline]
    pub fn val(&self) -> direction_id::Type {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(0usize, 8u8) as u32) }
    }
    #[inline]
    pub fn set_val(&mut self, val: direction_id::Type) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(0usize, 8u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(val: direction_id::Type) -> __BindgenBitfieldUnit<[u8; 1usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 1usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 8u8, {
            let val: u32 = unsafe { ::core::mem::transmute(val) };
            val as u64
        });
        __bindgen_bitfield_unit
    }
}
pub mod terrain_type {
    pub type Type = crate::ctypes::c_uint;
    pub const TERRAIN_WALL: Type = 0;
    pub const TERRAIN_NORMAL: Type = 1;
    pub const TERRAIN_SECONDARY: Type = 2;
    pub const TERRAIN_CHASM: Type = 3;
}
pub mod secondary_terrain_type {
    pub type Type = crate::ctypes::c_uint;
    pub const SECONDARY_TERRAIN_WATER: Type = 0;
    pub const SECONDARY_TERRAIN_LAVA: Type = 1;
    pub const SECONDARY_TERRAIN_CHASM: Type = 2;
}
#[repr(C, packed)]
pub struct secondary_terrain_type_8 {
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 1usize]>,
}
impl secondary_terrain_type_8 {
    #[inline]
    pub fn val(&self) -> secondary_terrain_type::Type {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(0usize, 8u8) as u32) }
    }
    #[inline]
    pub fn set_val(&mut self, val: secondary_terrain_type::Type) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(0usize, 8u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        val: secondary_terrain_type::Type,
    ) -> __BindgenBitfieldUnit<[u8; 1usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 1usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 8u8, {
            let val: u32 = unsafe { ::core::mem::transmute(val) };
            val as u64
        });
        __bindgen_bitfield_unit
    }
}
pub mod mobility_type {
    pub type Type = crate::ctypes::c_uint;
    pub const MOBILITY_NORMAL: Type = 0;
    pub const MOBILITY_SECONDARY: Type = 1;
    pub const MOBILITY_HOVERING: Type = 2;
    pub const MOBILITY_INTANGIBLE: Type = 3;
    pub const MOBILITY_LAVA: Type = 4;
    pub const MOBILITY_WATER: Type = 5;
}
pub mod entity_type {
    pub type Type = crate::ctypes::c_uint;
    pub const ENTITY_NOTHING: Type = 0;
    pub const ENTITY_MONSTER: Type = 1;
    pub const ENTITY_TRAP: Type = 2;
    pub const ENTITY_ITEM: Type = 3;
    pub const ENTITY_HIDDEN_STAIRS: Type = 5;
    pub const ENTITY_TEMPORARY: Type = 6;
}
pub mod trap_id {
    pub type Type = crate::ctypes::c_uint;
    pub const TRAP_NULL_TRAP: Type = 0;
    pub const TRAP_MUD_TRAP: Type = 1;
    pub const TRAP_STICKY_TRAP: Type = 2;
    pub const TRAP_GRIMY_TRAP: Type = 3;
    pub const TRAP_SUMMON_TRAP: Type = 4;
    pub const TRAP_PITFALL_TRAP: Type = 5;
    pub const TRAP_WARP_TRAP: Type = 6;
    pub const TRAP_GUST_TRAP: Type = 7;
    pub const TRAP_SPIN_TRAP: Type = 8;
    pub const TRAP_SLUMBER_TRAP: Type = 9;
    pub const TRAP_SLOW_TRAP: Type = 10;
    pub const TRAP_SEAL_TRAP: Type = 11;
    pub const TRAP_POISON_TRAP: Type = 12;
    pub const TRAP_SELFDESTRUCT_TRAP: Type = 13;
    pub const TRAP_EXPLOSION_TRAP: Type = 14;
    pub const TRAP_PP_ZERO_TRAP: Type = 15;
    pub const TRAP_CHESTNUT_TRAP: Type = 16;
    pub const TRAP_WONDER_TILE: Type = 17;
    pub const TRAP_POKEMON_TRAP: Type = 18;
    pub const TRAP_SPIKED_TILE: Type = 19;
    pub const TRAP_STEALTH_ROCK: Type = 20;
    pub const TRAP_TOXIC_SPIKES: Type = 21;
    pub const TRAP_TRIP_TRAP: Type = 22;
    pub const TRAP_RANDOM_TRAP: Type = 23;
    pub const TRAP_GRUDGE_TRAP: Type = 24;
    pub const TRAP_NONE: Type = 25;
}
#[repr(C, packed)]
pub struct trap_id_8 {
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 1usize]>,
}
impl trap_id_8 {
    #[inline]
    pub fn val(&self) -> trap_id::Type {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(0usize, 8u8) as u32) }
    }
    #[inline]
    pub fn set_val(&mut self, val: trap_id::Type) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(0usize, 8u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(val: trap_id::Type) -> __BindgenBitfieldUnit<[u8; 1usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 1usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 8u8, {
            let val: u32 = unsafe { ::core::mem::transmute(val) };
            val as u64
        });
        __bindgen_bitfield_unit
    }
}
pub mod hidden_stairs_type {
    pub type Type = crate::ctypes::c_uint;
    pub const HIDDEN_STAIRS_NONE: Type = 0;
    pub const HIDDEN_STAIRS_SECRET_BAZAAR: Type = 1;
    pub const HIDDEN_STAIRS_SECRET_ROOM: Type = 2;
    pub const HIDDEN_STAIRS_RANDOM_SECRET_BAZAAR_OR_SECRET_ROOM: Type = 255;
}
pub mod warp_type {
    pub type Type = crate::ctypes::c_uint;
    pub const WARP_RANDOM: Type = 0;
    pub const WARP_STAIRS_2: Type = 1;
    pub const WARP_POSITION_FUZZY: Type = 2;
    pub const WARP_POSITION_EXACT: Type = 3;
    pub const WARP_STAIRS_3: Type = 4;
    pub const WARP_LEADER: Type = 5;
}
pub mod status_id {
    pub type Type = crate::ctypes::c_uint;
    pub const STATUS_NONE: Type = 0;
    pub const STATUS_SLEEP: Type = 1;
    pub const STATUS_SLEEPLESS: Type = 2;
    pub const STATUS_NIGHTMARE: Type = 3;
    pub const STATUS_YAWNING: Type = 4;
    pub const STATUS_NAPPING: Type = 5;
    pub const STATUS_LOW_HP: Type = 6;
    pub const STATUS_BURN: Type = 7;
    pub const STATUS_POISONED: Type = 8;
    pub const STATUS_BADLY_POISONED: Type = 9;
    pub const STATUS_PARALYSIS: Type = 10;
    pub const STATUS_IDENTIFYING: Type = 11;
    pub const STATUS_FROZEN: Type = 12;
    pub const STATUS_SHADOW_HOLD: Type = 13;
    pub const STATUS_WRAP: Type = 14;
    pub const STATUS_WRAPPED: Type = 15;
    pub const STATUS_INGRAIN: Type = 16;
    pub const STATUS_PETRIFIED: Type = 17;
    pub const STATUS_CONSTRICTION: Type = 18;
    pub const STATUS_FAMISHED: Type = 19;
    pub const STATUS_CRINGE: Type = 20;
    pub const STATUS_CONFUSED: Type = 21;
    pub const STATUS_PAUSED: Type = 22;
    pub const STATUS_COWERING: Type = 23;
    pub const STATUS_TAUNTED: Type = 24;
    pub const STATUS_ENCORE: Type = 25;
    pub const STATUS_INFATUATED: Type = 26;
    pub const STATUS_DOUBLE_SPEED: Type = 27;
    pub const STATUS_BIDE: Type = 28;
    pub const STATUS_SOLARBEAM: Type = 29;
    pub const STATUS_SKY_ATTACK: Type = 30;
    pub const STATUS_RAZOR_WIND: Type = 31;
    pub const STATUS_FOCUS_PUNCH: Type = 32;
    pub const STATUS_SKULL_BASH: Type = 33;
    pub const STATUS_FLYING: Type = 34;
    pub const STATUS_BOUNCING: Type = 35;
    pub const STATUS_DIVING: Type = 36;
    pub const STATUS_DIGGING: Type = 37;
    pub const STATUS_CHARGING: Type = 38;
    pub const STATUS_ENRAGED: Type = 39;
    pub const STATUS_SHADOW_FORCE: Type = 40;
    pub const STATUS_HALF_SPEED: Type = 41;
    pub const STATUS_REFLECT: Type = 42;
    pub const STATUS_SAFEGUARD: Type = 43;
    pub const STATUS_LIGHT_SCREEN: Type = 44;
    pub const STATUS_COUNTER: Type = 45;
    pub const STATUS_MAGIC_COAT: Type = 46;
    pub const STATUS_WISH: Type = 47;
    pub const STATUS_PROTECT: Type = 48;
    pub const STATUS_MIRROR_COAT: Type = 49;
    pub const STATUS_ENDURING: Type = 50;
    pub const STATUS_MINI_COUNTER: Type = 51;
    pub const STATUS_MIRROR_MOVE: Type = 52;
    pub const STATUS_CONVERSION2: Type = 53;
    pub const STATUS_VITAL_THROW: Type = 54;
    pub const STATUS_MIST: Type = 55;
    pub const STATUS_METAL_BURST: Type = 56;
    pub const STATUS_AQUA_RING: Type = 57;
    pub const STATUS_LUCKY_CHANT: Type = 58;
    pub const STATUS_WEAKENED: Type = 59;
    pub const STATUS_CURSED: Type = 60;
    pub const STATUS_DECOY: Type = 61;
    pub const STATUS_SNATCH: Type = 62;
    pub const STATUS_GASTRO_ACID: Type = 63;
    pub const STATUS_HEAL_BLOCK: Type = 64;
    pub const STATUS_EMBARGO: Type = 65;
    pub const STATUS_HUNGRY_PAL: Type = 66;
    pub const STATUS_LEECH_SEED: Type = 67;
    pub const STATUS_DESTINY_BOND: Type = 68;
    pub const STATUS_POWERED_UP: Type = 69;
    pub const STATUS_SURE_SHOT: Type = 70;
    pub const STATUS_WHIFFER: Type = 71;
    pub const STATUS_SET_DAMAGE: Type = 72;
    pub const STATUS_FOCUS_ENERGY: Type = 73;
    pub const STATUS_UNNAMED_0x4A: Type = 74;
    pub const STATUS_LONG_TOSS: Type = 75;
    pub const STATUS_PIERCE: Type = 76;
    pub const STATUS_UNNAMED_0x4D: Type = 77;
    pub const STATUS_INVISIBLE: Type = 78;
    pub const STATUS_TRANSFORMED: Type = 79;
    pub const STATUS_MOBILE: Type = 80;
    pub const STATUS_SLIP: Type = 81;
    pub const STATUS_UNNAMED_0x52: Type = 82;
    pub const STATUS_BLINKER: Type = 83;
    pub const STATUS_CROSS_EYED: Type = 84;
    pub const STATUS_EYEDROPS: Type = 85;
    pub const STATUS_DROPEYE: Type = 86;
    pub const STATUS_UNNAMED_0x57: Type = 87;
    pub const STATUS_MUZZLED: Type = 88;
    pub const STATUS_UNNAMED_0x59: Type = 89;
    pub const STATUS_MIRACLE_EYE: Type = 90;
    pub const STATUS_UNNAMED_0x5B: Type = 91;
    pub const STATUS_MAGNET_RISE: Type = 92;
    pub const STATUS_STOCKPILING: Type = 93;
    pub const STATUS_POWER_EARS: Type = 94;
    pub const STATUS_SCANNING: Type = 95;
    pub const STATUS_GRUDGE: Type = 96;
    pub const STATUS_EXPOSED: Type = 97;
    pub const STATUS_TERRIFIED: Type = 98;
    pub const STATUS_PERISH_SONG: Type = 99;
    pub const STATUS_DOUBLED_ATTACK: Type = 100;
    pub const STATUS_STAIR_SPOTTER: Type = 101;
}
pub mod tactic_id {
    pub type Type = crate::ctypes::c_uint;
    pub const TACTIC_LETS_GO_TOGETHER: Type = 0;
    pub const TACTIC_YOU_GO_THE_OTHER_WAY: Type = 1;
    pub const TACTIC_GO_AFTER_FOES: Type = 2;
    pub const TACTIC_AVOID_THE_FIRST_HIT: Type = 3;
    pub const TACTIC_ALL_FOR_ONE: Type = 4;
    pub const TACTIC_GROUP_SAFETY: Type = 5;
    pub const TACTIC_AVOID_TROUBLE: Type = 6;
    pub const TACTIC_BE_PATIENT: Type = 7;
    pub const TACTIC_KEEP_YOUR_DISTANCE: Type = 8;
    pub const TACTIC_WAIT_THERE: Type = 9;
    pub const TACTIC_GET_AWAY_FROM_HERE: Type = 10;
}
#[repr(C, packed)]
pub struct tactic_id_8 {
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 1usize]>,
}
impl tactic_id_8 {
    #[inline]
    pub fn val(&self) -> tactic_id::Type {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(0usize, 8u8) as u32) }
    }
    #[inline]
    pub fn set_val(&mut self, val: tactic_id::Type) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(0usize, 8u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(val: tactic_id::Type) -> __BindgenBitfieldUnit<[u8; 1usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 1usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 8u8, {
            let val: u32 = unsafe { ::core::mem::transmute(val) };
            val as u64
        });
        __bindgen_bitfield_unit
    }
}
pub mod shopkeeper_mode {
    pub type Type = crate::ctypes::c_uint;
    pub const SHOPKEEPER_MODE_NORMAL: Type = 0;
    pub const SHOPKEEPER_MODE_SHOPKEEPER: Type = 1;
    pub const SHOPKEEPER_MODE_ATTACK_ENEMIES: Type = 2;
    pub const SHOPKEEPER_MODE_ATTACK_TEAM: Type = 3;
}
#[repr(C, packed)]
pub struct shopkeeper_mode_8 {
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 1usize]>,
}
impl shopkeeper_mode_8 {
    #[inline]
    pub fn val(&self) -> shopkeeper_mode::Type {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(0usize, 8u8) as u32) }
    }
    #[inline]
    pub fn set_val(&mut self, val: shopkeeper_mode::Type) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(0usize, 8u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(val: shopkeeper_mode::Type) -> __BindgenBitfieldUnit<[u8; 1usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 1usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 8u8, {
            let val: u32 = unsafe { ::core::mem::transmute(val) };
            val as u64
        });
        __bindgen_bitfield_unit
    }
}
pub mod monster_behavior {
    pub type Type = crate::ctypes::c_uint;
    pub const BEHAVIOR_NORMAL_ENEMY_0x0: Type = 0;
    pub const BEHAVIOR_OUTLAW: Type = 1;
    pub const BEHAVIOR_HIDDEN_OUTLAW: Type = 2;
    pub const BEHAVIOR_FLEEING_OUTLAW: Type = 3;
    pub const BEHAVIOR_OUTLAW_TEAM_LEADER: Type = 4;
    pub const BEHAVIOR_OUTLAW_TEAM_MINION: Type = 5;
    pub const BEHAVIOR_FIXED_ENEMY: Type = 6;
    pub const BEHAVIOR_RESCUE_TARGET: Type = 7;
    pub const BEHAVIOR_WANDERING_ENEMY_0x8: Type = 8;
    pub const BEHAVIOR_NORMAL_ENEMY_0x9: Type = 9;
    pub const BEHAVIOR_ALLY: Type = 10;
    pub const BEHAVIOR_EXPLORER_MAZE_1: Type = 11;
    pub const BEHAVIOR_EXPLORER_MAZE_2: Type = 12;
    pub const BEHAVIOR_EXPLORER_MAZE_3: Type = 13;
    pub const BEHAVIOR_EXPLORER_MAZE_4: Type = 14;
    pub const BEHAVIOR_INVALID: Type = 15;
    pub const BEHAVIOR_SECRET_BAZAAR_KIRLIA: Type = 16;
    pub const BEHAVIOR_SECRET_BAZAAR_MIME_JR: Type = 17;
    pub const BEHAVIOR_SECRET_BAZAAR_SWALOT: Type = 18;
    pub const BEHAVIOR_SECRET_BAZAAR_LICKILICKY: Type = 19;
    pub const BEHAVIOR_SECRETE_BAZAAR_SHEDINJA: Type = 20;
    pub const BEHAVIOR_WANDERING_ENEMY_0x15: Type = 21;
}
#[repr(C, packed)]
pub struct monster_behavior_8 {
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 1usize]>,
}
impl monster_behavior_8 {
    #[inline]
    pub fn val(&self) -> monster_behavior::Type {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(0usize, 8u8) as u32) }
    }
    #[inline]
    pub fn set_val(&mut self, val: monster_behavior::Type) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(0usize, 8u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(val: monster_behavior::Type) -> __BindgenBitfieldUnit<[u8; 1usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 1usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 8u8, {
            let val: u32 = unsafe { ::core::mem::transmute(val) };
            val as u64
        });
        __bindgen_bitfield_unit
    }
}
pub mod ai_objective {
    pub type Type = crate::ctypes::c_uint;
    pub const AI_UNKNOWN: Type = 0;
    pub const AI_CHASE_TARGET: Type = 1;
    pub const AI_CHASE_REMEMBERED_TARGET: Type = 2;
    pub const AI_ROAM: Type = 3;
    pub const AI_LEAVE_ROOM: Type = 4;
    pub const AI_RUN_AWAY: Type = 5;
    pub const AI_STAND_STILL: Type = 6;
    pub const AI_TAKE_ITEM: Type = 7;
}
#[repr(C, packed)]
pub struct ai_objective_8 {
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 1usize]>,
}
impl ai_objective_8 {
    #[inline]
    pub fn val(&self) -> ai_objective::Type {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(0usize, 8u8) as u32) }
    }
    #[inline]
    pub fn set_val(&mut self, val: ai_objective::Type) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(0usize, 8u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(val: ai_objective::Type) -> __BindgenBitfieldUnit<[u8; 1usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 1usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 8u8, {
            let val: u32 = unsafe { ::core::mem::transmute(val) };
            val as u64
        });
        __bindgen_bitfield_unit
    }
}
pub mod action {
    pub type Type = crate::ctypes::c_uint;
    pub const ACTION_NOTHING: Type = 0;
    pub const ACTION_PASS_TURN: Type = 1;
    pub const ACTION_WALK: Type = 2;
    pub const ACTION_UNK_3: Type = 3;
    pub const ACTION_UNK_4: Type = 4;
    pub const ACTION_UNK_5: Type = 5;
    pub const ACTION_NEXT: Type = 6;
    pub const ACTION_PREVIOUS: Type = 7;
    pub const ACTION_PLACE_ITEM: Type = 8;
    pub const ACTION_PICK_UP_PLAYER: Type = 9;
    pub const ACTION_UNK_A: Type = 10;
    pub const ACTION_THROW_ITEM_PLAYER: Type = 11;
    pub const ACTION_CHECK_ITEM_DESCRIPTION: Type = 12;
    pub const ACTION_EAT_BERRY_SEED_DRINK: Type = 13;
    pub const ACTION_EAT_GUMMI: Type = 14;
    pub const ACTION_UNK_F: Type = 15;
    pub const ACTION_USE_TM: Type = 16;
    pub const ACTION_UNK_11: Type = 17;
    pub const ACTION_USE_ITEM: Type = 18;
    pub const ACTION_TALK_FIELD: Type = 19;
    pub const ACTION_USE_MOVE_PLAYER: Type = 20;
    pub const ACTION_USE_MOVE_AI: Type = 21;
    pub const ACTION_UNK_16: Type = 22;
    pub const ACTION_STRUGGLE: Type = 23;
    pub const ACTION_UNK_18: Type = 24;
    pub const ACTION_CHECK_MOVES: Type = 25;
    pub const ACTION_CHANGE_TACTICS: Type = 26;
    pub const ACTION_CHECK_SUMMARY: Type = 27;
    pub const ACTION_TALK_MENU: Type = 28;
    pub const ACTION_UNK_1D: Type = 29;
    pub const ACTION_SET_MOVE: Type = 30;
    pub const ACTION_SWITCH_MOVE: Type = 31;
    pub const ACTION_UNK_20: Type = 32;
    pub const ACTION_UNK_21: Type = 33;
    pub const ACTION_UNK_22: Type = 34;
    pub const ACTION_EAT_AI: Type = 35;
    pub const ACTION_THROW_ITEM_AI: Type = 36;
    pub const ACTION_UNK_25: Type = 37;
    pub const ACTION_USE_STAIRS: Type = 38;
    pub const ACTION_THROW_STRAIGHT_PLAYER: Type = 39;
    pub const ACTION_UNK_28: Type = 40;
    pub const ACTION_UNK_29: Type = 41;
    pub const ACTION_UNK_2A: Type = 42;
    pub const ACTION_QUICKSAVE: Type = 43;
    pub const ACTION_USE_LINK_BOX: Type = 44;
    pub const ACTION_UNK_2D: Type = 45;
    pub const ACTION_GIVE_UP: Type = 46;
    pub const ACTION_UNK_2F: Type = 47;
    pub const ACTION_VIEW_IQ: Type = 48;
    pub const ACTION_USE_ORB: Type = 49;
    pub const ACTION_REGULAR_ATTACK: Type = 50;
    pub const ACTION_UNSET_MOVE: Type = 51;
    pub const ACTION_SEND_HOME: Type = 52;
    pub const ACTION_UNK_35: Type = 53;
    pub const ACTION_GIVE_ITEM: Type = 54;
    pub const ACTION_TAKE_ITEM: Type = 35;
    pub const ACTION_UNK_38: Type = 36;
    pub const ACTION_SECOND_THOUGHTS: Type = 37;
    pub const ACTION_SWAP_ITEM: Type = 38;
    pub const ACTION_CHANGE_LEADER: Type = 39;
    pub const ACTION_SET_ITEM: Type = 40;
    pub const ACTION_UNSET_ITEM: Type = 41;
    pub const ACTION_UNK_3E: Type = 42;
    pub const ACTION_PICK_UP_AI: Type = 43;
    pub const ACTION_UNK_40: Type = 44;
    pub const ACTION_THROW_ARC_PLAYER: Type = 45;
}
#[repr(C)]
#[repr(align(2))]
pub struct action_16 {
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 2usize]>,
}
impl action_16 {
    #[inline]
    pub fn val(&self) -> action::Type {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(0usize, 16u8) as u32) }
    }
    #[inline]
    pub fn set_val(&mut self, val: action::Type) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(0usize, 16u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(val: action::Type) -> __BindgenBitfieldUnit<[u8; 2usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 2usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 16u8, {
            let val: u32 = unsafe { ::core::mem::transmute(val) };
            val as u64
        });
        __bindgen_bitfield_unit
    }
}
pub mod damage_source {
    pub type Type = crate::ctypes::c_uint;
    pub const DAMAGE_SOURCE_MOVE: Type = 0;
    pub const DAMAGE_SOURCE_BURN: Type = 1;
    pub const DAMAGE_SOURCE_CONSTRICTION: Type = 2;
    pub const DAMAGE_SOURCE_POISON: Type = 3;
    pub const DAMAGE_SOURCE_RECOIL_1: Type = 4;
    pub const DAMAGE_SOURCE_WRAP: Type = 5;
    pub const DAMAGE_SOURCE_COUNTER: Type = 6;
    pub const DAMAGE_SOURCE_CURSE: Type = 7;
    pub const DAMAGE_SOURCE_NIGHTMARE: Type = 8;
    pub const DAMAGE_SOURCE_LEECH_SEED: Type = 9;
    pub const DAMAGE_SOURCE_SPIKES: Type = 10;
    pub const DAMAGE_SOURCE_PERISH_SONG: Type = 11;
    pub const DAMAGE_SOURCE_DESTINY_BOND: Type = 12;
    pub const DAMAGE_SOURCE_SLUDGE: Type = 13;
    pub const DAMAGE_SOURCE_CHESTNUT_1: Type = 14;
    pub const DAMAGE_SOURCE_CHESTNUT_2: Type = 15;
    pub const DAMAGE_SOURCE_UNK16: Type = 16;
    pub const DAMAGE_SOURCE_BAD_WEATHER: Type = 17;
    pub const DAMAGE_SOURCE_MISSED_MOVE: Type = 18;
    pub const DAMAGE_SOURCE_RECOIL_2: Type = 19;
    pub const DAMAGE_SOURCE_STEALTH_ROCK: Type = 20;
    pub const DAMAGE_SOURCE_TOXIC_SPIKES: Type = 21;
    pub const DAMAGE_SOURCE_ALMOST_FAINTED: Type = 22;
    pub const DAMAGE_SOURCE_UNK_ABILITY: Type = 23;
    pub const DAMAGE_SOURCE_SOLAR_POWER: Type = 24;
    pub const DAMAGE_SOURCE_DRY_SKIN: Type = 25;
}
impl exclusive_item_effect_id {
    pub const EXCLUSIVE_EFF_STAT_BOOST: exclusive_item_effect_id = exclusive_item_effect_id(0);
}
impl exclusive_item_effect_id {
    pub const EXCLUSIVE_EFF_NO_PARALYSIS: exclusive_item_effect_id = exclusive_item_effect_id(1);
}
impl exclusive_item_effect_id {
    pub const EXCLUSIVE_EFF_NO_CONFUSION: exclusive_item_effect_id = exclusive_item_effect_id(2);
}
impl exclusive_item_effect_id {
    pub const EXCLUSIVE_EFF_NO_INFATUATION: exclusive_item_effect_id = exclusive_item_effect_id(3);
}
impl exclusive_item_effect_id {
    pub const EXCLUSIVE_EFF_NO_FREEZE: exclusive_item_effect_id = exclusive_item_effect_id(4);
}
impl exclusive_item_effect_id {
    pub const EXCLUSIVE_EFF_NO_CRITICAL_HITS: exclusive_item_effect_id =
        exclusive_item_effect_id(5);
}
impl exclusive_item_effect_id {
    pub const EXCLUSIVE_EFF_HALVED_EXPLOSION_DAMAGE: exclusive_item_effect_id =
        exclusive_item_effect_id(6);
}
impl exclusive_item_effect_id {
    pub const EXCLUSIVE_EFF_NO_EXPLOSION_DAMAGE: exclusive_item_effect_id =
        exclusive_item_effect_id(7);
}
impl exclusive_item_effect_id {
    pub const EXCLUSIVE_EFF_NO_MOVE_DISABLING: exclusive_item_effect_id =
        exclusive_item_effect_id(8);
}
impl exclusive_item_effect_id {
    pub const EXCLUSIVE_EFF_NO_WEATHER_DAMAGE: exclusive_item_effect_id =
        exclusive_item_effect_id(9);
}
impl exclusive_item_effect_id {
    pub const EXCLUSIVE_EFF_NO_SLEEP: exclusive_item_effect_id = exclusive_item_effect_id(10);
}
impl exclusive_item_effect_id {
    pub const EXCLUSIVE_EFF_MAY_POISON_PARALYZE_SLEEP_ATTACKERS: exclusive_item_effect_id =
        exclusive_item_effect_id(11);
}
impl exclusive_item_effect_id {
    pub const EXCLUSIVE_EFF_UNUSED_0xC: exclusive_item_effect_id = exclusive_item_effect_id(12);
}
impl exclusive_item_effect_id {
    pub const EXCLUSIVE_EFF_MAY_SLEEP_ATTACKERS: exclusive_item_effect_id =
        exclusive_item_effect_id(13);
}
impl exclusive_item_effect_id {
    pub const EXCLUSIVE_EFF_MAY_NIGHTMARE_ATTACKERS: exclusive_item_effect_id =
        exclusive_item_effect_id(14);
}
impl exclusive_item_effect_id {
    pub const EXCLUSIVE_EFF_MAY_BURN_ATTACKERS: exclusive_item_effect_id =
        exclusive_item_effect_id(15);
}
impl exclusive_item_effect_id {
    pub const EXCLUSIVE_EFF_MAY_PARALYZE_ATTACKERS: exclusive_item_effect_id =
        exclusive_item_effect_id(16);
}
impl exclusive_item_effect_id {
    pub const EXCLUSIVE_EFF_MAY_CONFUSE_ATTACKERS: exclusive_item_effect_id =
        exclusive_item_effect_id(17);
}
impl exclusive_item_effect_id {
    pub const EXCLUSIVE_EFF_MAY_INFATUATE_ATTACKERS: exclusive_item_effect_id =
        exclusive_item_effect_id(18);
}
impl exclusive_item_effect_id {
    pub const EXCLUSIVE_EFF_MAY_FREEZE_ATTACKERS: exclusive_item_effect_id =
        exclusive_item_effect_id(19);
}
impl exclusive_item_effect_id {
    pub const EXCLUSIVE_EFF_MAY_SHADOW_HOLD_ATTACKERS: exclusive_item_effect_id =
        exclusive_item_effect_id(20);
}
impl exclusive_item_effect_id {
    pub const EXCLUSIVE_EFF_MAY_CONSTRICT_ATTACKERS: exclusive_item_effect_id =
        exclusive_item_effect_id(21);
}
impl exclusive_item_effect_id {
    pub const EXCLUSIVE_EFF_MAY_CRINGE_ATTACKERS: exclusive_item_effect_id =
        exclusive_item_effect_id(22);
}
impl exclusive_item_effect_id {
    pub const EXCLUSIVE_EFF_MAY_BLINKER_ATTACKERS: exclusive_item_effect_id =
        exclusive_item_effect_id(23);
}
impl exclusive_item_effect_id {
    pub const EXCLUSIVE_EFF_MAY_SEAL_ATTACKER_MOVES: exclusive_item_effect_id =
        exclusive_item_effect_id(24);
}
impl exclusive_item_effect_id {
    pub const EXCLUSIVE_EFF_MAY_GO_INVISIBLE_WHEN_ATTACKED: exclusive_item_effect_id =
        exclusive_item_effect_id(25);
}
impl exclusive_item_effect_id {
    pub const EXCLUSIVE_EFF_MAY_BOOST_MOVEMENT_SPEED_WHEN_ATTACKED: exclusive_item_effect_id =
        exclusive_item_effect_id(26);
}
impl exclusive_item_effect_id {
    pub const EXCLUSIVE_EFF_MAY_WARP_WHEN_ATTACKED: exclusive_item_effect_id =
        exclusive_item_effect_id(27);
}
impl exclusive_item_effect_id {
    pub const EXCLUSIVE_EFF_MAY_PERISH_SONG_ATTACKERS: exclusive_item_effect_id =
        exclusive_item_effect_id(28);
}
impl exclusive_item_effect_id {
    pub const EXCLUSIVE_EFF_MAY_SLOW_ATTACKERS: exclusive_item_effect_id =
        exclusive_item_effect_id(29);
}
impl exclusive_item_effect_id {
    pub const EXCLUSIVE_EFF_HALVED_PHYSICAL_DAMAGE: exclusive_item_effect_id =
        exclusive_item_effect_id(30);
}
impl exclusive_item_effect_id {
    pub const EXCLUSIVE_EFF_HALVED_SPECIAL_DAMAGE: exclusive_item_effect_id =
        exclusive_item_effect_id(31);
}
impl exclusive_item_effect_id {
    pub const EXCLUSIVE_EFF_COUNTER_PHYSICAL_DAMAGE: exclusive_item_effect_id =
        exclusive_item_effect_id(32);
}
impl exclusive_item_effect_id {
    pub const EXCLUSIVE_EFF_MAY_BOUNCE_STATUS_MOVES: exclusive_item_effect_id =
        exclusive_item_effect_id(33);
}
impl exclusive_item_effect_id {
    pub const EXCLUSIVE_EFF_MAY_ENDURE: exclusive_item_effect_id = exclusive_item_effect_id(34);
}
impl exclusive_item_effect_id {
    pub const EXCLUSIVE_EFF_COUNTER_25_PCT_PHYSICAL_DAMAGE: exclusive_item_effect_id =
        exclusive_item_effect_id(35);
}
impl exclusive_item_effect_id {
    pub const EXCLUSIVE_EFF_LONG_TOSS: exclusive_item_effect_id = exclusive_item_effect_id(36);
}
impl exclusive_item_effect_id {
    pub const EXCLUSIVE_EFF_MAY_BOUNCE_MOVES: exclusive_item_effect_id =
        exclusive_item_effect_id(37);
}
impl exclusive_item_effect_id {
    pub const EXCLUSIVE_EFF_NO_STAT_DROPS: exclusive_item_effect_id = exclusive_item_effect_id(38);
}
impl exclusive_item_effect_id {
    pub const EXCLUSIVE_EFF_CONVERSION_2_WHEN_HIT: exclusive_item_effect_id =
        exclusive_item_effect_id(39);
}
impl exclusive_item_effect_id {
    pub const EXCLUSIVE_EFF_NO_STATUS_WHEN_CLEAR: exclusive_item_effect_id =
        exclusive_item_effect_id(40);
}
impl exclusive_item_effect_id {
    pub const EXCLUSIVE_EFF_NO_STATUS_WHEN_SUNNY: exclusive_item_effect_id =
        exclusive_item_effect_id(41);
}
impl exclusive_item_effect_id {
    pub const EXCLUSIVE_EFF_NO_STATUS_WHEN_SANDSTORM: exclusive_item_effect_id =
        exclusive_item_effect_id(42);
}
impl exclusive_item_effect_id {
    pub const EXCLUSIVE_EFF_NO_STATUS_WHEN_CLOUDY: exclusive_item_effect_id =
        exclusive_item_effect_id(43);
}
impl exclusive_item_effect_id {
    pub const EXCLUSIVE_EFF_NO_STATUS_WHEN_RAINY: exclusive_item_effect_id =
        exclusive_item_effect_id(44);
}
impl exclusive_item_effect_id {
    pub const EXCLUSIVE_EFF_NO_STATUS_WHEN_HAIL: exclusive_item_effect_id =
        exclusive_item_effect_id(45);
}
impl exclusive_item_effect_id {
    pub const EXCLUSIVE_EFF_NO_STATUS_WHEN_FOGGY: exclusive_item_effect_id =
        exclusive_item_effect_id(46);
}
impl exclusive_item_effect_id {
    pub const EXCLUSIVE_EFF_MOVEMENT_SPEED_BOOST_WHEN_CLEAR: exclusive_item_effect_id =
        exclusive_item_effect_id(47);
}
impl exclusive_item_effect_id {
    pub const EXCLUSIVE_EFF_MOVEMENT_SPEED_BOOST_WHEN_SUNNY: exclusive_item_effect_id =
        exclusive_item_effect_id(48);
}
impl exclusive_item_effect_id {
    pub const EXCLUSIVE_EFF_MOVEMENT_SPEED_BOOST_WHEN_SANDSTORM: exclusive_item_effect_id =
        exclusive_item_effect_id(49);
}
impl exclusive_item_effect_id {
    pub const EXCLUSIVE_EFF_MOVEMENT_SPEED_BOOST_WHEN_CLOUDY: exclusive_item_effect_id =
        exclusive_item_effect_id(50);
}
impl exclusive_item_effect_id {
    pub const EXCLUSIVE_EFF_MOVEMENT_SPEED_BOOST_WHEN_RAINY: exclusive_item_effect_id =
        exclusive_item_effect_id(51);
}
impl exclusive_item_effect_id {
    pub const EXCLUSIVE_EFF_MOVEMENT_SPEED_BOOST_WHEN_HAIL: exclusive_item_effect_id =
        exclusive_item_effect_id(52);
}
impl exclusive_item_effect_id {
    pub const EXCLUSIVE_EFF_MOVEMENT_SPEED_BOOST_WHEN_FOGGY: exclusive_item_effect_id =
        exclusive_item_effect_id(53);
}
impl exclusive_item_effect_id {
    pub const EXCLUSIVE_EFF_ATTACK_SPEED_BOOST_WHEN_CLEAR: exclusive_item_effect_id =
        exclusive_item_effect_id(54);
}
impl exclusive_item_effect_id {
    pub const EXCLUSIVE_EFF_ATTACK_SPEED_BOOST_WHEN_SUNNY: exclusive_item_effect_id =
        exclusive_item_effect_id(55);
}
impl exclusive_item_effect_id {
    pub const EXCLUSIVE_EFF_ATTACK_SPEED_BOOST_WHEN_SANDSTORM: exclusive_item_effect_id =
        exclusive_item_effect_id(56);
}
impl exclusive_item_effect_id {
    pub const EXCLUSIVE_EFF_ATTACK_SPEED_BOOST_WHEN_CLOUDY: exclusive_item_effect_id =
        exclusive_item_effect_id(57);
}
impl exclusive_item_effect_id {
    pub const EXCLUSIVE_EFF_ATTACK_SPEED_BOOST_WHEN_RAINY: exclusive_item_effect_id =
        exclusive_item_effect_id(58);
}
impl exclusive_item_effect_id {
    pub const EXCLUSIVE_EFF_ATTACK_SPEED_BOOST_WHEN_HAIL: exclusive_item_effect_id =
        exclusive_item_effect_id(59);
}
impl exclusive_item_effect_id {
    pub const EXCLUSIVE_EFF_ATTACK_SPEED_BOOST_WHEN_FOGGY: exclusive_item_effect_id =
        exclusive_item_effect_id(60);
}
impl exclusive_item_effect_id {
    pub const EXCLUSIVE_EFF_EVASION_BOOST_WHEN_CLEAR: exclusive_item_effect_id =
        exclusive_item_effect_id(61);
}
impl exclusive_item_effect_id {
    pub const EXCLUSIVE_EFF_EVASION_BOOST_WHEN_SUNNY: exclusive_item_effect_id =
        exclusive_item_effect_id(62);
}
impl exclusive_item_effect_id {
    pub const EXCLUSIVE_EFF_EVASION_BOOST_WHEN_SANDSTORM: exclusive_item_effect_id =
        exclusive_item_effect_id(63);
}
impl exclusive_item_effect_id {
    pub const EXCLUSIVE_EFF_EVASION_BOOST_WHEN_CLOUDY: exclusive_item_effect_id =
        exclusive_item_effect_id(64);
}
impl exclusive_item_effect_id {
    pub const EXCLUSIVE_EFF_EVASION_BOOST_WHEN_RAINY: exclusive_item_effect_id =
        exclusive_item_effect_id(65);
}
impl exclusive_item_effect_id {
    pub const EXCLUSIVE_EFF_EVASION_BOOST_WHEN_HAIL: exclusive_item_effect_id =
        exclusive_item_effect_id(66);
}
impl exclusive_item_effect_id {
    pub const EXCLUSIVE_EFF_EVASION_BOOST_WHEN_FOGGY: exclusive_item_effect_id =
        exclusive_item_effect_id(67);
}
impl exclusive_item_effect_id {
    pub const EXCLUSIVE_EFF_BYPASS_REFLECT_LIGHT_SCREEN: exclusive_item_effect_id =
        exclusive_item_effect_id(68);
}
impl exclusive_item_effect_id {
    pub const EXCLUSIVE_EFF_SCRAPPY: exclusive_item_effect_id = exclusive_item_effect_id(69);
}
impl exclusive_item_effect_id {
    pub const EXCLUSIVE_EFF_MIRACLE_EYE: exclusive_item_effect_id = exclusive_item_effect_id(70);
}
impl exclusive_item_effect_id {
    pub const EXCLUSIVE_EFF_RESTORE_PP_ON_NEW_FLOORS: exclusive_item_effect_id =
        exclusive_item_effect_id(71);
}
impl exclusive_item_effect_id {
    pub const EXCLUSIVE_EFF_RESTORE_HP_ON_NEW_FLOORS: exclusive_item_effect_id =
        exclusive_item_effect_id(72);
}
impl exclusive_item_effect_id {
    pub const EXCLUSIVE_EFF_INCREASED_HP_RECOVERY: exclusive_item_effect_id =
        exclusive_item_effect_id(73);
}
impl exclusive_item_effect_id {
    pub const EXCLUSIVE_EFF_MAX_PP_BOOST: exclusive_item_effect_id = exclusive_item_effect_id(74);
}
impl exclusive_item_effect_id {
    pub const EXCLUSIVE_EFF_UNUSED_0x4B: exclusive_item_effect_id = exclusive_item_effect_id(75);
}
impl exclusive_item_effect_id {
    pub const EXCLUSIVE_EFF_MAX_HP_BOOST: exclusive_item_effect_id = exclusive_item_effect_id(76);
}
impl exclusive_item_effect_id {
    pub const EXCLUSIVE_EFF_UNUSED_0x4D: exclusive_item_effect_id = exclusive_item_effect_id(77);
}
impl exclusive_item_effect_id {
    pub const EXCLUSIVE_EFF_UNUSED_0x4E: exclusive_item_effect_id = exclusive_item_effect_id(78);
}
impl exclusive_item_effect_id {
    pub const EXCLUSIVE_EFF_EXP_BOOST: exclusive_item_effect_id = exclusive_item_effect_id(79);
}
impl exclusive_item_effect_id {
    pub const EXCLUSIVE_EFF_EXP_FROM_DAMAGE: exclusive_item_effect_id =
        exclusive_item_effect_id(80);
}
impl exclusive_item_effect_id {
    pub const EXCLUSIVE_EFF_MAY_RESTORE_PP_FROM_DAMAGE: exclusive_item_effect_id =
        exclusive_item_effect_id(81);
}
impl exclusive_item_effect_id {
    pub const EXCLUSIVE_EFF_MAY_NOT_CONSUME_PP: exclusive_item_effect_id =
        exclusive_item_effect_id(82);
}
impl exclusive_item_effect_id {
    pub const EXCLUSIVE_EFF_THROWN_ITEM_PROTECTION: exclusive_item_effect_id =
        exclusive_item_effect_id(83);
}
impl exclusive_item_effect_id {
    pub const EXCLUSIVE_EFF_BOUNCE_THROWN_ITEMS: exclusive_item_effect_id =
        exclusive_item_effect_id(84);
}
impl exclusive_item_effect_id {
    pub const EXCLUSIVE_EFF_EXTEND_SELF_EFFECTS_TO_TEAM: exclusive_item_effect_id =
        exclusive_item_effect_id(85);
}
impl exclusive_item_effect_id {
    pub const EXCLUSIVE_EFF_MORE_TREASURE_DROPS: exclusive_item_effect_id =
        exclusive_item_effect_id(86);
}
impl exclusive_item_effect_id {
    pub const EXCLUSIVE_EFF_HP_DRAIN_RECOVERY_BOOST: exclusive_item_effect_id =
        exclusive_item_effect_id(87);
}
impl exclusive_item_effect_id {
    pub const EXCLUSIVE_EFF_PRESSURE_BOOST: exclusive_item_effect_id = exclusive_item_effect_id(88);
}
impl exclusive_item_effect_id {
    pub const EXCLUSIVE_EFF_NO_STATUS: exclusive_item_effect_id = exclusive_item_effect_id(89);
}
impl exclusive_item_effect_id {
    pub const EXCLUSIVE_EFF_HALVED_DAMAGE: exclusive_item_effect_id = exclusive_item_effect_id(90);
}
impl exclusive_item_effect_id {
    pub const EXCLUSIVE_EFF_DAMAGE_BOOST_50_PCT: exclusive_item_effect_id =
        exclusive_item_effect_id(91);
}
impl exclusive_item_effect_id {
    pub const EXCLUSIVE_EFF_ABSORB_TEAMMATE_POISON: exclusive_item_effect_id =
        exclusive_item_effect_id(92);
}
impl exclusive_item_effect_id {
    pub const EXCLUSIVE_EFF_RECOVER_HP_FROM_APPLES_AND_BERRIES: exclusive_item_effect_id =
        exclusive_item_effect_id(93);
}
impl exclusive_item_effect_id {
    pub const EXCLUSIVE_EFF_MORE_KECLEON_SHOPS: exclusive_item_effect_id =
        exclusive_item_effect_id(94);
}
impl exclusive_item_effect_id {
    pub const EXCLUSIVE_EFF_MORE_HIDDEN_STAIRS: exclusive_item_effect_id =
        exclusive_item_effect_id(95);
}
impl exclusive_item_effect_id {
    pub const EXCLUSIVE_EFF_NO_FRIENDLY_FIRE: exclusive_item_effect_id =
        exclusive_item_effect_id(96);
}
impl exclusive_item_effect_id {
    pub const EXCLUSIVE_EFF_PICKUP_BOOST: exclusive_item_effect_id = exclusive_item_effect_id(97);
}
impl exclusive_item_effect_id {
    pub const EXCLUSIVE_EFF_MORE_MONEY_DROPS: exclusive_item_effect_id =
        exclusive_item_effect_id(98);
}
impl exclusive_item_effect_id {
    pub const EXCLUSIVE_EFF_UNUSED_0x63: exclusive_item_effect_id = exclusive_item_effect_id(99);
}
impl exclusive_item_effect_id {
    pub const EXCLUSIVE_EFF_RECOVER_HP_FROM_WATERY_TERRAIN: exclusive_item_effect_id =
        exclusive_item_effect_id(100);
}
impl exclusive_item_effect_id {
    pub const EXCLUSIVE_EFF_HEAL_STATUS_FROM_WATERY_TERRAIN: exclusive_item_effect_id =
        exclusive_item_effect_id(101);
}
impl exclusive_item_effect_id {
    pub const EXCLUSIVE_EFF_NO_FIRE_DAMAGE: exclusive_item_effect_id =
        exclusive_item_effect_id(102);
}
impl exclusive_item_effect_id {
    pub const EXCLUSIVE_EFF_NO_WATER_DAMAGE: exclusive_item_effect_id =
        exclusive_item_effect_id(103);
}
impl exclusive_item_effect_id {
    pub const EXCLUSIVE_EFF_NO_GRASS_DAMAGE: exclusive_item_effect_id =
        exclusive_item_effect_id(104);
}
impl exclusive_item_effect_id {
    pub const EXCLUSIVE_EFF_NO_ELECTRIC_DAMAGE: exclusive_item_effect_id =
        exclusive_item_effect_id(105);
}
impl exclusive_item_effect_id {
    pub const EXCLUSIVE_EFF_NO_FIGHTING_DAMAGE: exclusive_item_effect_id =
        exclusive_item_effect_id(106);
}
impl exclusive_item_effect_id {
    pub const EXCLUSIVE_EFF_NO_GROUND_DAMAGE: exclusive_item_effect_id =
        exclusive_item_effect_id(107);
}
impl exclusive_item_effect_id {
    pub const EXCLUSIVE_EFF_NO_FLYING_DAMAGE: exclusive_item_effect_id =
        exclusive_item_effect_id(108);
}
impl exclusive_item_effect_id {
    pub const EXCLUSIVE_EFF_NO_PSYCHIC_DAMAGE: exclusive_item_effect_id =
        exclusive_item_effect_id(109);
}
impl exclusive_item_effect_id {
    pub const EXCLUSIVE_EFF_NO_GHOST_DAMAGE: exclusive_item_effect_id =
        exclusive_item_effect_id(110);
}
impl exclusive_item_effect_id {
    pub const EXCLUSIVE_EFF_NO_DRAGON_DAMAGE: exclusive_item_effect_id =
        exclusive_item_effect_id(111);
}
impl exclusive_item_effect_id {
    pub const EXCLUSIVE_EFF_NO_DARK_DAMAGE: exclusive_item_effect_id =
        exclusive_item_effect_id(112);
}
impl exclusive_item_effect_id {
    pub const EXCLUSIVE_EFF_NO_STEEL_DAMAGE: exclusive_item_effect_id =
        exclusive_item_effect_id(113);
}
impl exclusive_item_effect_id {
    pub const EXCLUSIVE_EFF_ABSORB_FIRE_DAMAGE: exclusive_item_effect_id =
        exclusive_item_effect_id(114);
}
impl exclusive_item_effect_id {
    pub const EXCLUSIVE_EFF_ABSORB_WATER_DAMAGE: exclusive_item_effect_id =
        exclusive_item_effect_id(115);
}
impl exclusive_item_effect_id {
    pub const EXCLUSIVE_EFF_ABSORB_GRASS_DAMAGE: exclusive_item_effect_id =
        exclusive_item_effect_id(116);
}
impl exclusive_item_effect_id {
    pub const EXCLUSIVE_EFF_ABSORB_ELECTRIC_DAMAGE: exclusive_item_effect_id =
        exclusive_item_effect_id(117);
}
impl exclusive_item_effect_id {
    pub const EXCLUSIVE_EFF_ABSORB_ICE_DAMAGE: exclusive_item_effect_id =
        exclusive_item_effect_id(118);
}
impl exclusive_item_effect_id {
    pub const EXCLUSIVE_EFF_ABSORB_FIGHTING_DAMAGE: exclusive_item_effect_id =
        exclusive_item_effect_id(119);
}
impl exclusive_item_effect_id {
    pub const EXCLUSIVE_EFF_ABSORB_GROUND_DAMAGE: exclusive_item_effect_id =
        exclusive_item_effect_id(120);
}
impl exclusive_item_effect_id {
    pub const EXCLUSIVE_EFF_ABSORB_FLYING_DAMAGE: exclusive_item_effect_id =
        exclusive_item_effect_id(121);
}
impl exclusive_item_effect_id {
    pub const EXCLUSIVE_EFF_ABSORB_PSYCHIC_DAMAGE: exclusive_item_effect_id =
        exclusive_item_effect_id(122);
}
impl exclusive_item_effect_id {
    pub const EXCLUSIVE_EFF_ABSORB_BUG_DAMAGE: exclusive_item_effect_id =
        exclusive_item_effect_id(123);
}
impl exclusive_item_effect_id {
    pub const EXCLUSIVE_EFF_ABSORB_ROCK_DAMAGE: exclusive_item_effect_id =
        exclusive_item_effect_id(124);
}
impl exclusive_item_effect_id {
    pub const EXCLUSIVE_EFF_ABSORB_GHOST_DAMAGE: exclusive_item_effect_id =
        exclusive_item_effect_id(125);
}
impl exclusive_item_effect_id {
    pub const EXCLUSIVE_EFF_ABSORB_DRAGON_DAMAGE: exclusive_item_effect_id =
        exclusive_item_effect_id(126);
}
impl exclusive_item_effect_id {
    pub const EXCLUSIVE_EFF_ABSORB_DARK_DAMAGE: exclusive_item_effect_id =
        exclusive_item_effect_id(127);
}
impl exclusive_item_effect_id {
    pub const EXCLUSIVE_EFF_ABSORB_STEEL_DAMAGE: exclusive_item_effect_id =
        exclusive_item_effect_id(128);
}
#[repr(transparent)]
#[derive(Clone, Hash, PartialEq, Eq)]
pub struct exclusive_item_effect_id(pub(crate) crate::ctypes::c_uint);
#[repr(C, packed)]
pub struct exclusive_item_effect_id_8 {
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 1usize]>,
}
impl exclusive_item_effect_id_8 {
    #[inline]
    pub fn val(&self) -> exclusive_item_effect_id {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(0usize, 8u8) as u32) }
    }
    #[inline]
    pub fn set_val(&mut self, val: exclusive_item_effect_id) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(0usize, 8u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(val: exclusive_item_effect_id) -> __BindgenBitfieldUnit<[u8; 1usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 1usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 8u8, {
            let val: u32 = unsafe { ::core::mem::transmute(val) };
            val as u64
        });
        __bindgen_bitfield_unit
    }
}
pub mod shop_item_positions {
    pub type Type = crate::ctypes::c_uint;
    pub const SHOP_POSITION_0: Type = 0;
    pub const SHOP_POSITION_1: Type = 1;
    pub const SHOP_POSITION_2: Type = 2;
    pub const SHOP_POSITION_3: Type = 3;
    pub const SHOP_POSITION_4: Type = 4;
    pub const SHOP_POSITION_5: Type = 5;
    pub const SHOP_POSITION_6: Type = 6;
    pub const SHOP_POSITION_7: Type = 7;
    pub const SHOP_POSITION_8: Type = 8;
    pub const SHOP_POSITION_9: Type = 9;
    pub const SHOP_POSITION_A: Type = 10;
    pub const SHOP_POSITION_B: Type = 11;
    pub const SHOP_POSITION_C: Type = 12;
    pub const SHOP_POSITION_D: Type = 13;
    pub const SHOP_POSITION_E: Type = 14;
    pub const SHOP_POSITION_F: Type = 15;
}
#[repr(C, packed)]
pub struct shop_item_positions_8 {
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 1usize]>,
}
impl shop_item_positions_8 {
    #[inline]
    pub fn val(&self) -> shop_item_positions::Type {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(0usize, 8u8) as u32) }
    }
    #[inline]
    pub fn set_val(&mut self, val: shop_item_positions::Type) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(0usize, 8u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(val: shop_item_positions::Type) -> __BindgenBitfieldUnit<[u8; 1usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 1usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 8u8, {
            let val: u32 = unsafe { ::core::mem::transmute(val) };
            val as u64
        });
        __bindgen_bitfield_unit
    }
}
pub mod weather_id {
    pub type Type = crate::ctypes::c_uint;
    pub const WEATHER_CLEAR: Type = 0;
    pub const WEATHER_SUNNY: Type = 1;
    pub const WEATHER_SANDSTORM: Type = 2;
    pub const WEATHER_CLOUDY: Type = 3;
    pub const WEATHER_RAIN: Type = 4;
    pub const WEATHER_HAIL: Type = 5;
    pub const WEATHER_FOG: Type = 6;
    pub const WEATHER_SNOW: Type = 7;
    pub const WEATHER_RANDOM: Type = 8;
}
#[repr(C, packed)]
pub struct weather_id_8 {
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 1usize]>,
}
impl weather_id_8 {
    #[inline]
    pub fn val(&self) -> weather_id::Type {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(0usize, 8u8) as u32) }
    }
    #[inline]
    pub fn set_val(&mut self, val: weather_id::Type) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(0usize, 8u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(val: weather_id::Type) -> __BindgenBitfieldUnit<[u8; 1usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 1usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 8u8, {
            let val: u32 = unsafe { ::core::mem::transmute(val) };
            val as u64
        });
        __bindgen_bitfield_unit
    }
}
pub mod floor_type {
    pub type Type = crate::ctypes::c_uint;
    pub const FLOOR_TYPE_NORMAL: Type = 0;
    pub const FLOOR_TYPE_FIXED: Type = 1;
    pub const FLOOR_TYPE_RESCUE: Type = 2;
}
pub mod dungeon_objective {
    pub type Type = crate::ctypes::c_uint;
    pub const OBJECTIVE_STORY: Type = 0;
    pub const OBJECTIVE_NORMAL: Type = 1;
    pub const OBJECTIVE_RESCUE: Type = 2;
    pub const OBJECTIVE_UNK_GAME_MODE_5: Type = 3;
}
#[repr(C, packed)]
pub struct dungeon_objective_8 {
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 1usize]>,
}
impl dungeon_objective_8 {
    #[inline]
    pub fn val(&self) -> dungeon_objective::Type {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(0usize, 8u8) as u32) }
    }
    #[inline]
    pub fn set_val(&mut self, val: dungeon_objective::Type) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(0usize, 8u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(val: dungeon_objective::Type) -> __BindgenBitfieldUnit<[u8; 1usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 1usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 8u8, {
            let val: u32 = unsafe { ::core::mem::transmute(val) };
            val as u64
        });
        __bindgen_bitfield_unit
    }
}
pub mod mission_type {
    pub type Type = crate::ctypes::c_uint;
    pub const MISSION_RESCUE_CLIENT: Type = 0;
    pub const MISSION_RESCUE_TARGET: Type = 1;
    pub const MISSION_ESCORT_TO_TARGET: Type = 2;
    pub const MISSION_EXPLORE_WITH_CLIENT: Type = 3;
    pub const MISSION_PROSPECT_WITH_CLIENT: Type = 4;
    pub const MISSION_GUIDE_CLIENT: Type = 5;
    pub const MISSION_FIND_ITEM: Type = 6;
    pub const MISSION_DELIVER_ITEM: Type = 7;
    pub const MISSION_SEARCH_FOR_TARGET: Type = 8;
    pub const MISSION_TAKE_ITEM_FROM_OUTLAW: Type = 9;
    pub const MISSION_ARREST_OUTLAW: Type = 10;
    pub const MISSION_CHALLENGE_REQUEST: Type = 11;
    pub const MISSION_TREASURE_MEMO: Type = 12;
}
#[repr(C, packed)]
pub struct mission_type_8 {
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 1usize]>,
}
impl mission_type_8 {
    #[inline]
    pub fn val(&self) -> mission_type::Type {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(0usize, 8u8) as u32) }
    }
    #[inline]
    pub fn set_val(&mut self, val: mission_type::Type) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(0usize, 8u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(val: mission_type::Type) -> __BindgenBitfieldUnit<[u8; 1usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 1usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 8u8, {
            let val: u32 = unsafe { ::core::mem::transmute(val) };
            val as u64
        });
        __bindgen_bitfield_unit
    }
}
pub mod mission_subtype_explore {
    pub type Type = crate::ctypes::c_uint;
    pub const MISSION_EXPLORE_NORMAL: Type = 0;
    pub const MISSION_EXPLORE_SEALED_CHAMBER: Type = 1;
    pub const MISSION_EXPLORE_GOLDEN_CHAMBER: Type = 2;
    pub const MISSION_EXPLORE_NEW_DUNGEON: Type = 3;
}
#[repr(C, packed)]
pub struct mission_subtype_explore_8 {
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 1usize]>,
}
impl mission_subtype_explore_8 {
    #[inline]
    pub fn val(&self) -> mission_subtype_explore::Type {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(0usize, 8u8) as u32) }
    }
    #[inline]
    pub fn set_val(&mut self, val: mission_subtype_explore::Type) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(0usize, 8u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        val: mission_subtype_explore::Type,
    ) -> __BindgenBitfieldUnit<[u8; 1usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 1usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 8u8, {
            let val: u32 = unsafe { ::core::mem::transmute(val) };
            val as u64
        });
        __bindgen_bitfield_unit
    }
}
pub mod mission_subtype_take_item {
    pub type Type = crate::ctypes::c_uint;
    pub const MISSION_TAKE_ITEM_NORMAL_OUTLAW: Type = 0;
    pub const MISSION_TAKE_ITEM_HIDDEN_OUTLAW: Type = 1;
    pub const MISSION_TAKE_ITEM_FLEEING_OUTLAW: Type = 2;
}
#[repr(C, packed)]
pub struct mission_subtype_take_item_8 {
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 1usize]>,
}
impl mission_subtype_take_item_8 {
    #[inline]
    pub fn val(&self) -> mission_subtype_take_item::Type {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(0usize, 8u8) as u32) }
    }
    #[inline]
    pub fn set_val(&mut self, val: mission_subtype_take_item::Type) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(0usize, 8u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        val: mission_subtype_take_item::Type,
    ) -> __BindgenBitfieldUnit<[u8; 1usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 1usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 8u8, {
            let val: u32 = unsafe { ::core::mem::transmute(val) };
            val as u64
        });
        __bindgen_bitfield_unit
    }
}
pub mod mission_subtype_outlaw {
    pub type Type = crate::ctypes::c_uint;
    pub const MISSION_OUTLAW_NORMAL_0: Type = 0;
    pub const MISSION_OUTLAW_NORMAL_1: Type = 1;
    pub const MISSION_OUTLAW_NORMAL_2: Type = 2;
    pub const MISSION_OUTLAW_NORMAL_3: Type = 3;
    pub const MISSION_OUTLAW_ESCORT: Type = 4;
    pub const MISSION_OUTLAW_FLEEING: Type = 5;
    pub const MISSION_OUTLAW_HIDEOUT: Type = 6;
    pub const MISSION_OUTLAW_MONSTER_HOUSE: Type = 7;
}
#[repr(C, packed)]
pub struct mission_subtype_outlaw_8 {
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 1usize]>,
}
impl mission_subtype_outlaw_8 {
    #[inline]
    pub fn val(&self) -> mission_subtype_outlaw::Type {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(0usize, 8u8) as u32) }
    }
    #[inline]
    pub fn set_val(&mut self, val: mission_subtype_outlaw::Type) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(0usize, 8u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        val: mission_subtype_outlaw::Type,
    ) -> __BindgenBitfieldUnit<[u8; 1usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 1usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 8u8, {
            let val: u32 = unsafe { ::core::mem::transmute(val) };
            val as u64
        });
        __bindgen_bitfield_unit
    }
}
pub mod mission_subtype_challenge {
    pub type Type = crate::ctypes::c_uint;
    pub const MISSION_CHALLENGE_NORMAL: Type = 0;
    pub const MISSION_CHALLENGE_MEWTWO: Type = 1;
    pub const MISSION_CHALLENGE_ENTEI: Type = 2;
    pub const MISSION_CHALLENGE_RAIKOU: Type = 3;
    pub const MISSION_CHALLENGE_SUICUNE: Type = 4;
    pub const MISSION_CHALLENGE_JIRACHI: Type = 5;
}
#[repr(C, packed)]
pub struct mission_subtype_challenge_8 {
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 1usize]>,
}
impl mission_subtype_challenge_8 {
    #[inline]
    pub fn val(&self) -> mission_subtype_challenge::Type {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(0usize, 8u8) as u32) }
    }
    #[inline]
    pub fn set_val(&mut self, val: mission_subtype_challenge::Type) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(0usize, 8u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        val: mission_subtype_challenge::Type,
    ) -> __BindgenBitfieldUnit<[u8; 1usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 1usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 8u8, {
            let val: u32 = unsafe { ::core::mem::transmute(val) };
            val as u64
        });
        __bindgen_bitfield_unit
    }
}
#[repr(C)]
pub struct mission_subtype {
    pub none: __BindgenUnionField<u8>,
    pub explore: __BindgenUnionField<mission_subtype_explore_8>,
    pub take_item: __BindgenUnionField<mission_subtype_take_item_8>,
    pub outlaw: __BindgenUnionField<mission_subtype_outlaw_8>,
    pub challenge: __BindgenUnionField<mission_subtype_challenge_8>,
    pub bindgen_union_field: u8,
}
pub mod mission_reward_type {
    pub type Type = crate::ctypes::c_uint;
    pub const MISSION_REWARD_MONEY: Type = 0;
    pub const MISSION_REWARD_MONEY_AND_MORE: Type = 1;
    pub const MISSION_REWARD_ITEM: Type = 2;
    pub const MISSION_REWARD_ITEM_AND_MORE: Type = 3;
    pub const MISSION_REWARD_ITEM_HIDDEN: Type = 4;
    pub const MISSION_REWARD_MONEY_HIDDEN: Type = 5;
    pub const MISSION_REWARD_SPECIAL: Type = 6;
}
#[repr(C, packed)]
pub struct mission_reward_type_8 {
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 1usize]>,
}
impl mission_reward_type_8 {
    #[inline]
    pub fn val(&self) -> mission_reward_type::Type {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(0usize, 8u8) as u32) }
    }
    #[inline]
    pub fn set_val(&mut self, val: mission_reward_type::Type) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(0usize, 8u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(val: mission_reward_type::Type) -> __BindgenBitfieldUnit<[u8; 1usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 1usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 8u8, {
            let val: u32 = unsafe { ::core::mem::transmute(val) };
            val as u64
        });
        __bindgen_bitfield_unit
    }
}
pub mod mission_restriction_type {
    pub type Type = crate::ctypes::c_uint;
    pub const MISSION_RESTRICTION_NONE: Type = 0;
    pub const MISSION_RESTRICTION_TYPE: Type = 1;
    pub const MISSION_RESTRICTION_MONSTER: Type = 2;
}
#[repr(C, packed)]
pub struct mission_restriction_type_8 {
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 1usize]>,
}
impl mission_restriction_type_8 {
    #[inline]
    pub fn val(&self) -> mission_restriction_type::Type {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(0usize, 8u8) as u32) }
    }
    #[inline]
    pub fn set_val(&mut self, val: mission_restriction_type::Type) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(0usize, 8u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        val: mission_restriction_type::Type,
    ) -> __BindgenBitfieldUnit<[u8; 1usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 1usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 8u8, {
            let val: u32 = unsafe { ::core::mem::transmute(val) };
            val as u64
        });
        __bindgen_bitfield_unit
    }
}
#[repr(C)]
pub struct mission_restriction {
    pub monster_id: __BindgenUnionField<monster_id_16>,
    pub type_id: __BindgenUnionField<type_id_8>,
    pub bindgen_union_field: u16,
}
pub mod mission_status {
    pub type Type = crate::ctypes::c_uint;
    pub const MISSION_STATUS_INVALID: Type = 0;
    pub const MISSION_STATUS_UNK_1: Type = 1;
    pub const MISSION_STATUS_UNK_2: Type = 2;
    pub const MISSION_STATUS_UNK_3: Type = 3;
    pub const MISSION_STATUS_SUSPENDED: Type = 4;
    pub const MISSION_STATUS_ACCEPTED: Type = 5;
    pub const MISSION_STATUS_DONE: Type = 6;
    pub const MISSION_STATUS_UNK_7: Type = 7;
    pub const MISSION_STATUS_UNK_8: Type = 8;
}
#[repr(C, packed)]
pub struct mission_status_8 {
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 1usize]>,
}
impl mission_status_8 {
    #[inline]
    pub fn val(&self) -> mission_status::Type {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(0usize, 8u8) as u32) }
    }
    #[inline]
    pub fn set_val(&mut self, val: mission_status::Type) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(0usize, 8u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(val: mission_status::Type) -> __BindgenBitfieldUnit<[u8; 1usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 1usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 8u8, {
            let val: u32 = unsafe { ::core::mem::transmute(val) };
            val as u64
        });
        __bindgen_bitfield_unit
    }
}
pub mod forced_loss_reason {
    pub type Type = crate::ctypes::c_uint;
    pub const FORCED_LOSS_NONE: Type = 0;
    pub const FORCED_LOSS_PARTNER_FAINTED: Type = 1;
    pub const FORCED_LOSS_CLIENT_FAINTED: Type = 2;
    pub const FORCED_LOSS_ESCORT_FAINTED: Type = 3;
    pub const FORCED_LOSS_CLIENT_CANT_JOIN: Type = 4;
}
pub mod floor_loop_status {
    pub type Type = crate::ctypes::c_uint;
    pub const FLOOR_LOOP_CONTINUE: Type = 0;
    pub const FLOOR_LOOP_LEADER_FAINTED: Type = 1;
    pub const FLOOR_LOOP_NEXT_FLOOR: Type = 2;
}
#[repr(C, packed)]
pub struct floor_loop_status_8 {
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 1usize]>,
}
impl floor_loop_status_8 {
    #[inline]
    pub fn val(&self) -> floor_loop_status::Type {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(0usize, 8u8) as u32) }
    }
    #[inline]
    pub fn set_val(&mut self, val: floor_loop_status::Type) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(0usize, 8u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(val: floor_loop_status::Type) -> __BindgenBitfieldUnit<[u8; 1usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 1usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 8u8, {
            let val: u32 = unsafe { ::core::mem::transmute(val) };
            val as u64
        });
        __bindgen_bitfield_unit
    }
}
impl fixed_room_id {
    pub const FIXED_NONE: fixed_room_id = fixed_room_id(0);
}
impl fixed_room_id {
    pub const FIXED_BEACH_CAVE_PIT: fixed_room_id = fixed_room_id(1);
}
impl fixed_room_id {
    pub const FIXED_MT_BRISTLE_PEAK: fixed_room_id = fixed_room_id(2);
}
impl fixed_room_id {
    pub const FIXED_STEAM_CAVE_PEAK: fixed_room_id = fixed_room_id(3);
}
impl fixed_room_id {
    pub const FIXED_AMP_CLEARING: fixed_room_id = fixed_room_id(4);
}
impl fixed_room_id {
    pub const FIXED_UNDERGROUND_LAKE: fixed_room_id = fixed_room_id(5);
}
impl fixed_room_id {
    pub const FIXED_CRYSTAL_LAKE: fixed_room_id = fixed_room_id(6);
}
impl fixed_room_id {
    pub const FIXED_SEALED_RUIN_PIT: fixed_room_id = fixed_room_id(7);
}
impl fixed_room_id {
    pub const FIXED_BRINE_CAVE_PIT: fixed_room_id = fixed_room_id(8);
}
impl fixed_room_id {
    pub const FIXED_OLD_RUINS: fixed_room_id = fixed_room_id(9);
}
impl fixed_room_id {
    pub const FIXED_TEMPORAL_PINNACLE: fixed_room_id = fixed_room_id(10);
}
impl fixed_room_id {
    pub const FIXED_MYSTIFYING_FOREST_CLEARING: fixed_room_id = fixed_room_id(11);
}
impl fixed_room_id {
    pub const FIXED_CREVICE_CAVE_PIT: fixed_room_id = fixed_room_id(12);
}
impl fixed_room_id {
    pub const FIXED_MIRACLE_SEABED: fixed_room_id = fixed_room_id(13);
}
impl fixed_room_id {
    pub const FIXED_REGICE_CHAMBER: fixed_room_id = fixed_room_id(14);
}
impl fixed_room_id {
    pub const FIXED_REGIROCK_CHAMBER: fixed_room_id = fixed_room_id(15);
}
impl fixed_room_id {
    pub const FIXED_REGISTEEL_CHAMBER: fixed_room_id = fixed_room_id(16);
}
impl fixed_room_id {
    pub const FIXED_REGIGIGAS_CHAMBER: fixed_room_id = fixed_room_id(17);
}
impl fixed_room_id {
    pub const FIXED_SPACIAL_RIFT_BOTTOM: fixed_room_id = fixed_room_id(18);
}
impl fixed_room_id {
    pub const FIXED_DARK_CRATER_PIT: fixed_room_id = fixed_room_id(19);
}
impl fixed_room_id {
    pub const FIXED_GIANT_VOLCANO_PEAK: fixed_room_id = fixed_room_id(20);
}
impl fixed_room_id {
    pub const FIXED_SHIMMER_DESERT_PIT: fixed_room_id = fixed_room_id(21);
}
impl fixed_room_id {
    pub const FIXED_MT_AVALANCHE_PEAK: fixed_room_id = fixed_room_id(22);
}
impl fixed_room_id {
    pub const FIXED_BOTTOMLESS_SEA_DEPTHS: fixed_room_id = fixed_room_id(23);
}
impl fixed_room_id {
    pub const FIXED_WORLD_ABYSS_PIT: fixed_room_id = fixed_room_id(24);
}
impl fixed_room_id {
    pub const FIXED_DEEP_MYSTERY_JUNGLE: fixed_room_id = fixed_room_id(25);
}
impl fixed_room_id {
    pub const FIXED_SKY_STAIRWAY_APEX: fixed_room_id = fixed_room_id(26);
}
impl fixed_room_id {
    pub const FIXED_EMPTY_OCTAGON: fixed_room_id = fixed_room_id(27);
}
impl fixed_room_id {
    pub const FIXED_SKY_PEAK_5TH_STATION_CLEARING: fixed_room_id = fixed_room_id(28);
}
impl fixed_room_id {
    pub const FIXED_SKY_PEAK_SUMMIT: fixed_room_id = fixed_room_id(29);
}
impl fixed_room_id {
    pub const FIXED_DEEP_STAR_CAVE_SE1: fixed_room_id = fixed_room_id(30);
}
impl fixed_room_id {
    pub const FIXED_STAR_CAVE_PIT_SE1: fixed_room_id = fixed_room_id(31);
}
impl fixed_room_id {
    pub const FIXED_FORTUNE_RAVINE_PIT: fixed_room_id = fixed_room_id(32);
}
impl fixed_room_id {
    pub const FIXED_BARREN_VALLEY_CLEARING: fixed_room_id = fixed_room_id(33);
}
impl fixed_room_id {
    pub const FIXED_BLACK_SWAMP: fixed_room_id = fixed_room_id(34);
}
impl fixed_room_id {
    pub const FIXED_DARK_ICE_MOUNTAIN_PINNACLE: fixed_room_id = fixed_room_id(35);
}
impl fixed_room_id {
    pub const FIXED_VAST_ICE_MOUNTAIN_PINNACLE: fixed_room_id = fixed_room_id(36);
}
impl fixed_room_id {
    pub const FIXED_BOULDER_QUARRY_CLEARING: fixed_room_id = fixed_room_id(37);
}
impl fixed_room_id {
    pub const FIXED_LIMESTONE_CAVERN_DEPTHS: fixed_room_id = fixed_room_id(38);
}
impl fixed_room_id {
    pub const FIXED_UPPER_SPRING_CAVE: fixed_room_id = fixed_room_id(39);
}
impl fixed_room_id {
    pub const FIXED_MIDDLE_SPRING_CAVE: fixed_room_id = fixed_room_id(40);
}
impl fixed_room_id {
    pub const FIXED_SPRING_CAVE_PIT: fixed_room_id = fixed_room_id(41);
}
impl fixed_room_id {
    pub const FIXED_DEEP_STAR_CAVE: fixed_room_id = fixed_room_id(42);
}
impl fixed_room_id {
    pub const FIXED_BARREN_VALLEY_CLEARING_REVISIT: fixed_room_id = fixed_room_id(43);
}
impl fixed_room_id {
    pub const FIXED_UNUSED_0x2C: fixed_room_id = fixed_room_id(44);
}
impl fixed_room_id {
    pub const FIXED_UNUSED_0x2D: fixed_room_id = fixed_room_id(45);
}
impl fixed_room_id {
    pub const FIXED_UNUSED_0x2E: fixed_room_id = fixed_room_id(46);
}
impl fixed_room_id {
    pub const FIXED_UNUSED_0x2F: fixed_room_id = fixed_room_id(47);
}
impl fixed_room_id {
    pub const FIXED_UNUSED_0x30: fixed_room_id = fixed_room_id(48);
}
impl fixed_room_id {
    pub const FIXED_UNUSED_0x31: fixed_room_id = fixed_room_id(49);
}
impl fixed_room_id {
    pub const FIXED_UNUSED_0x32: fixed_room_id = fixed_room_id(50);
}
impl fixed_room_id {
    pub const FIXED_UNUSED_0x33: fixed_room_id = fixed_room_id(51);
}
impl fixed_room_id {
    pub const FIXED_UNUSED_0x34: fixed_room_id = fixed_room_id(52);
}
impl fixed_room_id {
    pub const FIXED_UNUSED_0x35: fixed_room_id = fixed_room_id(53);
}
impl fixed_room_id {
    pub const FIXED_UNUSED_0x36: fixed_room_id = fixed_room_id(54);
}
impl fixed_room_id {
    pub const FIXED_UNUSED_0x37: fixed_room_id = fixed_room_id(55);
}
impl fixed_room_id {
    pub const FIXED_UNUSED_0x38: fixed_room_id = fixed_room_id(56);
}
impl fixed_room_id {
    pub const FIXED_UNUSED_0x39: fixed_room_id = fixed_room_id(57);
}
impl fixed_room_id {
    pub const FIXED_UNUSED_0x3A: fixed_room_id = fixed_room_id(58);
}
impl fixed_room_id {
    pub const FIXED_UNUSED_0x3B: fixed_room_id = fixed_room_id(59);
}
impl fixed_room_id {
    pub const FIXED_UNUSED_0x3C: fixed_room_id = fixed_room_id(60);
}
impl fixed_room_id {
    pub const FIXED_UNUSED_0x3D: fixed_room_id = fixed_room_id(61);
}
impl fixed_room_id {
    pub const FIXED_UNUSED_0x3E: fixed_room_id = fixed_room_id(62);
}
impl fixed_room_id {
    pub const FIXED_TEST: fixed_room_id = fixed_room_id(63);
}
impl fixed_room_id {
    pub const FIXED_EMPTY_RECTANGLE: fixed_room_id = fixed_room_id(64);
}
impl fixed_room_id {
    pub const FIXED_BEACH_CAVE_PIT_REVISIT: fixed_room_id = fixed_room_id(65);
}
impl fixed_room_id {
    pub const FIXED_MT_BRISTLE_PEAK_REVISIT: fixed_room_id = fixed_room_id(66);
}
impl fixed_room_id {
    pub const FIXED_STEAM_CAVE_PEAK_REVISIT: fixed_room_id = fixed_room_id(67);
}
impl fixed_room_id {
    pub const FIXED_AMP_CLEARING_REVISIT: fixed_room_id = fixed_room_id(68);
}
impl fixed_room_id {
    pub const FIXED_UNDERGROUND_LAKE_REVISIT: fixed_room_id = fixed_room_id(69);
}
impl fixed_room_id {
    pub const FIXED_CRYSTAL_LAKE_REVISIT: fixed_room_id = fixed_room_id(70);
}
impl fixed_room_id {
    pub const FIXED_SEALED_RUIN_PIT_REVISIT: fixed_room_id = fixed_room_id(71);
}
impl fixed_room_id {
    pub const FIXED_BRINE_CAVE_PIT_REVISIT: fixed_room_id = fixed_room_id(72);
}
impl fixed_room_id {
    pub const FIXED_OLD_RUINS_REVISIT: fixed_room_id = fixed_room_id(73);
}
impl fixed_room_id {
    pub const FIXED_TEMPORAL_PINNACLE_REVISIT: fixed_room_id = fixed_room_id(74);
}
impl fixed_room_id {
    pub const FIXED_REGIGIGAS_CHAMBER_REVISIT: fixed_room_id = fixed_room_id(75);
}
impl fixed_room_id {
    pub const FIXED_SPACIAL_RIFT_BOTTOM_REVISIT: fixed_room_id = fixed_room_id(76);
}
impl fixed_room_id {
    pub const FIXED_DARK_CRATER_PIT_REVISIT: fixed_room_id = fixed_room_id(77);
}
impl fixed_room_id {
    pub const FIXED_UNUSED_0x4E: fixed_room_id = fixed_room_id(78);
}
impl fixed_room_id {
    pub const FIXED_UNUSED_0x4F: fixed_room_id = fixed_room_id(79);
}
impl fixed_room_id {
    pub const FIXED_LABYRINTH_CAVE: fixed_room_id = fixed_room_id(80);
}
impl fixed_room_id {
    pub const FIXED_ZERO_ISLE_NORTH: fixed_room_id = fixed_room_id(81);
}
impl fixed_room_id {
    pub const FIXED_ZERO_ISLE_EAST: fixed_room_id = fixed_room_id(82);
}
impl fixed_room_id {
    pub const FIXED_ZERO_ISLE_WEST: fixed_room_id = fixed_room_id(83);
}
impl fixed_room_id {
    pub const FIXED_ZERO_ISLE_SOUTH: fixed_room_id = fixed_room_id(84);
}
impl fixed_room_id {
    pub const FIXED_ORAN_FOREST: fixed_room_id = fixed_room_id(85);
}
impl fixed_room_id {
    pub const FIXED_MARINE_RESORT: fixed_room_id = fixed_room_id(86);
}
impl fixed_room_id {
    pub const FIXED_SERENITY_RIVER: fixed_room_id = fixed_room_id(87);
}
impl fixed_room_id {
    pub const FIXED_LANDSLIDE_CAVE: fixed_room_id = fixed_room_id(88);
}
impl fixed_room_id {
    pub const FIXED_LUSH_PRAIRIE: fixed_room_id = fixed_room_id(89);
}
impl fixed_room_id {
    pub const FIXED_TINY_MEADOW: fixed_room_id = fixed_room_id(90);
}
impl fixed_room_id {
    pub const FIXED_SURROUNDED_SEA: fixed_room_id = fixed_room_id(91);
}
impl fixed_room_id {
    pub const FIXED_CONCEALED_RUINS: fixed_room_id = fixed_room_id(92);
}
impl fixed_room_id {
    pub const FIXED_LAKE_AFAR: fixed_room_id = fixed_room_id(93);
}
impl fixed_room_id {
    pub const FIXED_HAPPY_OUTLOOK: fixed_room_id = fixed_room_id(94);
}
impl fixed_room_id {
    pub const FIXED_MT_MISTRAL: fixed_room_id = fixed_room_id(95);
}
impl fixed_room_id {
    pub const FIXED_SHIMMER_HILL: fixed_room_id = fixed_room_id(96);
}
impl fixed_room_id {
    pub const FIXED_LOST_WILDERNESS: fixed_room_id = fixed_room_id(97);
}
impl fixed_room_id {
    pub const FIXED_MIDNIGHT_FOREST: fixed_room_id = fixed_room_id(98);
}
impl fixed_room_id {
    pub const FIXED_ZERO_ISLE_CENTER: fixed_room_id = fixed_room_id(99);
}
impl fixed_room_id {
    pub const FIXED_OBLIVION_FOREST: fixed_room_id = fixed_room_id(100);
}
impl fixed_room_id {
    pub const FIXED_TREACHEROUS_WATERS: fixed_room_id = fixed_room_id(101);
}
impl fixed_room_id {
    pub const FIXED_SOUTHEASTERN_ISLANDS: fixed_room_id = fixed_room_id(102);
}
impl fixed_room_id {
    pub const FIXED_INFERNO_CAVE: fixed_room_id = fixed_room_id(103);
}
impl fixed_room_id {
    pub const FIXED_MIDNIGHT_FOREST_COPY: fixed_room_id = fixed_room_id(104);
}
impl fixed_room_id {
    pub const FIXED_UNUSED_0x69: fixed_room_id = fixed_room_id(105);
}
impl fixed_room_id {
    pub const FIXED_UNUSED_0x6A: fixed_room_id = fixed_room_id(106);
}
impl fixed_room_id {
    pub const FIXED_UNUSED_0x6B: fixed_room_id = fixed_room_id(107);
}
impl fixed_room_id {
    pub const FIXED_UNUSED_0x6C: fixed_room_id = fixed_room_id(108);
}
impl fixed_room_id {
    pub const FIXED_UNUSED_0x6D: fixed_room_id = fixed_room_id(109);
}
impl fixed_room_id {
    pub const FIXED_SUBSTITUTE_ROOM: fixed_room_id = fixed_room_id(110);
}
impl fixed_room_id {
    pub const FIXED_GOLDEN_CHAMBER: fixed_room_id = fixed_room_id(111);
}
impl fixed_room_id {
    pub const FIXED_SECRET_BAZAAR: fixed_room_id = fixed_room_id(112);
}
impl fixed_room_id {
    pub const FIXED_SECRET_ROOM: fixed_room_id = fixed_room_id(113);
}
impl fixed_room_id {
    pub const FIXED_TREASURE_MEMO_0: fixed_room_id = fixed_room_id(114);
}
impl fixed_room_id {
    pub const FIXED_TREASURE_MEMO_1: fixed_room_id = fixed_room_id(115);
}
impl fixed_room_id {
    pub const FIXED_TREASURE_MEMO_2: fixed_room_id = fixed_room_id(116);
}
impl fixed_room_id {
    pub const FIXED_TREASURE_MEMO_3: fixed_room_id = fixed_room_id(117);
}
impl fixed_room_id {
    pub const FIXED_TREASURE_MEMO_4: fixed_room_id = fixed_room_id(118);
}
impl fixed_room_id {
    pub const FIXED_TREASURE_MEMO_5: fixed_room_id = fixed_room_id(119);
}
impl fixed_room_id {
    pub const FIXED_TREASURE_MEMO_6: fixed_room_id = fixed_room_id(120);
}
impl fixed_room_id {
    pub const FIXED_TREASURE_MEMO_7: fixed_room_id = fixed_room_id(121);
}
impl fixed_room_id {
    pub const FIXED_TREASURE_MEMO_8: fixed_room_id = fixed_room_id(122);
}
impl fixed_room_id {
    pub const FIXED_TREASURE_MEMO_9: fixed_room_id = fixed_room_id(123);
}
impl fixed_room_id {
    pub const FIXED_TREASURE_MEMO_10: fixed_room_id = fixed_room_id(124);
}
impl fixed_room_id {
    pub const FIXED_TREASURE_MEMO_11: fixed_room_id = fixed_room_id(125);
}
impl fixed_room_id {
    pub const FIXED_TREASURE_MEMO_12: fixed_room_id = fixed_room_id(126);
}
impl fixed_room_id {
    pub const FIXED_TREASURE_MEMO_13: fixed_room_id = fixed_room_id(127);
}
impl fixed_room_id {
    pub const FIXED_TREASURE_MEMO_14: fixed_room_id = fixed_room_id(128);
}
impl fixed_room_id {
    pub const FIXED_TREASURE_MEMO_15: fixed_room_id = fixed_room_id(129);
}
impl fixed_room_id {
    pub const FIXED_TREASURE_MEMO_16: fixed_room_id = fixed_room_id(130);
}
impl fixed_room_id {
    pub const FIXED_TREASURE_MEMO_17: fixed_room_id = fixed_room_id(131);
}
impl fixed_room_id {
    pub const FIXED_TREASURE_MEMO_18: fixed_room_id = fixed_room_id(132);
}
impl fixed_room_id {
    pub const FIXED_TREASURE_MEMO_19: fixed_room_id = fixed_room_id(133);
}
impl fixed_room_id {
    pub const FIXED_TREASURE_MEMO_20: fixed_room_id = fixed_room_id(134);
}
impl fixed_room_id {
    pub const FIXED_TREASURE_MEMO_21: fixed_room_id = fixed_room_id(135);
}
impl fixed_room_id {
    pub const FIXED_TREASURE_MEMO_22: fixed_room_id = fixed_room_id(136);
}
impl fixed_room_id {
    pub const FIXED_TREASURE_MEMO_23: fixed_room_id = fixed_room_id(137);
}
impl fixed_room_id {
    pub const FIXED_TREASURE_MEMO_24: fixed_room_id = fixed_room_id(138);
}
impl fixed_room_id {
    pub const FIXED_TREASURE_MEMO_25: fixed_room_id = fixed_room_id(139);
}
impl fixed_room_id {
    pub const FIXED_TREASURE_MEMO_26: fixed_room_id = fixed_room_id(140);
}
impl fixed_room_id {
    pub const FIXED_TREASURE_MEMO_27: fixed_room_id = fixed_room_id(141);
}
impl fixed_room_id {
    pub const FIXED_TREASURE_MEMO_28: fixed_room_id = fixed_room_id(142);
}
impl fixed_room_id {
    pub const FIXED_TREASURE_MEMO_29: fixed_room_id = fixed_room_id(143);
}
impl fixed_room_id {
    pub const FIXED_TREASURE_MEMO_30: fixed_room_id = fixed_room_id(144);
}
impl fixed_room_id {
    pub const FIXED_MEWTWO_CHALLENGE_FLOOR: fixed_room_id = fixed_room_id(145);
}
impl fixed_room_id {
    pub const FIXED_ENTEI_CHALLENGE_FLOOR: fixed_room_id = fixed_room_id(146);
}
impl fixed_room_id {
    pub const FIXED_RAIKOU_CHALLENGE_FLOOR: fixed_room_id = fixed_room_id(147);
}
impl fixed_room_id {
    pub const FIXED_SUICUNE_CHALLENGE_FLOOR: fixed_room_id = fixed_room_id(148);
}
impl fixed_room_id {
    pub const FIXED_STAR_CAVE_PIT: fixed_room_id = fixed_room_id(149);
}
impl fixed_room_id {
    pub const FIXED_CHALLENGE_LETTER_FLOOR_1: fixed_room_id = fixed_room_id(150);
}
impl fixed_room_id {
    pub const FIXED_CHALLENGE_LETTER_FLOOR_2: fixed_room_id = fixed_room_id(151);
}
impl fixed_room_id {
    pub const FIXED_CHALLENGE_LETTER_FLOOR_3: fixed_room_id = fixed_room_id(152);
}
impl fixed_room_id {
    pub const FIXED_CHALLENGE_LETTER_FLOOR_4: fixed_room_id = fixed_room_id(153);
}
impl fixed_room_id {
    pub const FIXED_CHALLENGE_LETTER_FLOOR_5: fixed_room_id = fixed_room_id(154);
}
impl fixed_room_id {
    pub const FIXED_UNUSED_0x9B: fixed_room_id = fixed_room_id(155);
}
impl fixed_room_id {
    pub const FIXED_UNUSED_0x9C: fixed_room_id = fixed_room_id(156);
}
impl fixed_room_id {
    pub const FIXED_UNUSED_0x9D: fixed_room_id = fixed_room_id(157);
}
impl fixed_room_id {
    pub const FIXED_UNUSED_0x9E: fixed_room_id = fixed_room_id(158);
}
impl fixed_room_id {
    pub const FIXED_UNUSED_0x9F: fixed_room_id = fixed_room_id(159);
}
impl fixed_room_id {
    pub const FIXED_OUTLAW_TEAM_FLOOR_1: fixed_room_id = fixed_room_id(160);
}
impl fixed_room_id {
    pub const FIXED_OUTLAW_TEAM_FLOOR_2: fixed_room_id = fixed_room_id(161);
}
impl fixed_room_id {
    pub const FIXED_OUTLAW_TEAM_FLOOR_3: fixed_room_id = fixed_room_id(162);
}
impl fixed_room_id {
    pub const FIXED_OUTLAW_TEAM_FLOOR_4: fixed_room_id = fixed_room_id(163);
}
impl fixed_room_id {
    pub const FIXED_OUTLAW_TEAM_FLOOR_5: fixed_room_id = fixed_room_id(164);
}
impl fixed_room_id {
    pub const FIXED_SEALED_CHAMBER: fixed_room_id = fixed_room_id(165);
}
impl fixed_room_id {
    pub const FIXED_UNUSED_0xA6: fixed_room_id = fixed_room_id(166);
}
impl fixed_room_id {
    pub const FIXED_UNUSED_0xA7: fixed_room_id = fixed_room_id(167);
}
impl fixed_room_id {
    pub const FIXED_UNUSED_0xA8: fixed_room_id = fixed_room_id(168);
}
impl fixed_room_id {
    pub const FIXED_UNUSED_0xA9: fixed_room_id = fixed_room_id(169);
}
impl fixed_room_id {
    pub const FIXED_CLEAR_SILK_CHAMBER: fixed_room_id = fixed_room_id(170);
}
impl fixed_room_id {
    pub const FIXED_ORANGE_SILK_CHAMBER: fixed_room_id = fixed_room_id(171);
}
impl fixed_room_id {
    pub const FIXED_GREEN_SILK_CHAMBER: fixed_room_id = fixed_room_id(172);
}
impl fixed_room_id {
    pub const FIXED_IRON_SILK_CHAMBER: fixed_room_id = fixed_room_id(173);
}
impl fixed_room_id {
    pub const FIXED_JOY_SEED_CHAMBER_6X: fixed_room_id = fixed_room_id(174);
}
impl fixed_room_id {
    pub const FIXED_FRIEND_BOW_CHAMBER: fixed_room_id = fixed_room_id(175);
}
impl fixed_room_id {
    pub const FIXED_PINK_SILK_CHAMBER: fixed_room_id = fixed_room_id(176);
}
impl fixed_room_id {
    pub const FIXED_GRAY_SILK_CHAMBER: fixed_room_id = fixed_room_id(177);
}
impl fixed_room_id {
    pub const FIXED_PURPLE_SILK_CHAMBER: fixed_room_id = fixed_room_id(178);
}
impl fixed_room_id {
    pub const FIXED_JOY_SEED_CHAMBER_1X: fixed_room_id = fixed_room_id(179);
}
impl fixed_room_id {
    pub const FIXED_ROYAL_SILK_CHAMBER: fixed_room_id = fixed_room_id(180);
}
impl fixed_room_id {
    pub const FIXED_MIRACLE_CHEST_CHAMBER: fixed_room_id = fixed_room_id(181);
}
impl fixed_room_id {
    pub const FIXED_BROWN_SILK_CHAMBER: fixed_room_id = fixed_room_id(182);
}
impl fixed_room_id {
    pub const FIXED_SKY_SILK_CHAMBER: fixed_room_id = fixed_room_id(183);
}
impl fixed_room_id {
    pub const FIXED_GOLD_SILK_CHAMBER: fixed_room_id = fixed_room_id(184);
}
impl fixed_room_id {
    pub const FIXED_BLACK_SILK_CHAMBER: fixed_room_id = fixed_room_id(185);
}
impl fixed_room_id {
    pub const FIXED_JOY_SEED_CHAMBER_2X: fixed_room_id = fixed_room_id(186);
}
impl fixed_room_id {
    pub const FIXED_WONDER_GUMMI_CHAMBER: fixed_room_id = fixed_room_id(187);
}
impl fixed_room_id {
    pub const FIXED_ITEM_CHAMBER_1: fixed_room_id = fixed_room_id(188);
}
impl fixed_room_id {
    pub const FIXED_ITEM_CHAMBER_2: fixed_room_id = fixed_room_id(189);
}
impl fixed_room_id {
    pub const FIXED_WONDER_CHEST_CHAMBER: fixed_room_id = fixed_room_id(190);
}
impl fixed_room_id {
    pub const FIXED_RED_SILK_CHAMBER: fixed_room_id = fixed_room_id(191);
}
impl fixed_room_id {
    pub const FIXED_BLUE_SILK_CHAMBER: fixed_room_id = fixed_room_id(192);
}
impl fixed_room_id {
    pub const FIXED_GRASS_SILK_CHAMBER: fixed_room_id = fixed_room_id(193);
}
impl fixed_room_id {
    pub const FIXED_YELLOW_SILK_CHAMBER: fixed_room_id = fixed_room_id(194);
}
impl fixed_room_id {
    pub const FIXED_REVIVER_SEED_CHAMBER_1: fixed_room_id = fixed_room_id(195);
}
impl fixed_room_id {
    pub const FIXED_REVIVER_SEED_CHAMBER_2: fixed_room_id = fixed_room_id(196);
}
impl fixed_room_id {
    pub const FIXED_EMPTY_SEALED_CHAMBER: fixed_room_id = fixed_room_id(197);
}
impl fixed_room_id {
    pub const FIXED_UNUSED_0xC6: fixed_room_id = fixed_room_id(198);
}
impl fixed_room_id {
    pub const FIXED_UNUSED_0xC7: fixed_room_id = fixed_room_id(199);
}
impl fixed_room_id {
    pub const FIXED_UNUSED_0xC8: fixed_room_id = fixed_room_id(200);
}
impl fixed_room_id {
    pub const FIXED_UNUSED_0xC9: fixed_room_id = fixed_room_id(201);
}
impl fixed_room_id {
    pub const FIXED_UNUSED_0xCA: fixed_room_id = fixed_room_id(202);
}
impl fixed_room_id {
    pub const FIXED_UNUSED_0xCB: fixed_room_id = fixed_room_id(203);
}
impl fixed_room_id {
    pub const FIXED_UNUSED_0xCC: fixed_room_id = fixed_room_id(204);
}
impl fixed_room_id {
    pub const FIXED_UNUSED_0xCD: fixed_room_id = fixed_room_id(205);
}
impl fixed_room_id {
    pub const FIXED_UNUSED_0xCE: fixed_room_id = fixed_room_id(206);
}
impl fixed_room_id {
    pub const FIXED_UNUSED_0xCF: fixed_room_id = fixed_room_id(207);
}
impl fixed_room_id {
    pub const FIXED_UNUSED_0xD0: fixed_room_id = fixed_room_id(208);
}
impl fixed_room_id {
    pub const FIXED_UNUSED_0xD1: fixed_room_id = fixed_room_id(209);
}
impl fixed_room_id {
    pub const FIXED_UNUSED_0xD2: fixed_room_id = fixed_room_id(210);
}
impl fixed_room_id {
    pub const FIXED_UNUSED_0xD3: fixed_room_id = fixed_room_id(211);
}
impl fixed_room_id {
    pub const FIXED_UNUSED_0xD4: fixed_room_id = fixed_room_id(212);
}
impl fixed_room_id {
    pub const FIXED_UNUSED_0xD5: fixed_room_id = fixed_room_id(213);
}
impl fixed_room_id {
    pub const FIXED_UNUSED_0xD6: fixed_room_id = fixed_room_id(214);
}
impl fixed_room_id {
    pub const FIXED_UNUSED_0xD7: fixed_room_id = fixed_room_id(215);
}
impl fixed_room_id {
    pub const FIXED_UNUSED_0xD8: fixed_room_id = fixed_room_id(216);
}
impl fixed_room_id {
    pub const FIXED_UNUSED_0xD9: fixed_room_id = fixed_room_id(217);
}
impl fixed_room_id {
    pub const FIXED_UNUSED_0xDA: fixed_room_id = fixed_room_id(218);
}
impl fixed_room_id {
    pub const FIXED_UNUSED_0xDB: fixed_room_id = fixed_room_id(219);
}
impl fixed_room_id {
    pub const FIXED_LEGENDARY_EXCLUSIVE_CHAMBER_1: fixed_room_id = fixed_room_id(220);
}
impl fixed_room_id {
    pub const FIXED_LEGENDARY_EXCLUSIVE_CHAMBER_2: fixed_room_id = fixed_room_id(221);
}
impl fixed_room_id {
    pub const FIXED_LEGENDARY_EXCLUSIVE_CHAMBER_3: fixed_room_id = fixed_room_id(222);
}
impl fixed_room_id {
    pub const FIXED_LEGENDARY_EXCLUSIVE_CHAMBER_4: fixed_room_id = fixed_room_id(223);
}
impl fixed_room_id {
    pub const FIXED_LEGENDARY_EXCLUSIVE_CHAMBER_5: fixed_room_id = fixed_room_id(224);
}
impl fixed_room_id {
    pub const FIXED_LEGENDARY_EXCLUSIVE_CHAMBER_6: fixed_room_id = fixed_room_id(225);
}
impl fixed_room_id {
    pub const FIXED_LEGENDARY_EXCLUSIVE_CHAMBER_7: fixed_room_id = fixed_room_id(226);
}
impl fixed_room_id {
    pub const FIXED_LEGENDARY_EXCLUSIVE_CHAMBER_8: fixed_room_id = fixed_room_id(227);
}
impl fixed_room_id {
    pub const FIXED_LEGENDARY_EXCLUSIVE_CHAMBER_9: fixed_room_id = fixed_room_id(228);
}
impl fixed_room_id {
    pub const FIXED_LEGENDARY_EXCLUSIVE_CHAMBER_10: fixed_room_id = fixed_room_id(229);
}
impl fixed_room_id {
    pub const FIXED_UNUSED_0xE6: fixed_room_id = fixed_room_id(230);
}
impl fixed_room_id {
    pub const FIXED_UNUSED_0xE7: fixed_room_id = fixed_room_id(231);
}
impl fixed_room_id {
    pub const FIXED_UNUSED_0xE8: fixed_room_id = fixed_room_id(232);
}
impl fixed_room_id {
    pub const FIXED_UNUSED_0xE9: fixed_room_id = fixed_room_id(233);
}
impl fixed_room_id {
    pub const FIXED_UNUSED_0xEA: fixed_room_id = fixed_room_id(234);
}
impl fixed_room_id {
    pub const FIXED_UNUSED_0xEB: fixed_room_id = fixed_room_id(235);
}
impl fixed_room_id {
    pub const FIXED_UNUSED_0xEC: fixed_room_id = fixed_room_id(236);
}
impl fixed_room_id {
    pub const FIXED_UNUSED_0xED: fixed_room_id = fixed_room_id(237);
}
impl fixed_room_id {
    pub const FIXED_UNUSED_0xEE: fixed_room_id = fixed_room_id(238);
}
impl fixed_room_id {
    pub const FIXED_UNUSED_0xEF: fixed_room_id = fixed_room_id(239);
}
impl fixed_room_id {
    pub const FIXED_UNUSED_0xF0: fixed_room_id = fixed_room_id(240);
}
impl fixed_room_id {
    pub const FIXED_UNUSED_0xF1: fixed_room_id = fixed_room_id(241);
}
impl fixed_room_id {
    pub const FIXED_UNUSED_0xF2: fixed_room_id = fixed_room_id(242);
}
impl fixed_room_id {
    pub const FIXED_UNUSED_0xF3: fixed_room_id = fixed_room_id(243);
}
impl fixed_room_id {
    pub const FIXED_UNUSED_0xF4: fixed_room_id = fixed_room_id(244);
}
impl fixed_room_id {
    pub const FIXED_UNUSED_0xF5: fixed_room_id = fixed_room_id(245);
}
impl fixed_room_id {
    pub const FIXED_UNUSED_0xF6: fixed_room_id = fixed_room_id(246);
}
impl fixed_room_id {
    pub const FIXED_UNUSED_0xF7: fixed_room_id = fixed_room_id(247);
}
impl fixed_room_id {
    pub const FIXED_UNUSED_0xF8: fixed_room_id = fixed_room_id(248);
}
impl fixed_room_id {
    pub const FIXED_UNUSED_0xF9: fixed_room_id = fixed_room_id(249);
}
impl fixed_room_id {
    pub const FIXED_UNUSED_0xFA: fixed_room_id = fixed_room_id(250);
}
impl fixed_room_id {
    pub const FIXED_UNUSED_0xFB: fixed_room_id = fixed_room_id(251);
}
impl fixed_room_id {
    pub const FIXED_UNUSED_0xFC: fixed_room_id = fixed_room_id(252);
}
impl fixed_room_id {
    pub const FIXED_UNUSED_0xFD: fixed_room_id = fixed_room_id(253);
}
impl fixed_room_id {
    pub const FIXED_UNUSED_0xFE: fixed_room_id = fixed_room_id(254);
}
impl fixed_room_id {
    pub const FIXED_UNUSED_0xFF: fixed_room_id = fixed_room_id(255);
}
#[repr(transparent)]
#[derive(Clone, Hash, PartialEq, Eq)]
pub struct fixed_room_id(pub(crate) crate::ctypes::c_uint);
#[repr(C, packed)]
pub struct fixed_room_id_8 {
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 1usize]>,
}
impl fixed_room_id_8 {
    #[inline]
    pub fn val(&self) -> fixed_room_id {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(0usize, 8u8) as u32) }
    }
    #[inline]
    pub fn set_val(&mut self, val: fixed_room_id) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(0usize, 8u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(val: fixed_room_id) -> __BindgenBitfieldUnit<[u8; 1usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 1usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 8u8, {
            let val: u32 = unsafe { ::core::mem::transmute(val) };
            val as u64
        });
        __bindgen_bitfield_unit
    }
}
pub mod floor_size {
    pub type Type = crate::ctypes::c_uint;
    pub const FLOOR_SIZE_LARGE: Type = 0;
    pub const FLOOR_SIZE_SMALL: Type = 1;
    pub const FLOOR_SIZE_MEDIUM: Type = 2;
}
#[repr(C, packed)]
pub struct floor_size_8 {
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 1usize]>,
}
impl floor_size_8 {
    #[inline]
    pub fn val(&self) -> floor_size::Type {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(0usize, 8u8) as u32) }
    }
    #[inline]
    pub fn set_val(&mut self, val: floor_size::Type) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(0usize, 8u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(val: floor_size::Type) -> __BindgenBitfieldUnit<[u8; 1usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 1usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 8u8, {
            let val: u32 = unsafe { ::core::mem::transmute(val) };
            val as u64
        });
        __bindgen_bitfield_unit
    }
}
pub mod floor_layout {
    pub type Type = crate::ctypes::c_uint;
    pub const LAYOUT_LARGE: Type = 0;
    pub const LAYOUT_SMALL: Type = 1;
    pub const LAYOUT_ONE_ROOM_MONSTER_HOUSE: Type = 2;
    pub const LAYOUT_OUTER_RING: Type = 3;
    pub const LAYOUT_CROSSROADS: Type = 4;
    pub const LAYOUT_TWO_ROOMS_WITH_MONSTER_HOUSE: Type = 5;
    pub const LAYOUT_LINE: Type = 6;
    pub const LAYOUT_CROSS: Type = 7;
    pub const LAYOUT_LARGE_0x8: Type = 8;
    pub const LAYOUT_BEETLE: Type = 9;
    pub const LAYOUT_OUTER_ROOMS: Type = 10;
    pub const LAYOUT_MEDIUM: Type = 11;
    pub const LAYOUT_UNUSED_0xC: Type = 12;
    pub const LAYOUT_UNUSED_0xD: Type = 13;
    pub const LAYOUT_UNUSED_0xE: Type = 14;
    pub const LAYOUT_UNUSED_0xF: Type = 15;
}
#[repr(C, packed)]
pub struct floor_layout_8 {
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 1usize]>,
}
impl floor_layout_8 {
    #[inline]
    pub fn val(&self) -> floor_layout::Type {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(0usize, 8u8) as u32) }
    }
    #[inline]
    pub fn set_val(&mut self, val: floor_layout::Type) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(0usize, 8u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(val: floor_layout::Type) -> __BindgenBitfieldUnit<[u8; 1usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 1usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 8u8, {
            let val: u32 = unsafe { ::core::mem::transmute(val) };
            val as u64
        });
        __bindgen_bitfield_unit
    }
}
#[repr(C)]
pub struct iovec {
    pub iov_base: *mut crate::ctypes::c_void,
    pub iov_len: u32,
}
#[repr(C)]
pub struct rect16_xywh {
    pub x: i16,
    pub y: i16,
    pub w: i16,
    pub h: i16,
}
#[repr(C)]
pub struct rgb {
    pub r: u8,
    pub b: u8,
    pub g: u8,
    pub unused: u8,
}
#[repr(C)]
pub struct file_stream {
    pub field_0x0: undefined4,
    pub field_0x4: undefined4,
    pub field_0x8: undefined4,
    pub field_0xc: undefined4,
    pub field_0x10: undefined4,
    pub field_0x14: undefined4,
    pub field_0x18: undefined4,
    pub field_0x1c: undefined4,
    pub field_0x20: undefined4,
    pub start_address: *mut crate::ctypes::c_void,
    pub end_address: *mut crate::ctypes::c_void,
    pub current_address: *mut crate::ctypes::c_void,
    pub field_0x30: undefined4,
    pub field_0x34: undefined4,
    pub field_0x38: undefined4,
    pub field_0x3c: undefined4,
    pub field_0x40: undefined4,
    pub field_0x44: undefined4,
}
pub mod pack_file_id {
    pub type Type = crate::ctypes::c_uint;
    pub const PACK_ARCHIVE_MONSTER: Type = 0;
    pub const PACK_ARCHIVE_M_ATTACK: Type = 1;
    pub const PACK_ARCHIVE_M_GROUND: Type = 2;
    pub const PACK_ARCHIVE_EFFECT: Type = 3;
    pub const PACK_ARCHIVE_DUNGEON: Type = 4;
    pub const PACK_ARCHIVE_M_LEVEL: Type = 5;
}
#[repr(C)]
pub struct pack_file_table_of_content {
    pub offset: u32,
    pub length: u32,
}
#[repr(C)]
pub struct pack_file_opened {
    pub table_of_content: *mut pack_file_table_of_content,
    pub zero: undefined4,
    pub nb_entry_table_of_content: u32,
    pub opened_file: file_stream,
}
#[repr(C)]
pub struct pack_alloc_and_load_result {
    pub data: *mut crate::ctypes::c_void,
    pub length: u32,
}
#[repr(C)]
pub struct wte_handle {
    pub content: *mut crate::ctypes::c_void,
    pub header: *mut wte_header,
}
#[repr(C)]
#[repr(align(2))]
pub struct wte_texture_params {
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 2usize]>,
}
impl wte_texture_params {
    #[inline]
    pub fn texture_smult(&self) -> u8 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(0usize, 3u8) as u8) }
    }
    #[inline]
    pub fn set_texture_smult(&mut self, val: u8) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(0usize, 3u8, val as u64)
        }
    }
    #[inline]
    pub fn texture_tmult(&self) -> u8 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(3usize, 3u8) as u8) }
    }
    #[inline]
    pub fn set_texture_tmult(&mut self, val: u8) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(3usize, 3u8, val as u64)
        }
    }
    #[inline]
    pub fn unused6(&self) -> u8 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(6usize, 2u8) as u8) }
    }
    #[inline]
    pub fn set_unused6(&mut self, val: u8) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(6usize, 2u8, val as u64)
        }
    }
    #[inline]
    pub fn format(&self) -> texture_format::Type {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(8usize, 3u8) as u32) }
    }
    #[inline]
    pub fn set_format(&mut self, val: texture_format::Type) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(8usize, 3u8, val as u64)
        }
    }
    #[inline]
    pub fn repeat_x(&self) -> bool_ {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(11usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_repeat_x(&mut self, val: bool_) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(11usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn repeat_y(&self) -> bool_ {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(12usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_repeat_y(&mut self, val: bool_) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(12usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn unusedD(&self) -> u8 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(13usize, 3u8) as u8) }
    }
    #[inline]
    pub fn set_unusedD(&mut self, val: u8) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(13usize, 3u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        texture_smult: u8,
        texture_tmult: u8,
        unused6: u8,
        format: texture_format::Type,
        repeat_x: bool_,
        repeat_y: bool_,
        unusedD: u8,
    ) -> __BindgenBitfieldUnit<[u8; 2usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 2usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 3u8, {
            let texture_smult: u8 = unsafe { ::core::mem::transmute(texture_smult) };
            texture_smult as u64
        });
        __bindgen_bitfield_unit.set(3usize, 3u8, {
            let texture_tmult: u8 = unsafe { ::core::mem::transmute(texture_tmult) };
            texture_tmult as u64
        });
        __bindgen_bitfield_unit.set(6usize, 2u8, {
            let unused6: u8 = unsafe { ::core::mem::transmute(unused6) };
            unused6 as u64
        });
        __bindgen_bitfield_unit.set(8usize, 3u8, {
            let format: u32 = unsafe { ::core::mem::transmute(format) };
            format as u64
        });
        __bindgen_bitfield_unit.set(11usize, 1u8, {
            let repeat_x: u8 = unsafe { ::core::mem::transmute(repeat_x) };
            repeat_x as u64
        });
        __bindgen_bitfield_unit.set(12usize, 1u8, {
            let repeat_y: u8 = unsafe { ::core::mem::transmute(repeat_y) };
            repeat_y as u64
        });
        __bindgen_bitfield_unit.set(13usize, 3u8, {
            let unusedD: u8 = unsafe { ::core::mem::transmute(unusedD) };
            unusedD as u64
        });
        __bindgen_bitfield_unit
    }
}
#[repr(C)]
pub struct wte_header {
    pub signature: [crate::ctypes::c_char; 4usize],
    pub texture: *mut crate::ctypes::c_void,
    pub texture_size: u32,
    pub params: wte_texture_params,
    pub _padding_0xe: u16,
    pub texture_bounds: rect16_xywh,
    pub palette: *mut rgb,
    pub color_amt: u16,
    pub _padding_0x1e: u16,
}
pub type va_list = *mut crate::ctypes::c_void;
#[repr(C)]
pub struct slice {
    pub data: *mut crate::ctypes::c_void,
    pub capacity: u32,
    pub length: u32,
}
pub type slice_append_fn_t = ::core::option::Option<
    unsafe extern "C" fn(
        slice: *mut slice,
        data: *mut crate::ctypes::c_void,
        data_len: u32,
    ) -> bool_,
>;
#[repr(C)]
pub struct prog_pos_info {
    pub file: *mut crate::ctypes::c_char,
    pub line: crate::ctypes::c_int,
}
#[repr(C)]
pub struct mem_block {
    pub _bitfield_align_1: [u32; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 12usize]>,
    pub data: *mut crate::ctypes::c_void,
    pub available: u32,
    pub used: u32,
}
impl mem_block {
    #[inline]
    pub fn f_in_use(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_f_in_use(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn f_object(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(1usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_f_object(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(1usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn f_arena(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(2usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_f_arena(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(2usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn content_flags_unused(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(3usize, 29u8) as u32) }
    }
    #[inline]
    pub fn set_content_flags_unused(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(3usize, 29u8, val as u64)
        }
    }
    #[inline]
    pub fn f_alloc_in_use(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(32usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_f_alloc_in_use(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(32usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn f_alloc_object(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(33usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_f_alloc_object(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(33usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn f_alloc_arena(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(34usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_f_alloc_arena(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(34usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn f_alloc_subarena(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(35usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_f_alloc_subarena(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(35usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn allocator_flags_unused(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(36usize, 28u8) as u32) }
    }
    #[inline]
    pub fn set_allocator_flags_unused(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(36usize, 28u8, val as u64)
        }
    }
    #[inline]
    pub fn user_flags(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(64usize, 8u8) as u32) }
    }
    #[inline]
    pub fn set_user_flags(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(64usize, 8u8, val as u64)
        }
    }
    #[inline]
    pub fn f_user_alloc_in_use(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(72usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_f_user_alloc_in_use(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(72usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn f_user_alloc_object(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(73usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_f_user_alloc_object(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(73usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn f_user_alloc_arena(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(74usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_f_user_alloc_arena(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(74usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn f_user_alloc_subarena(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(75usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_f_user_alloc_subarena(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(75usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn user_flags_unused(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(76usize, 20u8) as u32) }
    }
    #[inline]
    pub fn set_user_flags_unused(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(76usize, 20u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        f_in_use: u32,
        f_object: u32,
        f_arena: u32,
        content_flags_unused: u32,
        f_alloc_in_use: u32,
        f_alloc_object: u32,
        f_alloc_arena: u32,
        f_alloc_subarena: u32,
        allocator_flags_unused: u32,
        user_flags: u32,
        f_user_alloc_in_use: u32,
        f_user_alloc_object: u32,
        f_user_alloc_arena: u32,
        f_user_alloc_subarena: u32,
        user_flags_unused: u32,
    ) -> __BindgenBitfieldUnit<[u8; 12usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 12usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let f_in_use: u32 = unsafe { ::core::mem::transmute(f_in_use) };
            f_in_use as u64
        });
        __bindgen_bitfield_unit.set(1usize, 1u8, {
            let f_object: u32 = unsafe { ::core::mem::transmute(f_object) };
            f_object as u64
        });
        __bindgen_bitfield_unit.set(2usize, 1u8, {
            let f_arena: u32 = unsafe { ::core::mem::transmute(f_arena) };
            f_arena as u64
        });
        __bindgen_bitfield_unit.set(3usize, 29u8, {
            let content_flags_unused: u32 = unsafe { ::core::mem::transmute(content_flags_unused) };
            content_flags_unused as u64
        });
        __bindgen_bitfield_unit.set(32usize, 1u8, {
            let f_alloc_in_use: u32 = unsafe { ::core::mem::transmute(f_alloc_in_use) };
            f_alloc_in_use as u64
        });
        __bindgen_bitfield_unit.set(33usize, 1u8, {
            let f_alloc_object: u32 = unsafe { ::core::mem::transmute(f_alloc_object) };
            f_alloc_object as u64
        });
        __bindgen_bitfield_unit.set(34usize, 1u8, {
            let f_alloc_arena: u32 = unsafe { ::core::mem::transmute(f_alloc_arena) };
            f_alloc_arena as u64
        });
        __bindgen_bitfield_unit.set(35usize, 1u8, {
            let f_alloc_subarena: u32 = unsafe { ::core::mem::transmute(f_alloc_subarena) };
            f_alloc_subarena as u64
        });
        __bindgen_bitfield_unit.set(36usize, 28u8, {
            let allocator_flags_unused: u32 =
                unsafe { ::core::mem::transmute(allocator_flags_unused) };
            allocator_flags_unused as u64
        });
        __bindgen_bitfield_unit.set(64usize, 8u8, {
            let user_flags: u32 = unsafe { ::core::mem::transmute(user_flags) };
            user_flags as u64
        });
        __bindgen_bitfield_unit.set(72usize, 1u8, {
            let f_user_alloc_in_use: u32 = unsafe { ::core::mem::transmute(f_user_alloc_in_use) };
            f_user_alloc_in_use as u64
        });
        __bindgen_bitfield_unit.set(73usize, 1u8, {
            let f_user_alloc_object: u32 = unsafe { ::core::mem::transmute(f_user_alloc_object) };
            f_user_alloc_object as u64
        });
        __bindgen_bitfield_unit.set(74usize, 1u8, {
            let f_user_alloc_arena: u32 = unsafe { ::core::mem::transmute(f_user_alloc_arena) };
            f_user_alloc_arena as u64
        });
        __bindgen_bitfield_unit.set(75usize, 1u8, {
            let f_user_alloc_subarena: u32 =
                unsafe { ::core::mem::transmute(f_user_alloc_subarena) };
            f_user_alloc_subarena as u64
        });
        __bindgen_bitfield_unit.set(76usize, 20u8, {
            let user_flags_unused: u32 = unsafe { ::core::mem::transmute(user_flags_unused) };
            user_flags_unused as u64
        });
        __bindgen_bitfield_unit
    }
}
#[repr(C)]
pub struct mem_arena {
    pub content_flags: u32,
    pub parent: *mut mem_arena,
    pub blocks: *mut mem_block,
    pub n_blocks: u32,
    pub max_blocks: u32,
    pub data: *mut crate::ctypes::c_void,
    pub len: u32,
}
#[repr(C)]
pub struct mem_alloc_table {
    pub n_arenas: u32,
    pub default_arena: mem_arena,
    pub arenas: [*mut mem_arena; 8usize],
}
pub type get_alloc_arena_fn_t = ::core::option::Option<
    unsafe extern "C" fn(arena: *mut mem_arena, flags: u32) -> *mut mem_arena,
>;
pub type get_free_arena_fn_t = ::core::option::Option<
    unsafe extern "C" fn(arena: *mut mem_arena, ptr: *mut crate::ctypes::c_void) -> *mut mem_arena,
>;
#[repr(C)]
pub struct mem_arena_getters {
    pub get_alloc_arena: get_alloc_arena_fn_t,
    pub get_free_arena: get_free_arena_fn_t,
}
#[repr(C)]
pub struct overlay_load_entry {
    pub group: overlay_group_id::Type,
    pub entrypoint: *mut crate::ctypes::c_void,
    pub destructor: *mut crate::ctypes::c_void,
    pub frame_update: *mut crate::ctypes::c_void,
}
#[repr(C)]
pub struct bulk_item {
    pub id: item_id_16,
    pub quantity: u16,
}
#[repr(C)]
#[repr(align(4))]
pub struct preprocessor_flags {
    pub _bitfield_align_1: [u32; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 4usize]>,
}
impl preprocessor_flags {
    #[inline]
    pub fn unknown0(&self) -> u16 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(0usize, 13u8) as u16) }
    }
    #[inline]
    pub fn set_unknown0(&mut self, val: u16) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            self._bitfield_1.set(0usize, 13u8, val as u64)
        }
    }
    #[inline]
    pub fn show_speaker(&self) -> bool_ {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(13usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_show_speaker(&mut self, val: bool_) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(13usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn unknown18(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(14usize, 18u8) as u32) }
    }
    #[inline]
    pub fn set_unknown18(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(14usize, 18u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        unknown0: u16,
        show_speaker: bool_,
        unknown18: u32,
    ) -> __BindgenBitfieldUnit<[u8; 4usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 4usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 13u8, {
            let unknown0: u16 = unsafe { ::core::mem::transmute(unknown0) };
            unknown0 as u64
        });
        __bindgen_bitfield_unit.set(13usize, 1u8, {
            let show_speaker: u8 = unsafe { ::core::mem::transmute(show_speaker) };
            show_speaker as u64
        });
        __bindgen_bitfield_unit.set(14usize, 18u8, {
            let unknown18: u32 = unsafe { ::core::mem::transmute(unknown18) };
            unknown18 as u64
        });
        __bindgen_bitfield_unit
    }
}
#[repr(C)]
pub struct preprocessor_args {
    pub flag_vals: [u32; 4usize],
    pub id_vals: [u32; 5usize],
    pub number_vals: [i32; 5usize],
    pub strings: [*mut crate::ctypes::c_char; 5usize],
    pub speaker_id: u32,
}
#[repr(C)]
pub struct type_matchup_table {
    pub matchups: [[type_matchup_16; 18usize]; 18usize],
}
#[repr(C)]
#[repr(align(2))]
pub struct move_target_and_range {
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 2usize]>,
}
impl move_target_and_range {
    #[inline]
    pub fn target(&self) -> move_target::Type {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(0usize, 4u8) as u32) }
    }
    #[inline]
    pub fn set_target(&mut self, val: move_target::Type) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(0usize, 4u8, val as u64)
        }
    }
    #[inline]
    pub fn range(&self) -> move_range::Type {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(4usize, 4u8) as u32) }
    }
    #[inline]
    pub fn set_range(&mut self, val: move_range::Type) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(4usize, 4u8, val as u64)
        }
    }
    #[inline]
    pub fn ai_condition(&self) -> move_ai_condition::Type {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(8usize, 4u8) as u32) }
    }
    #[inline]
    pub fn set_ai_condition(&mut self, val: move_ai_condition::Type) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(8usize, 4u8, val as u64)
        }
    }
    #[inline]
    pub fn unused(&self) -> u16 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(12usize, 4u8) as u16) }
    }
    #[inline]
    pub fn set_unused(&mut self, val: u16) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            self._bitfield_1.set(12usize, 4u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        target: move_target::Type,
        range: move_range::Type,
        ai_condition: move_ai_condition::Type,
        unused: u16,
    ) -> __BindgenBitfieldUnit<[u8; 2usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 2usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 4u8, {
            let target: u32 = unsafe { ::core::mem::transmute(target) };
            target as u64
        });
        __bindgen_bitfield_unit.set(4usize, 4u8, {
            let range: u32 = unsafe { ::core::mem::transmute(range) };
            range as u64
        });
        __bindgen_bitfield_unit.set(8usize, 4u8, {
            let ai_condition: u32 = unsafe { ::core::mem::transmute(ai_condition) };
            ai_condition as u64
        });
        __bindgen_bitfield_unit.set(12usize, 4u8, {
            let unused: u16 = unsafe { ::core::mem::transmute(unused) };
            unused as u64
        });
        __bindgen_bitfield_unit
    }
}
#[repr(C)]
pub struct move_data {
    pub base_power: u16,
    pub type_: type_id_8,
    pub category: move_category_8,
    pub target_range: move_target_and_range,
    pub ai_target_range: move_target_and_range,
    pub pp: u8,
    pub ai_weight: u8,
    pub accuracy1: u8,
    pub accuracy2: u8,
    pub ai_condition_random_chance: u8,
    pub strikes: u8,
    pub max_ginseng_boost: u8,
    pub crit_chance: u8,
    pub reflected_by_magic_coat: bool_,
    pub can_be_snatched: bool_,
    pub fails_while_muzzled: bool_,
    pub ai_can_use_against_frozen: bool_,
    pub usable_while_taunted: bool_,
    pub range_string_idx: u8,
    pub id: move_id_16,
    pub message_string_idx: u16,
}
#[repr(C)]
pub struct move_data_table {
    pub entries: [move_data; 559usize],
}
#[repr(C)]
pub struct ground_move {
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 1usize]>,
    pub field_0x1: undefined,
    pub id: move_id_16,
    pub ginseng: u8,
    pub field_0x5: undefined,
}
impl ground_move {
    #[inline]
    pub fn f_exists(&self) -> bool_ {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_f_exists(&mut self, val: bool_) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn f_subsequent_in_link_chain(&self) -> bool_ {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(1usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_f_subsequent_in_link_chain(&mut self, val: bool_) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(1usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn f_enabled_for_ai(&self) -> bool_ {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(2usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_f_enabled_for_ai(&mut self, val: bool_) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(2usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn flags_unk3(&self) -> bool_ {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(3usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_flags_unk3(&mut self, val: bool_) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(3usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn flags_unk4(&self) -> bool_ {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(4usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_flags_unk4(&mut self, val: bool_) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(4usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn f_disabled(&self) -> bool_ {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(5usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_f_disabled(&mut self, val: bool_) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(5usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn flags_unk6(&self) -> u8 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(6usize, 2u8) as u8) }
    }
    #[inline]
    pub fn set_flags_unk6(&mut self, val: u8) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(6usize, 2u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        f_exists: bool_,
        f_subsequent_in_link_chain: bool_,
        f_enabled_for_ai: bool_,
        flags_unk3: bool_,
        flags_unk4: bool_,
        f_disabled: bool_,
        flags_unk6: u8,
    ) -> __BindgenBitfieldUnit<[u8; 1usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 1usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let f_exists: u8 = unsafe { ::core::mem::transmute(f_exists) };
            f_exists as u64
        });
        __bindgen_bitfield_unit.set(1usize, 1u8, {
            let f_subsequent_in_link_chain: u8 =
                unsafe { ::core::mem::transmute(f_subsequent_in_link_chain) };
            f_subsequent_in_link_chain as u64
        });
        __bindgen_bitfield_unit.set(2usize, 1u8, {
            let f_enabled_for_ai: u8 = unsafe { ::core::mem::transmute(f_enabled_for_ai) };
            f_enabled_for_ai as u64
        });
        __bindgen_bitfield_unit.set(3usize, 1u8, {
            let flags_unk3: u8 = unsafe { ::core::mem::transmute(flags_unk3) };
            flags_unk3 as u64
        });
        __bindgen_bitfield_unit.set(4usize, 1u8, {
            let flags_unk4: u8 = unsafe { ::core::mem::transmute(flags_unk4) };
            flags_unk4 as u64
        });
        __bindgen_bitfield_unit.set(5usize, 1u8, {
            let f_disabled: u8 = unsafe { ::core::mem::transmute(f_disabled) };
            f_disabled as u64
        });
        __bindgen_bitfield_unit.set(6usize, 2u8, {
            let flags_unk6: u8 = unsafe { ::core::mem::transmute(flags_unk6) };
            flags_unk6 as u64
        });
        __bindgen_bitfield_unit
    }
}
#[repr(C)]
pub struct ground_monster {
    pub is_valid: bool_,
    pub level: i8,
    pub joined_at: dungeon_id_8,
    pub field_0x3: undefined,
    pub id: monster_id_16,
    pub field_0x6: undefined,
    pub field_0x7: undefined,
    pub iq: u16,
    pub max_hp: u16,
    pub atk: i8,
    pub sp_atk: i8,
    pub def: i8,
    pub sp_def: i8,
    pub exp: crate::ctypes::c_int,
    pub iq_skill_flags: [u32; 3usize],
    pub tactic: tactic_id_8,
    pub field_0x21: undefined,
    pub moves: [ground_move; 4usize],
    pub name: [crate::ctypes::c_char; 10usize],
}
#[repr(C)]
pub struct team_member {
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 1usize]>,
    pub is_leader: bool_,
    pub level: u8,
    pub field_0x3: undefined,
    pub field_0x4: undefined,
    pub field_0x5: undefined,
    pub iq: u16,
    pub field_0x8: undefined2,
    pub field_0xA: undefined,
    pub field_0xB: undefined,
    pub field_0xC: undefined,
    pub field_0xD: undefined,
    pub current_hp: u16,
    pub max_hp: u16,
    pub atk: i8,
    pub sp_atk: i8,
    pub def: i8,
    pub sp_def: i8,
    pub field_0x16: undefined,
    pub field_0x17: undefined,
    pub exp: crate::ctypes::c_int,
    pub field_0x1C: undefined,
    pub field_0x1D: undefined,
    pub field_0x1E: undefined,
    pub field_0x1F: undefined,
    pub field_0x20: undefined,
    pub field_0x21: undefined,
    pub field_0x22: undefined,
    pub field_0x23: undefined,
    pub field_0x24: undefined,
    pub field_0x25: undefined,
    pub field_0x26: undefined,
    pub field_0x27: undefined,
    pub field_0x28: undefined,
    pub field_0x29: undefined,
    pub field_0x2A: undefined,
    pub field_0x2B: undefined,
    pub field_0x2C: undefined,
    pub field_0x2D: undefined,
    pub field_0x2E: undefined,
    pub field_0x2F: undefined,
    pub field_0x30: undefined,
    pub field_0x31: undefined,
    pub field_0x32: undefined,
    pub field_0x33: undefined,
    pub field_0x34: undefined,
    pub field_0x35: undefined,
    pub field_0x36: undefined,
    pub field_0x37: undefined,
    pub field_0x38: undefined,
    pub field_0x39: undefined,
    pub field_0x3A: undefined,
    pub field_0x3B: undefined,
    pub field_0x3C: undefined,
    pub field_0x3D: undefined,
    pub field_0x3E: undefined,
    pub field_0x3F: undefined,
    pub field_0x40: undefined,
    pub field_0x41: undefined,
    pub field_0x42: undefined,
    pub field_0x43: undefined,
    pub field_0x44: undefined,
    pub field_0x45: undefined,
    pub field_0x46: undefined,
    pub field_0x47: undefined,
    pub field_0x48: undefined,
    pub field_0x49: undefined,
    pub field_0x4A: undefined,
    pub field_0x4B: undefined,
    pub field_0x4C: undefined,
    pub field_0x4D: undefined,
    pub field_0x4E: undefined,
    pub field_0x4F: undefined,
    pub field_0x50: undefined,
    pub field_0x51: undefined,
    pub field_0x52: undefined,
    pub field_0x53: undefined,
    pub field_0x54: undefined,
    pub field_0x55: undefined,
    pub field_0x56: undefined,
    pub field_0x57: undefined,
    pub field_0x58: undefined,
    pub field_0x59: undefined,
    pub field_0x5A: undefined,
    pub field_0x5B: undefined,
    pub field_0x5C: undefined,
    pub field_0x5D: undefined,
    pub name: [crate::ctypes::c_char; 10usize],
}
impl team_member {
    #[inline]
    pub fn f_is_valid(&self) -> bool_ {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_f_is_valid(&mut self, val: bool_) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn flags_unk1(&self) -> u8 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(1usize, 7u8) as u8) }
    }
    #[inline]
    pub fn set_flags_unk1(&mut self, val: u8) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(1usize, 7u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        f_is_valid: bool_,
        flags_unk1: u8,
    ) -> __BindgenBitfieldUnit<[u8; 1usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 1usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let f_is_valid: u8 = unsafe { ::core::mem::transmute(f_is_valid) };
            f_is_valid as u64
        });
        __bindgen_bitfield_unit.set(1usize, 7u8, {
            let flags_unk1: u8 = unsafe { ::core::mem::transmute(flags_unk1) };
            flags_unk1 as u64
        });
        __bindgen_bitfield_unit
    }
}
#[repr(C)]
pub struct dungeon_floor_pair {
    pub dungeon_id: dungeon_id_8,
    pub floor_id: u8,
}
#[repr(C)]
pub struct unk_dungeon_init {
    pub field_0x0: undefined,
    pub field_0x1: undefined,
    pub field_0x2: undefined,
    pub field_0x3: undefined,
    pub field_0x4: undefined,
    pub field_0x5: undefined,
    pub field_0x6: undefined,
    pub field_0x7: undefined,
    pub field_0x8: undefined,
    pub field_0x9: undefined,
    pub field_0xA: undefined,
    pub field_0xB: undefined,
    pub field_0xC: undefined,
    pub field_0xD: undefined,
    pub field_0xE: undefined,
    pub field_0xF: undefined,
    pub field_0x10: undefined,
    pub field_0x11: undefined,
    pub field_0x12: undefined,
    pub field_0x13: undefined,
    pub field_0x14: undefined,
    pub field_0x15: undefined,
    pub field_0x16: undefined,
    pub field_0x17: undefined,
    pub field_0x18: undefined,
    pub field_0x19: undefined,
    pub field_0x1A: undefined,
    pub field_0x1B: undefined,
    pub field_0x1C: undefined,
    pub field_0x1D: undefined,
    pub field_0x1E: undefined,
    pub field_0x1F: undefined,
    pub field_0x20: undefined,
    pub field_0x21: undefined,
    pub field_0x22: undefined,
    pub field_0x23: undefined,
    pub field_0x24: undefined,
    pub field_0x25: undefined,
    pub field_0x26: undefined,
    pub field_0x27: undefined,
    pub field_0x28: undefined,
    pub field_0x29: undefined,
    pub field_0x2A: undefined,
    pub field_0x2B: undefined,
    pub field_0x2C: undefined,
    pub field_0x2D: undefined,
    pub field_0x2E: undefined,
    pub field_0x2F: undefined,
    pub field_0x30: undefined,
    pub field_0x31: undefined,
    pub field_0x32: undefined,
    pub field_0x33: undefined,
    pub field_0x34: undefined,
    pub field_0x35: undefined,
    pub field_0x36: undefined,
    pub field_0x37: undefined,
    pub field_0x38: undefined,
    pub field_0x39: undefined,
    pub field_0x3A: undefined,
    pub field_0x3B: undefined,
    pub field_0x3C: undefined,
    pub field_0x3D: undefined,
    pub field_0x3E: undefined,
    pub field_0x3F: undefined,
    pub field_0x40: undefined,
    pub field_0x41: undefined,
    pub field_0x42: undefined,
    pub field_0x43: undefined,
    pub field_0x44: undefined,
    pub field_0x45: undefined,
    pub field_0x46: undefined,
    pub field_0x47: undefined,
    pub field_0x48: undefined,
    pub field_0x49: undefined,
    pub field_0x4A: undefined,
    pub field_0x4B: undefined,
    pub field_0x4C: undefined,
    pub field_0x4D: undefined,
    pub field_0x4E: undefined,
    pub field_0x4F: undefined,
    pub field_0x50: undefined,
    pub field_0x51: undefined,
    pub field_0x52: undefined,
    pub field_0x53: undefined,
    pub field_0x54: undefined,
    pub field_0x55: undefined,
    pub field_0x56: undefined,
    pub field_0x57: undefined,
    pub field_0x58: undefined,
    pub field_0x59: undefined,
    pub field_0x5A: undefined,
    pub field_0x5B: undefined,
    pub field_0x5C: undefined,
    pub field_0x5D: undefined,
    pub field_0x5E: undefined,
    pub field_0x5F: undefined,
    pub field_0x60: undefined,
    pub field_0x61: undefined,
    pub field_0x62: undefined,
    pub field_0x63: undefined,
    pub field_0x64: undefined,
    pub field_0x65: undefined,
    pub field_0x66: undefined,
    pub field_0x67: undefined,
    pub field_0x68: undefined,
    pub field_0x69: undefined,
    pub field_0x6A: undefined,
    pub field_0x6B: undefined,
    pub field_0x6C: undefined,
    pub field_0x6D: undefined,
    pub field_0x6E: undefined,
    pub field_0x6F: undefined,
    pub field_0x70: undefined,
    pub field_0x71: undefined,
    pub field_0x72: undefined,
    pub field_0x73: undefined,
    pub field_0x74: undefined,
    pub field_0x75: undefined,
    pub field_0x76: undefined,
    pub field_0x77: undefined,
    pub field_0x78: undefined,
    pub field_0x79: undefined,
    pub field_0x7A: undefined,
    pub field_0x7B: undefined,
    pub field_0x7C: undefined,
    pub field_0x7D: undefined,
    pub field_0x7E: undefined,
    pub field_0x7F: undefined,
    pub field_0x80: undefined,
    pub field_0x81: undefined,
    pub field_0x82: undefined,
    pub field_0x83: undefined,
    pub field_0x84: undefined,
    pub field_0x85: undefined,
    pub field_0x86: undefined,
    pub field_0x87: undefined,
    pub field_0x88: undefined,
    pub field_0x89: undefined,
    pub field_0x8A: undefined,
    pub field_0x8B: undefined,
    pub field_0x8C: undefined,
    pub field_0x8D: undefined,
    pub field_0x8E: undefined,
    pub field_0x8F: undefined,
    pub field_0x90: undefined,
    pub field_0x91: undefined,
    pub field_0x92: undefined,
    pub field_0x93: undefined,
    pub field_0x94: undefined,
    pub field_0x95: undefined,
    pub field_0x96: undefined,
    pub field_0x97: undefined,
    pub field_0x98: undefined,
    pub field_0x99: undefined,
    pub field_0x9A: undefined,
    pub field_0x9B: undefined,
    pub field_0x9C: undefined,
    pub field_0x9D: undefined,
    pub field_0x9E: undefined,
    pub field_0x9F: undefined,
    pub field_0xA0: undefined,
    pub field_0xA1: undefined,
    pub field_0xA2: undefined,
    pub field_0xA3: undefined,
    pub field_0xA4: undefined,
    pub field_0xA5: undefined,
    pub field_0xA6: undefined,
    pub field_0xA7: undefined,
    pub field_0xA8: undefined,
    pub field_0xA9: undefined,
    pub field_0xAA: undefined,
    pub field_0xAB: undefined,
    pub field_0xAC: undefined,
    pub field_0xAD: undefined,
    pub field_0xAE: undefined,
    pub field_0xAF: undefined,
    pub field_0xB0: undefined,
    pub field_0xB1: undefined,
    pub field_0xB2: undefined,
    pub field_0xB3: undefined,
    pub field_0xB4: undefined,
    pub field_0xB5: undefined,
    pub field_0xB6: undefined,
    pub field_0xB7: undefined,
    pub field_0xB8: undefined,
    pub field_0xB9: undefined,
    pub field_0xBA: undefined,
    pub field_0xBB: undefined,
    pub field_0xBC: undefined,
    pub field_0xBD: undefined,
    pub field_0xBE: undefined,
    pub field_0xBF: undefined,
    pub field_0xC0: undefined,
    pub field_0xC1: undefined,
    pub field_0xC2: undefined,
    pub field_0xC3: undefined,
    pub field_0xC4: undefined,
    pub field_0xC5: undefined,
    pub field_0xC6: undefined,
    pub field_0xC7: undefined,
    pub field_0xC8: undefined,
    pub field_0xC9: undefined,
    pub field_0xCA: undefined,
    pub field_0xCB: undefined,
    pub field_0xCC: undefined,
    pub field_0xCD: undefined,
    pub field_0xCE: undefined,
    pub field_0xCF: undefined,
    pub field_0xD0: undefined,
    pub field_0xD1: undefined,
    pub field_0xD2: undefined,
    pub field_0xD3: undefined,
    pub field_0xD4: undefined,
    pub field_0xD5: undefined,
    pub field_0xD6: undefined,
    pub field_0xD7: undefined,
    pub field_0xD8: undefined,
    pub field_0xD9: undefined,
    pub field_0xDA: undefined,
    pub field_0xDB: undefined,
    pub field_0xDC: undefined,
    pub field_0xDD: undefined,
    pub field_0xDE: undefined,
    pub field_0xDF: undefined,
    pub field_0xE0: undefined,
    pub field_0xE1: undefined,
    pub field_0xE2: undefined,
    pub field_0xE3: undefined,
    pub field_0xE4: undefined,
    pub field_0xE5: undefined,
    pub field_0xE6: undefined,
    pub field_0xE7: undefined,
}
#[repr(C)]
pub struct dungeon_init {
    pub id: dungeon_id_8,
    pub floor: u8,
    pub field_0x2: undefined2,
    pub field_0x4: undefined,
    pub nonstory_flag: bool_,
    pub recruiting_enabled: bool_,
    pub force_disable_recruiting: bool_,
    pub field_0x8: undefined,
    pub field_0x9: undefined,
    pub send_home_disabled: bool_,
    pub hidden_land_flag: bool_,
    pub skip_faint_animation_flag: bool_,
    pub dungeon_objective: dungeon_objective_8,
    pub field_0xE: i8,
    pub has_guest_pokemon: bool_,
    pub send_help_item: bool_,
    pub show_rescues_left: bool_,
    pub field_0x12: undefined,
    pub field_0x13: undefined,
    pub field_0x14: undefined4,
    pub field_0x18: undefined4,
    pub guest_pokemon: [ground_monster; 2usize],
    pub field_0xA4: undefined,
    pub field_0xA5: undefined,
    pub field_0xA6: undefined,
    pub field_0xA7: undefined,
    pub help_item: item_id_16,
    pub field_0xAA: undefined,
    pub field_0xAB: undefined,
    pub field_0xAC: undefined,
    pub field_0xAD: undefined,
    pub field_0xAE: undefined,
    pub field_0xAF: undefined,
    pub field_0xB0: undefined4,
    pub field_0xB4: undefined,
    pub field_0xB5: undefined,
    pub field_0xB6: undefined,
    pub field_0xB7: undefined,
    pub field_0xB8: undefined,
    pub field_0xB9: undefined,
    pub field_0xBA: undefined,
    pub field_0xBB: undefined,
    pub field_0xBC: undefined4,
    pub field_0xC0: unk_dungeon_init,
    pub field_0x1A8: undefined,
    pub field_0x1A9: undefined,
    pub field_0x1AA: undefined,
    pub field_0x1AB: undefined,
}
#[repr(C)]
pub struct adventure_log {
    pub completion_flags: [u32; 4usize],
    pub nb_dungeons_cleared: u32,
    pub nb_friend_rescues: u32,
    pub nb_evolutions: u32,
    pub nb_eggs_hatched: u32,
    pub successful_steals: u32,
    pub nb_faints: u32,
    pub nb_victories_on_one_floor: u32,
    pub pokemon_joined_counter: u32,
    pub pokemon_battled_counter: u32,
    pub moves_learned_counter: u32,
    pub nb_big_treasure_wins: u32,
    pub nb_recycled: u32,
    pub nb_gifts_sent: u32,
    pub pokemon_joined_flags: [u32; 37usize],
    pub pokemon_battled_flags: [u32; 37usize],
    pub moves_learned_flags: [u32; 17usize],
    pub items_acquired_flags: [u32; 44usize],
    pub special_challenge_flags: u32,
    pub sentry_duty_game_points: [u32; 5usize],
    pub current_floor: dungeon_floor_pair,
    pub padding: u16,
}
#[repr(C)]
pub struct uvec2 {
    pub x: u32,
    pub y: u32,
}
#[repr(C)]
pub struct vec2 {
    pub x: i32,
    pub y: i32,
}
#[repr(C)]
pub struct exclusive_item_stat_boost_entry {
    pub atk: i8,
    pub sp_atk: i8,
    pub def: i8,
    pub sp_def: i8,
}
#[repr(C)]
pub struct exclusive_item_effect_entry {
    pub effect_id: exclusive_item_effect_id_8,
    pub foreign_idx: u8,
}
#[repr(C)]
pub struct rankup_table_entry {
    pub field_0x0: undefined,
    pub field_0x1: undefined,
    pub field_0x2: undefined,
    pub field_0x3: undefined,
    pub field_0x4: crate::ctypes::c_int,
    pub field_0x8: crate::ctypes::c_int,
    pub field_0xc: i16,
    pub field_0xe: undefined,
    pub field_0xf: undefined,
}
#[repr(C)]
pub struct mission {
    pub status: mission_status_8,
    pub type_: mission_type_8,
    pub subtype: mission_subtype,
    pub field_0x3: undefined,
    pub dungeon_id: dungeon_id_8,
    pub floor: u8,
    pub field_0x6: undefined,
    pub field_0x7: undefined,
    pub field_0x8: crate::ctypes::c_int,
    pub field_0xc: undefined,
    pub field_0xd: undefined,
    pub client: monster_id_16,
    pub target: monster_id_16,
    pub field_0x12: i16,
    pub field_0x14: i16,
    pub reward_type: mission_reward_type_8,
    pub field_0x17: undefined,
    pub item_reward: item_id_16,
    pub restriction_type: mission_restriction_type_8,
    pub field_0x1b: undefined,
    pub restriction: mission_restriction,
    pub field_0x1e: undefined,
    pub field_0x1f: undefined,
}
#[repr(C)]
pub struct position {
    pub x: i16,
    pub y: i16,
}
#[repr(C)]
pub struct item {
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 1usize]>,
    pub held_by: u8,
    pub quantity: u16,
    pub id: item_id_16,
}
impl item {
    #[inline]
    pub fn f_exists(&self) -> bool_ {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_f_exists(&mut self, val: bool_) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn f_in_shop(&self) -> bool_ {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(1usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_f_in_shop(&mut self, val: bool_) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(1usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn f_unpaid(&self) -> bool_ {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(2usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_f_unpaid(&mut self, val: bool_) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(2usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn f_sticky(&self) -> bool_ {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(3usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_f_sticky(&mut self, val: bool_) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(3usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn f_set(&self) -> bool_ {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(4usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_f_set(&mut self, val: bool_) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(4usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn flags_unk5(&self) -> u8 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(5usize, 3u8) as u8) }
    }
    #[inline]
    pub fn set_flags_unk5(&mut self, val: u8) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(5usize, 3u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        f_exists: bool_,
        f_in_shop: bool_,
        f_unpaid: bool_,
        f_sticky: bool_,
        f_set: bool_,
        flags_unk5: u8,
    ) -> __BindgenBitfieldUnit<[u8; 1usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 1usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let f_exists: u8 = unsafe { ::core::mem::transmute(f_exists) };
            f_exists as u64
        });
        __bindgen_bitfield_unit.set(1usize, 1u8, {
            let f_in_shop: u8 = unsafe { ::core::mem::transmute(f_in_shop) };
            f_in_shop as u64
        });
        __bindgen_bitfield_unit.set(2usize, 1u8, {
            let f_unpaid: u8 = unsafe { ::core::mem::transmute(f_unpaid) };
            f_unpaid as u64
        });
        __bindgen_bitfield_unit.set(3usize, 1u8, {
            let f_sticky: u8 = unsafe { ::core::mem::transmute(f_sticky) };
            f_sticky as u64
        });
        __bindgen_bitfield_unit.set(4usize, 1u8, {
            let f_set: u8 = unsafe { ::core::mem::transmute(f_set) };
            f_set as u64
        });
        __bindgen_bitfield_unit.set(5usize, 3u8, {
            let flags_unk5: u8 = unsafe { ::core::mem::transmute(flags_unk5) };
            flags_unk5 as u64
        });
        __bindgen_bitfield_unit
    }
}
#[repr(C)]
pub struct trap {
    pub id: trap_id_8,
    pub team: u8,
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 1usize]>,
    pub field_0x3: undefined,
}
impl trap {
    #[inline]
    pub fn f_unbreakable(&self) -> bool_ {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_f_unbreakable(&mut self, val: bool_) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn flags_unk1(&self) -> u8 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(1usize, 7u8) as u8) }
    }
    #[inline]
    pub fn set_flags_unk1(&mut self, val: u8) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(1usize, 7u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        f_unbreakable: bool_,
        flags_unk1: u8,
    ) -> __BindgenBitfieldUnit<[u8; 1usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 1usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let f_unbreakable: u8 = unsafe { ::core::mem::transmute(f_unbreakable) };
            f_unbreakable as u64
        });
        __bindgen_bitfield_unit.set(1usize, 7u8, {
            let flags_unk1: u8 = unsafe { ::core::mem::transmute(flags_unk1) };
            flags_unk1 as u64
        });
        __bindgen_bitfield_unit
    }
}
#[repr(C)]
pub struct move_ {
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 1usize]>,
    pub field_0x1: undefined,
    pub _bitfield_align_2: [u8; 0],
    pub _bitfield_2: __BindgenBitfieldUnit<[u8; 2usize]>,
    pub id: move_id_16,
    pub pp: u8,
    pub ginseng: u8,
}
impl move_ {
    #[inline]
    pub fn f_exists(&self) -> bool_ {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_f_exists(&mut self, val: bool_) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn f_subsequent_in_link_chain(&self) -> bool_ {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(1usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_f_subsequent_in_link_chain(&mut self, val: bool_) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(1usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn f_enabled_for_ai(&self) -> bool_ {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(2usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_f_enabled_for_ai(&mut self, val: bool_) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(2usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn f_set(&self) -> bool_ {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(3usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_f_set(&mut self, val: bool_) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(3usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn f_last_used(&self) -> bool_ {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(4usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_f_last_used(&mut self, val: bool_) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(4usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn f_disabled(&self) -> bool_ {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(5usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_f_disabled(&mut self, val: bool_) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(5usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn flags0_unk6(&self) -> u8 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(6usize, 2u8) as u8) }
    }
    #[inline]
    pub fn set_flags0_unk6(&mut self, val: u8) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(6usize, 2u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        f_exists: bool_,
        f_subsequent_in_link_chain: bool_,
        f_enabled_for_ai: bool_,
        f_set: bool_,
        f_last_used: bool_,
        f_disabled: bool_,
        flags0_unk6: u8,
    ) -> __BindgenBitfieldUnit<[u8; 1usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 1usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let f_exists: u8 = unsafe { ::core::mem::transmute(f_exists) };
            f_exists as u64
        });
        __bindgen_bitfield_unit.set(1usize, 1u8, {
            let f_subsequent_in_link_chain: u8 =
                unsafe { ::core::mem::transmute(f_subsequent_in_link_chain) };
            f_subsequent_in_link_chain as u64
        });
        __bindgen_bitfield_unit.set(2usize, 1u8, {
            let f_enabled_for_ai: u8 = unsafe { ::core::mem::transmute(f_enabled_for_ai) };
            f_enabled_for_ai as u64
        });
        __bindgen_bitfield_unit.set(3usize, 1u8, {
            let f_set: u8 = unsafe { ::core::mem::transmute(f_set) };
            f_set as u64
        });
        __bindgen_bitfield_unit.set(4usize, 1u8, {
            let f_last_used: u8 = unsafe { ::core::mem::transmute(f_last_used) };
            f_last_used as u64
        });
        __bindgen_bitfield_unit.set(5usize, 1u8, {
            let f_disabled: u8 = unsafe { ::core::mem::transmute(f_disabled) };
            f_disabled as u64
        });
        __bindgen_bitfield_unit.set(6usize, 2u8, {
            let flags0_unk6: u8 = unsafe { ::core::mem::transmute(flags0_unk6) };
            flags0_unk6 as u64
        });
        __bindgen_bitfield_unit
    }
    #[inline]
    pub fn f_sealed(&self) -> bool_ {
        unsafe { ::core::mem::transmute(self._bitfield_2.get(0usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_f_sealed(&mut self, val: bool_) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_2.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn flags2_unk1(&self) -> u16 {
        unsafe { ::core::mem::transmute(self._bitfield_2.get(1usize, 2u8) as u16) }
    }
    #[inline]
    pub fn set_flags2_unk1(&mut self, val: u16) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            self._bitfield_2.set(1usize, 2u8, val as u64)
        }
    }
    #[inline]
    pub fn f_consume_pp(&self) -> bool_ {
        unsafe { ::core::mem::transmute(self._bitfield_2.get(3usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_f_consume_pp(&mut self, val: bool_) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_2.set(3usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn f_consume_2_pp(&self) -> bool_ {
        unsafe { ::core::mem::transmute(self._bitfield_2.get(4usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_f_consume_2_pp(&mut self, val: bool_) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_2.set(4usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn flags2_unk5(&self) -> u16 {
        unsafe { ::core::mem::transmute(self._bitfield_2.get(5usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_flags2_unk5(&mut self, val: u16) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            self._bitfield_2.set(5usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn f_consume_4_pp(&self) -> bool_ {
        unsafe { ::core::mem::transmute(self._bitfield_2.get(6usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_f_consume_4_pp(&mut self, val: bool_) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_2.set(6usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn flags2_unk7(&self) -> u16 {
        unsafe { ::core::mem::transmute(self._bitfield_2.get(7usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_flags2_unk7(&mut self, val: u16) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            self._bitfield_2.set(7usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn flags2_unk8(&self) -> u16 {
        unsafe { ::core::mem::transmute(self._bitfield_2.get(8usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_flags2_unk8(&mut self, val: u16) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            self._bitfield_2.set(8usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn f_exclusive_item_pp_boost(&self) -> bool_ {
        unsafe { ::core::mem::transmute(self._bitfield_2.get(9usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_f_exclusive_item_pp_boost(&mut self, val: bool_) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_2.set(9usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn flags3_unk10(&self) -> u16 {
        unsafe { ::core::mem::transmute(self._bitfield_2.get(10usize, 6u8) as u16) }
    }
    #[inline]
    pub fn set_flags3_unk10(&mut self, val: u16) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            self._bitfield_2.set(10usize, 6u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_2(
        f_sealed: bool_,
        flags2_unk1: u16,
        f_consume_pp: bool_,
        f_consume_2_pp: bool_,
        flags2_unk5: u16,
        f_consume_4_pp: bool_,
        flags2_unk7: u16,
        flags2_unk8: u16,
        f_exclusive_item_pp_boost: bool_,
        flags3_unk10: u16,
    ) -> __BindgenBitfieldUnit<[u8; 2usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 2usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let f_sealed: u8 = unsafe { ::core::mem::transmute(f_sealed) };
            f_sealed as u64
        });
        __bindgen_bitfield_unit.set(1usize, 2u8, {
            let flags2_unk1: u16 = unsafe { ::core::mem::transmute(flags2_unk1) };
            flags2_unk1 as u64
        });
        __bindgen_bitfield_unit.set(3usize, 1u8, {
            let f_consume_pp: u8 = unsafe { ::core::mem::transmute(f_consume_pp) };
            f_consume_pp as u64
        });
        __bindgen_bitfield_unit.set(4usize, 1u8, {
            let f_consume_2_pp: u8 = unsafe { ::core::mem::transmute(f_consume_2_pp) };
            f_consume_2_pp as u64
        });
        __bindgen_bitfield_unit.set(5usize, 1u8, {
            let flags2_unk5: u16 = unsafe { ::core::mem::transmute(flags2_unk5) };
            flags2_unk5 as u64
        });
        __bindgen_bitfield_unit.set(6usize, 1u8, {
            let f_consume_4_pp: u8 = unsafe { ::core::mem::transmute(f_consume_4_pp) };
            f_consume_4_pp as u64
        });
        __bindgen_bitfield_unit.set(7usize, 1u8, {
            let flags2_unk7: u16 = unsafe { ::core::mem::transmute(flags2_unk7) };
            flags2_unk7 as u64
        });
        __bindgen_bitfield_unit.set(8usize, 1u8, {
            let flags2_unk8: u16 = unsafe { ::core::mem::transmute(flags2_unk8) };
            flags2_unk8 as u64
        });
        __bindgen_bitfield_unit.set(9usize, 1u8, {
            let f_exclusive_item_pp_boost: u8 =
                unsafe { ::core::mem::transmute(f_exclusive_item_pp_boost) };
            f_exclusive_item_pp_boost as u64
        });
        __bindgen_bitfield_unit.set(10usize, 6u8, {
            let flags3_unk10: u16 = unsafe { ::core::mem::transmute(flags3_unk10) };
            flags3_unk10 as u64
        });
        __bindgen_bitfield_unit
    }
}
#[repr(C)]
pub struct damage_data {
    pub damage: crate::ctypes::c_int,
    pub damage_source: damage_source::Type,
    pub type_matchup: type_matchup::Type,
    pub type_: type_id_8,
    pub category: move_category_8,
    pub critical_hit: bool_,
    pub field_0xF: undefined,
    pub field_0x10: undefined,
    pub field_0x11: undefined,
    pub field_0x12: undefined,
    pub field_0x13: undefined,
}
#[repr(C)]
pub struct monster_stat_modifiers {
    pub offensive_stages: [i16; 2usize],
    pub defensive_stages: [i16; 2usize],
    pub hit_chance_stages: [i16; 2usize],
    pub flash_fire_boost: bool_,
    pub field_0xd: undefined,
    pub field_0xe: undefined,
    pub field_0xf: undefined,
    pub offensive_multipliers: [crate::ctypes::c_int; 2usize],
    pub defensive_multipliers: [crate::ctypes::c_int; 2usize],
}
#[repr(C, packed)]
pub struct statuses {
    pub roost: bool_,
    pub field_0x1: u8,
    pub field_0x2: u8,
    pub field_0x3: undefined,
    pub field_0x4: undefined,
    pub field_0x5: undefined,
    pub field_0x6: undefined,
    pub field_0x7: undefined,
    pub field_0x8: undefined,
    pub field_0x9: undefined,
    pub field_0xa: undefined,
    pub wrapped_opponent: *mut entity,
    pub field_0xf: undefined,
    pub field_0x10: undefined,
    pub field_0x11: undefined,
    pub field_0x12: undefined,
    pub monster_behavior: monster_behavior_8,
    pub sleep: u8,
    pub sleep_turns: u8,
    pub burn: u8,
    pub burn_turns: u8,
    pub burn_damage_countdown: u8,
    pub field_0x19: undefined,
    pub field_0x1a: undefined,
    pub freeze: u8,
    pub field_0x1c: undefined,
    pub field_0x1d: undefined,
    pub field_0x1e: undefined,
    pub field_0x1f: undefined,
    pub field_0x20: undefined,
    pub field_0x21: undefined,
    pub field_0x22: undefined,
    pub freeze_turns: u8,
    pub freeze_damage_countdown: u8,
    pub field_0x25: undefined,
    pub field_0x26: undefined,
    pub cringe: u8,
    pub cringe_turns: u8,
    pub bide: u8,
    pub bide_turns: u8,
    pub bide_move_slot: u8,
    pub reflect: u8,
    pub reflect_turns: u8,
    pub reflect_damage_countdown: u8,
    pub curse: u8,
    pub field_0x30: undefined,
    pub field_0x31: undefined,
    pub curse_turns: u8,
    pub curse_damage_countdown: u8,
    pub field_0x34: undefined,
    pub field_0x35: undefined,
    pub field_0x36: undefined,
    pub leech_seed: u8,
    pub field_0x38: undefined,
    pub field_0x39: undefined,
    pub field_0x3a: undefined,
    pub field_0x3b: undefined,
    pub field_0x3c: undefined,
    pub field_0x3d: undefined,
    pub field_0x3e: undefined,
    pub field_0x3f: undefined,
    pub leech_seed_turns: u8,
    pub leech_seed_damage_countdown: u8,
    pub field_0x42: undefined,
    pub sure_shot: u8,
    pub sure_shot_turns: u8,
    pub long_toss: u8,
    pub invisible: u8,
    pub invisible_turns: u8,
    pub blinded: u8,
    pub blinded_turns: u8,
    pub muzzled: u8,
    pub muzzled_turns: u8,
    pub miracle_eye: u8,
    pub miracle_eye_turns: u8,
    pub magnet_rise: u8,
    pub magnet_rise_turns: u8,
    pub power_ears: bool_,
    pub scanning: bool_,
    pub stair_spotter: bool_,
    pub field_0x53: undefined,
    pub grudge: bool_,
    pub exposed: bool_,
    pub field_0x56: undefined,
    pub boss_flag: bool_,
    pub field_0x58: undefined,
    pub field_0x59: undefined,
    pub in_action: bool_,
    pub terrified: bool_,
    pub terrified_turns: u8,
    pub perish_song_turns: u8,
    pub no_slip_cap_counter: u8,
    pub field_0x5f: undefined,
    pub field_0x60: undefined,
    pub field_0x61: undefined,
    pub high_up: bool_,
    pub field_0x63: undefined,
    pub field_0x64: undefined,
    pub field_0x65: undefined,
    pub field_0x66: undefined,
    pub speed_stage: crate::ctypes::c_int,
    pub speed_up_counters: [u8; 5usize],
    pub speed_down_counters: [u8; 5usize],
    pub stockpile_stage: u8,
}
#[repr(C)]
pub struct status_icon_flags {
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 5usize]>,
    pub field_0x5: undefined,
    pub field_0x6: undefined,
    pub field_0x7: undefined,
}
impl status_icon_flags {
    #[inline]
    pub fn f_sleepless(&self) -> bool_ {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_f_sleepless(&mut self, val: bool_) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn f_burn(&self) -> bool_ {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(1usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_f_burn(&mut self, val: bool_) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(1usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn f_poison(&self) -> bool_ {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(2usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_f_poison(&mut self, val: bool_) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(2usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn f_toxic(&self) -> bool_ {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(3usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_f_toxic(&mut self, val: bool_) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(3usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn f_confused(&self) -> bool_ {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(4usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_f_confused(&mut self, val: bool_) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(4usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn f_cowering(&self) -> bool_ {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(5usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_f_cowering(&mut self, val: bool_) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(5usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn f_taunt(&self) -> bool_ {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(6usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_f_taunt(&mut self, val: bool_) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(6usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn f_encore(&self) -> bool_ {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(7usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_f_encore(&mut self, val: bool_) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(7usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn f_reflect(&self) -> bool_ {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(8usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_f_reflect(&mut self, val: bool_) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(8usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn f_safeguard(&self) -> bool_ {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(9usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_f_safeguard(&mut self, val: bool_) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(9usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn f_light_screen(&self) -> bool_ {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(10usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_f_light_screen(&mut self, val: bool_) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(10usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn f_protect(&self) -> bool_ {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(11usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_f_protect(&mut self, val: bool_) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(11usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn f_endure(&self) -> bool_ {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(12usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_f_endure(&mut self, val: bool_) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(12usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn f_low_hp(&self) -> bool_ {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(13usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_f_low_hp(&mut self, val: bool_) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(13usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn f_curse(&self) -> bool_ {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(14usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_f_curse(&mut self, val: bool_) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(14usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn f_embargo(&self) -> bool_ {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(15usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_f_embargo(&mut self, val: bool_) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(15usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn f_sure_shot(&self) -> bool_ {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(16usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_f_sure_shot(&mut self, val: bool_) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(16usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn f_whiffer(&self) -> bool_ {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(17usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_f_whiffer(&mut self, val: bool_) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(17usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn f_set_damage(&self) -> bool_ {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(18usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_f_set_damage(&mut self, val: bool_) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(18usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn f_focus_energy(&self) -> bool_ {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(19usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_f_focus_energy(&mut self, val: bool_) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(19usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn f_blinded(&self) -> bool_ {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(20usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_f_blinded(&mut self, val: bool_) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(20usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn f_cross_eyed(&self) -> bool_ {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(21usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_f_cross_eyed(&mut self, val: bool_) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(21usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn f_eyedrops(&self) -> bool_ {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(22usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_f_eyedrops(&mut self, val: bool_) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(22usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn f_muzzled(&self) -> bool_ {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(23usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_f_muzzled(&mut self, val: bool_) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(23usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn f_grudge(&self) -> bool_ {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(24usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_f_grudge(&mut self, val: bool_) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(24usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn f_exposed(&self) -> bool_ {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(25usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_f_exposed(&mut self, val: bool_) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(25usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn f_sleep(&self) -> bool_ {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(26usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_f_sleep(&mut self, val: bool_) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(26usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn f_lowered_stat(&self) -> bool_ {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(27usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_f_lowered_stat(&mut self, val: bool_) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(27usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn f_heal_block(&self) -> bool_ {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(28usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_f_heal_block(&mut self, val: bool_) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(28usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn f_miracle_eye(&self) -> bool_ {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(29usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_f_miracle_eye(&mut self, val: bool_) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(29usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn f_red_exclamation_mark(&self) -> bool_ {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(30usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_f_red_exclamation_mark(&mut self, val: bool_) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(30usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn f_magnet_rise(&self) -> bool_ {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(31usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_f_magnet_rise(&mut self, val: bool_) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(31usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn f_freeze(&self) -> bool_ {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(32usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_f_freeze(&mut self, val: bool_) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(32usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn flags_unk2(&self) -> u8 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(33usize, 7u8) as u8) }
    }
    #[inline]
    pub fn set_flags_unk2(&mut self, val: u8) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(33usize, 7u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        f_sleepless: bool_,
        f_burn: bool_,
        f_poison: bool_,
        f_toxic: bool_,
        f_confused: bool_,
        f_cowering: bool_,
        f_taunt: bool_,
        f_encore: bool_,
        f_reflect: bool_,
        f_safeguard: bool_,
        f_light_screen: bool_,
        f_protect: bool_,
        f_endure: bool_,
        f_low_hp: bool_,
        f_curse: bool_,
        f_embargo: bool_,
        f_sure_shot: bool_,
        f_whiffer: bool_,
        f_set_damage: bool_,
        f_focus_energy: bool_,
        f_blinded: bool_,
        f_cross_eyed: bool_,
        f_eyedrops: bool_,
        f_muzzled: bool_,
        f_grudge: bool_,
        f_exposed: bool_,
        f_sleep: bool_,
        f_lowered_stat: bool_,
        f_heal_block: bool_,
        f_miracle_eye: bool_,
        f_red_exclamation_mark: bool_,
        f_magnet_rise: bool_,
        f_freeze: bool_,
        flags_unk2: u8,
    ) -> __BindgenBitfieldUnit<[u8; 5usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 5usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let f_sleepless: u8 = unsafe { ::core::mem::transmute(f_sleepless) };
            f_sleepless as u64
        });
        __bindgen_bitfield_unit.set(1usize, 1u8, {
            let f_burn: u8 = unsafe { ::core::mem::transmute(f_burn) };
            f_burn as u64
        });
        __bindgen_bitfield_unit.set(2usize, 1u8, {
            let f_poison: u8 = unsafe { ::core::mem::transmute(f_poison) };
            f_poison as u64
        });
        __bindgen_bitfield_unit.set(3usize, 1u8, {
            let f_toxic: u8 = unsafe { ::core::mem::transmute(f_toxic) };
            f_toxic as u64
        });
        __bindgen_bitfield_unit.set(4usize, 1u8, {
            let f_confused: u8 = unsafe { ::core::mem::transmute(f_confused) };
            f_confused as u64
        });
        __bindgen_bitfield_unit.set(5usize, 1u8, {
            let f_cowering: u8 = unsafe { ::core::mem::transmute(f_cowering) };
            f_cowering as u64
        });
        __bindgen_bitfield_unit.set(6usize, 1u8, {
            let f_taunt: u8 = unsafe { ::core::mem::transmute(f_taunt) };
            f_taunt as u64
        });
        __bindgen_bitfield_unit.set(7usize, 1u8, {
            let f_encore: u8 = unsafe { ::core::mem::transmute(f_encore) };
            f_encore as u64
        });
        __bindgen_bitfield_unit.set(8usize, 1u8, {
            let f_reflect: u8 = unsafe { ::core::mem::transmute(f_reflect) };
            f_reflect as u64
        });
        __bindgen_bitfield_unit.set(9usize, 1u8, {
            let f_safeguard: u8 = unsafe { ::core::mem::transmute(f_safeguard) };
            f_safeguard as u64
        });
        __bindgen_bitfield_unit.set(10usize, 1u8, {
            let f_light_screen: u8 = unsafe { ::core::mem::transmute(f_light_screen) };
            f_light_screen as u64
        });
        __bindgen_bitfield_unit.set(11usize, 1u8, {
            let f_protect: u8 = unsafe { ::core::mem::transmute(f_protect) };
            f_protect as u64
        });
        __bindgen_bitfield_unit.set(12usize, 1u8, {
            let f_endure: u8 = unsafe { ::core::mem::transmute(f_endure) };
            f_endure as u64
        });
        __bindgen_bitfield_unit.set(13usize, 1u8, {
            let f_low_hp: u8 = unsafe { ::core::mem::transmute(f_low_hp) };
            f_low_hp as u64
        });
        __bindgen_bitfield_unit.set(14usize, 1u8, {
            let f_curse: u8 = unsafe { ::core::mem::transmute(f_curse) };
            f_curse as u64
        });
        __bindgen_bitfield_unit.set(15usize, 1u8, {
            let f_embargo: u8 = unsafe { ::core::mem::transmute(f_embargo) };
            f_embargo as u64
        });
        __bindgen_bitfield_unit.set(16usize, 1u8, {
            let f_sure_shot: u8 = unsafe { ::core::mem::transmute(f_sure_shot) };
            f_sure_shot as u64
        });
        __bindgen_bitfield_unit.set(17usize, 1u8, {
            let f_whiffer: u8 = unsafe { ::core::mem::transmute(f_whiffer) };
            f_whiffer as u64
        });
        __bindgen_bitfield_unit.set(18usize, 1u8, {
            let f_set_damage: u8 = unsafe { ::core::mem::transmute(f_set_damage) };
            f_set_damage as u64
        });
        __bindgen_bitfield_unit.set(19usize, 1u8, {
            let f_focus_energy: u8 = unsafe { ::core::mem::transmute(f_focus_energy) };
            f_focus_energy as u64
        });
        __bindgen_bitfield_unit.set(20usize, 1u8, {
            let f_blinded: u8 = unsafe { ::core::mem::transmute(f_blinded) };
            f_blinded as u64
        });
        __bindgen_bitfield_unit.set(21usize, 1u8, {
            let f_cross_eyed: u8 = unsafe { ::core::mem::transmute(f_cross_eyed) };
            f_cross_eyed as u64
        });
        __bindgen_bitfield_unit.set(22usize, 1u8, {
            let f_eyedrops: u8 = unsafe { ::core::mem::transmute(f_eyedrops) };
            f_eyedrops as u64
        });
        __bindgen_bitfield_unit.set(23usize, 1u8, {
            let f_muzzled: u8 = unsafe { ::core::mem::transmute(f_muzzled) };
            f_muzzled as u64
        });
        __bindgen_bitfield_unit.set(24usize, 1u8, {
            let f_grudge: u8 = unsafe { ::core::mem::transmute(f_grudge) };
            f_grudge as u64
        });
        __bindgen_bitfield_unit.set(25usize, 1u8, {
            let f_exposed: u8 = unsafe { ::core::mem::transmute(f_exposed) };
            f_exposed as u64
        });
        __bindgen_bitfield_unit.set(26usize, 1u8, {
            let f_sleep: u8 = unsafe { ::core::mem::transmute(f_sleep) };
            f_sleep as u64
        });
        __bindgen_bitfield_unit.set(27usize, 1u8, {
            let f_lowered_stat: u8 = unsafe { ::core::mem::transmute(f_lowered_stat) };
            f_lowered_stat as u64
        });
        __bindgen_bitfield_unit.set(28usize, 1u8, {
            let f_heal_block: u8 = unsafe { ::core::mem::transmute(f_heal_block) };
            f_heal_block as u64
        });
        __bindgen_bitfield_unit.set(29usize, 1u8, {
            let f_miracle_eye: u8 = unsafe { ::core::mem::transmute(f_miracle_eye) };
            f_miracle_eye as u64
        });
        __bindgen_bitfield_unit.set(30usize, 1u8, {
            let f_red_exclamation_mark: u8 =
                unsafe { ::core::mem::transmute(f_red_exclamation_mark) };
            f_red_exclamation_mark as u64
        });
        __bindgen_bitfield_unit.set(31usize, 1u8, {
            let f_magnet_rise: u8 = unsafe { ::core::mem::transmute(f_magnet_rise) };
            f_magnet_rise as u64
        });
        __bindgen_bitfield_unit.set(32usize, 1u8, {
            let f_freeze: u8 = unsafe { ::core::mem::transmute(f_freeze) };
            f_freeze as u64
        });
        __bindgen_bitfield_unit.set(33usize, 7u8, {
            let flags_unk2: u8 = unsafe { ::core::mem::transmute(flags_unk2) };
            flags_unk2 as u64
        });
        __bindgen_bitfield_unit
    }
}
#[repr(C)]
pub struct monster {
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 2usize]>,
    pub id: monster_id_16,
    pub apparent_id: monster_id_16,
    pub is_not_team_member: bool_,
    pub is_team_leader: bool_,
    pub is_ally: bool_,
    pub shopkeeper: shopkeeper_mode_8,
    pub level: u8,
    pub field_0xb: undefined,
    pub team_index: i16,
    pub iq: i16,
    pub hp: i16,
    pub max_hp_stat: i16,
    pub field_0x14: undefined,
    pub field_0x15: undefined,
    pub max_hp_boost: i16,
    pub field_0x18: undefined,
    pub field_0x19: undefined,
    pub atk: u8,
    pub sp_atk: u8,
    pub def: u8,
    pub sp_def: u8,
    pub field_0x1e: undefined,
    pub field_0x1f: undefined,
    pub exp: crate::ctypes::c_int,
    pub stat_modifiers: monster_stat_modifiers,
    pub hidden_power_base_power: i16,
    pub hidden_power_type: type_id_8,
    pub field_0x47: undefined,
    pub joined_at: dungeon_id_8,
    pub field_0x49: undefined,
    pub action_id: action_16,
    pub direction: direction_id_8,
    pub field_0x4d: undefined,
    pub action_use_idx: u8,
    pub field_0x4F: undefined,
    pub field_0x50: undefined,
    pub field_0x51: undefined,
    pub field_0x52: undefined,
    pub field_0x53: undefined,
    pub field_0x54: undefined,
    pub field_0x55: undefined,
    pub field_0x56: undefined,
    pub field_0x57: undefined,
    pub field_0x58: undefined,
    pub field_0x59: undefined,
    pub field_0x5a: undefined,
    pub field_0x5b: undefined,
    pub field_0x5c: undefined,
    pub field_0x5d: undefined,
    pub type1: type_id_8,
    pub type2: type_id_8,
    pub ability1: ability_id_8,
    pub ability2: ability_id_8,
    pub held_item: item,
    pub held_item_id: u16,
    pub prev_pos: position,
    pub prev_pos2: position,
    pub prev_pos3: position,
    pub prev_pos4: position,
    pub field_0x7a: undefined,
    pub field_0x7b: undefined,
    pub ai_objective: ai_objective_8,
    pub ai_not_next_to_target: bool_,
    pub ai_targeting_enemy: bool_,
    pub ai_turning_around: bool_,
    pub ai_target_spawn_genid: u16,
    pub field_0x82: undefined,
    pub field_0x83: undefined,
    pub ai_target: *mut entity,
    pub field_0x88: undefined,
    pub field_0x89: undefined,
    pub field_0x8a: undefined,
    pub field_0x8b: undefined,
    pub ai_target_pos: position,
    pub iq_skill_menu_flags: [u32; 3usize],
    pub iq_skill_flags: [u32; 3usize],
    pub tactic: tactic_id_8,
    pub statuses: statuses,
    pub field_0x11f: undefined,
    pub field_0x120: undefined,
    pub field_0x121: undefined,
    pub field_0x122: undefined,
    pub field_0x123: undefined,
    pub moves: [move_; 4usize],
    pub move_flags: u8,
    pub field_0x145: undefined,
    pub belly: i16,
    pub belly_thousandths: i16,
    pub max_belly: i16,
    pub max_belly_thousandths: i16,
    pub ai_ally_skip: bool_,
    pub ai_next_to_target: bool_,
    pub field_0x150: undefined,
    pub field_0x151: undefined,
    pub already_acted: bool_,
    pub field_0x153: undefined,
    pub field_0x154: undefined,
    pub field_0x155: undefined,
    pub field_0x156: undefined,
    pub field_0x157: undefined,
    pub field_0x158: undefined,
    pub field_0x159: undefined,
    pub field_0x15a: undefined,
    pub field_0x15b: undefined,
    pub field_0x15c: undefined,
    pub field_0x15d: undefined,
    pub field_0x15e: undefined,
    pub field_0x15f: undefined,
    pub field_0x160: undefined,
    pub cannot_give_items: bool_,
    pub field_0x162: undefined,
    pub field_0x163: undefined,
    pub field_0x164: undefined,
    pub field_0x165: undefined,
    pub field_0x166: undefined,
    pub field_0x167: undefined,
    pub field_0x168: undefined,
    pub field_0x169: undefined,
    pub force_turn: bool_,
    pub field_0x16b: undefined,
    pub field_0x16c: undefined,
    pub field_0x16d: undefined,
    pub field_0x16e: undefined,
    pub field_0x16f: undefined,
    pub field_0x170: undefined,
    pub field_0x171: undefined,
    pub field_0x172: undefined,
    pub field_0x173: undefined,
    pub field_0x174: undefined,
    pub field_0x175: undefined,
    pub field_0x176: undefined,
    pub field_0x177: undefined,
    pub field_0x178: undefined,
    pub field_0x179: undefined,
    pub field_0x17a: undefined,
    pub field_0x17b: undefined,
    pub field_0x17c: undefined,
    pub field_0x17d: undefined,
    pub target_pos: position,
    pub pixel_pos: position,
    pub field_0x186: undefined,
    pub field_0x187: undefined,
    pub field_0x188: undefined,
    pub field_0x189: undefined,
    pub field_0x18a: undefined,
    pub field_0x18b: undefined,
    pub field_0x18c: undefined,
    pub field_0x18d: undefined,
    pub field_0x18e: undefined,
    pub field_0x18f: undefined,
    pub field_0x190: undefined,
    pub field_0x191: undefined,
    pub field_0x192: undefined,
    pub field_0x193: undefined,
    pub field_0x194: undefined,
    pub field_0x195: undefined,
    pub field_0x196: undefined,
    pub field_0x197: undefined,
    pub field_0x198: undefined,
    pub field_0x199: undefined,
    pub field_0x19a: undefined,
    pub field_0x19b: undefined,
    pub pos: position,
    pub field_0x1a0: undefined,
    pub field_0x1a1: undefined,
    pub field_0x1a2: undefined,
    pub field_0x1a3: undefined,
    pub field_0x1a4: undefined,
    pub field_0x1a5: undefined,
    pub field_0x1a6: undefined,
    pub field_0x1a7: undefined,
    pub field_0x1a8: undefined,
    pub field_0x1a9: undefined,
    pub field_0x1aa: undefined,
    pub field_0x1ab: undefined,
    pub field_0x1ac: undefined,
    pub field_0x1ad: undefined,
    pub field_0x1ae: undefined,
    pub field_0x1af: undefined,
    pub field_0x1b0: undefined,
    pub field_0x1b1: undefined,
    pub field_0x1b2: undefined,
    pub field_0x1b3: undefined,
    pub walk_anim_frames_left: u16,
    pub field_0x1b6: undefined,
    pub field_0x1b7: undefined,
    pub field_0x1b8: undefined,
    pub field_0x1b9: undefined,
    pub field_0x1ba: undefined,
    pub field_0x1bb: undefined,
    pub field_0x1bc: undefined,
    pub field_0x1bd: undefined,
    pub field_0x1be: undefined,
    pub field_0x1bf: undefined,
    pub field_0x1c0: undefined,
    pub field_0x1c1: undefined,
    pub field_0x1c2: undefined,
    pub field_0x1c3: undefined,
    pub field_0x1c4: undefined,
    pub field_0x1c5: undefined,
    pub field_0x1c6: undefined,
    pub field_0x1c7: undefined,
    pub field_0x1c8: undefined,
    pub field_0x1c9: undefined,
    pub field_0x1ca: undefined,
    pub field_0x1cb: undefined,
    pub field_0x1cc: undefined,
    pub field_0x1cd: undefined,
    pub field_0x1ce: undefined,
    pub field_0x1cf: undefined,
    pub field_0x1d0: undefined,
    pub field_0x1d1: undefined,
    pub field_0x1d2: undefined,
    pub field_0x1d3: undefined,
    pub field_0x1d4: undefined,
    pub field_0x1d5: undefined,
    pub field_0x1d6: undefined,
    pub field_0x1d7: undefined,
    pub field_0x1d8: undefined,
    pub field_0x1d9: undefined,
    pub field_0x1da: undefined,
    pub field_0x1db: undefined,
    pub field_0x1dc: undefined,
    pub field_0x1dd: undefined,
    pub field_0x1de: undefined,
    pub field_0x1df: undefined,
    pub field_0x1e0: undefined,
    pub field_0x1e1: undefined,
    pub field_0x1e2: undefined,
    pub field_0x1e3: undefined,
    pub field_0x1e4: undefined,
    pub field_0x1e5: undefined,
    pub field_0x1e6: undefined,
    pub field_0x1e7: undefined,
    pub field_0x1e8: undefined,
    pub field_0x1e9: undefined,
    pub field_0x1ea: undefined,
    pub field_0x1eb: undefined,
    pub field_0x1ec: undefined,
    pub field_0x1ed: undefined,
    pub field_0x1ee: undefined,
    pub field_0x1ef: undefined,
    pub field_0x1f0: undefined,
    pub field_0x1f1: undefined,
    pub field_0x1f2: undefined,
    pub field_0x1f3: undefined,
    pub field_0x1f4: undefined,
    pub field_0x1f5: undefined,
    pub field_0x1f6: undefined,
    pub field_0x1f7: undefined,
    pub field_0x1f8: undefined,
    pub field_0x1f9: undefined,
    pub field_0x1fa: undefined,
    pub field_0x1fb: undefined,
    pub field_0x1fc: undefined,
    pub field_0x1fd: undefined,
    pub field_0x1fe: undefined,
    pub field_0x1ff: undefined,
    pub field_0x200: undefined,
    pub field_0x201: undefined,
    pub field_0x202: undefined,
    pub field_0x203: undefined,
    pub field_0x204: undefined,
    pub field_0x205: undefined,
    pub field_0x206: undefined,
    pub field_0x207: undefined,
    pub field_0x208: undefined,
    pub field_0x209: undefined,
    pub field_0x20a: undefined,
    pub field_0x20b: undefined,
    pub field_0x20c: undefined,
    pub field_0x20d: undefined,
    pub field_0x20e: undefined,
    pub field_0x20f: undefined,
    pub hp_fractional: u8,
    pub field_0x211: undefined,
    pub field_0x212: undefined,
    pub field_0x213: undefined,
    pub field_0x214: undefined,
    pub field_0x215: undefined,
    pub field_0x216: undefined,
    pub field_0x217: undefined,
    pub status_icons: status_icon_flags,
    pub field_0x220: undefined,
    pub field_0x221: undefined,
    pub field_0x222: undefined,
    pub field_0x223: undefined,
    pub exclusive_item_atk_boost: u8,
    pub exclusive_item_sp_atk_boost: u8,
    pub exclusive_item_def_boost: u8,
    pub exclusive_item_sp_def_boost: u8,
    pub exclusive_item_effect_flags: [u32; 5usize],
    pub field_0x23c: undefined,
    pub field_0x23d: undefined,
    pub field_0x23e: undefined,
    pub field_0x23f: undefined,
}
impl monster {
    #[inline]
    pub fn f_ai_unk(&self) -> bool_ {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_f_ai_unk(&mut self, val: bool_) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn f_ai_skip_turn(&self) -> bool_ {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(1usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_f_ai_skip_turn(&mut self, val: bool_) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(1usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn flags_unk2(&self) -> u16 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(2usize, 3u8) as u16) }
    }
    #[inline]
    pub fn set_flags_unk2(&mut self, val: u16) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            self._bitfield_1.set(2usize, 3u8, val as u64)
        }
    }
    #[inline]
    pub fn f_swapping_places(&self) -> bool_ {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(5usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_f_swapping_places(&mut self, val: bool_) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(5usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn flags_unk6(&self) -> u16 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(6usize, 3u8) as u16) }
    }
    #[inline]
    pub fn set_flags_unk6(&mut self, val: u16) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            self._bitfield_1.set(6usize, 3u8, val as u64)
        }
    }
    #[inline]
    pub fn f_walking(&self) -> bool_ {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(9usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_f_walking(&mut self, val: bool_) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(9usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn flags_unk10(&self) -> u16 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(10usize, 5u8) as u16) }
    }
    #[inline]
    pub fn set_flags_unk10(&mut self, val: u16) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            self._bitfield_1.set(10usize, 5u8, val as u64)
        }
    }
    #[inline]
    pub fn f_swapping_places_petrified_ally(&self) -> bool_ {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(15usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_f_swapping_places_petrified_ally(&mut self, val: bool_) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(15usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        f_ai_unk: bool_,
        f_ai_skip_turn: bool_,
        flags_unk2: u16,
        f_swapping_places: bool_,
        flags_unk6: u16,
        f_walking: bool_,
        flags_unk10: u16,
        f_swapping_places_petrified_ally: bool_,
    ) -> __BindgenBitfieldUnit<[u8; 2usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 2usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let f_ai_unk: u8 = unsafe { ::core::mem::transmute(f_ai_unk) };
            f_ai_unk as u64
        });
        __bindgen_bitfield_unit.set(1usize, 1u8, {
            let f_ai_skip_turn: u8 = unsafe { ::core::mem::transmute(f_ai_skip_turn) };
            f_ai_skip_turn as u64
        });
        __bindgen_bitfield_unit.set(2usize, 3u8, {
            let flags_unk2: u16 = unsafe { ::core::mem::transmute(flags_unk2) };
            flags_unk2 as u64
        });
        __bindgen_bitfield_unit.set(5usize, 1u8, {
            let f_swapping_places: u8 = unsafe { ::core::mem::transmute(f_swapping_places) };
            f_swapping_places as u64
        });
        __bindgen_bitfield_unit.set(6usize, 3u8, {
            let flags_unk6: u16 = unsafe { ::core::mem::transmute(flags_unk6) };
            flags_unk6 as u64
        });
        __bindgen_bitfield_unit.set(9usize, 1u8, {
            let f_walking: u8 = unsafe { ::core::mem::transmute(f_walking) };
            f_walking as u64
        });
        __bindgen_bitfield_unit.set(10usize, 5u8, {
            let flags_unk10: u16 = unsafe { ::core::mem::transmute(flags_unk10) };
            flags_unk10 as u64
        });
        __bindgen_bitfield_unit.set(15usize, 1u8, {
            let f_swapping_places_petrified_ally: u8 =
                unsafe { ::core::mem::transmute(f_swapping_places_petrified_ally) };
            f_swapping_places_petrified_ally as u64
        });
        __bindgen_bitfield_unit
    }
}
#[repr(C)]
pub struct entity {
    pub type_: entity_type::Type,
    pub pos: position,
    pub prev_pos: position,
    pub pixel_x_shifted: crate::ctypes::c_int,
    pub pixel_y_shifted: crate::ctypes::c_int,
    pub pixel_x_shifted_mirror: crate::ctypes::c_int,
    pub pixel_y_shifted_mirror: crate::ctypes::c_int,
    pub elevation: crate::ctypes::c_int,
    pub is_visible: bool_,
    pub field_0x21: undefined,
    pub transparent: bool_,
    pub end_walk_anim_frame: u8,
    pub field_0x24: undefined,
    pub room_idx: u8,
    pub spawn_genid: u16,
    pub field_0x28: undefined,
    pub field_0x29: undefined,
    pub field_0x2a: undefined,
    pub field_0x2b: undefined,
    pub field_0x2c: undefined,
    pub field_0x2d: undefined,
    pub field_0x2e: undefined,
    pub field_0x2f: undefined,
    pub field_0x30: undefined,
    pub field_0x31: undefined,
    pub field_0x32: undefined,
    pub field_0x33: undefined,
    pub field_0x34: undefined,
    pub field_0x35: undefined,
    pub field_0x36: undefined,
    pub field_0x37: undefined,
    pub idle_anim_frame: u8,
    pub field_0x39: undefined,
    pub field_0x3a: undefined,
    pub field_0x3b: undefined,
    pub field_0x3c: undefined,
    pub field_0x3d: undefined,
    pub field_0x3e: undefined,
    pub field_0x3f: undefined,
    pub field_0x40: undefined,
    pub field_0x41: undefined,
    pub field_0x42: undefined,
    pub field_0x43: undefined,
    pub field_0x44: undefined,
    pub field_0x45: undefined,
    pub field_0x46: undefined,
    pub field_0x47: undefined,
    pub field_0x48: undefined,
    pub field_0x49: undefined,
    pub field_0x4a: undefined,
    pub field_0x4b: undefined,
    pub pixel_offset: position,
    pub shadow_offset: position,
    pub field_0x54: undefined,
    pub field_0x55: undefined,
    pub field_0x56: undefined,
    pub field_0x57: undefined,
    pub field_0x58: undefined,
    pub field_0x59: undefined,
    pub field_0x5a: undefined,
    pub field_0x5b: undefined,
    pub field_0x5c: undefined,
    pub field_0x5d: undefined,
    pub field_0x5e: undefined,
    pub field_0x5f: undefined,
    pub field_0x60: undefined,
    pub field_0x61: undefined,
    pub field_0x62: undefined,
    pub field_0x63: undefined,
    pub field_0x64: undefined,
    pub field_0x65: undefined,
    pub sprite_id: u16,
    pub sprite_id_mirror: u16,
    pub field_0x6a: undefined,
    pub field_0x6b: undefined,
    pub field_0x6c: undefined,
    pub field_0x6d: undefined,
    pub field_0x6e: undefined,
    pub field_0x6f: undefined,
    pub field_0x70: undefined,
    pub field_0x71: undefined,
    pub field_0x72: undefined,
    pub field_0x73: undefined,
    pub field_0x74: *mut crate::ctypes::c_void,
    pub field_0x78: *mut crate::ctypes::c_void,
    pub field_0x7c: *mut crate::ctypes::c_void,
    pub field_0x80: *mut crate::ctypes::c_void,
    pub field_0x84: *mut crate::ctypes::c_void,
    pub field_0x88: *mut crate::ctypes::c_void,
    pub field_0x8c: undefined,
    pub field_0x8d: undefined,
    pub field_0x8e: undefined,
    pub field_0x8f: undefined,
    pub field_0x90: undefined,
    pub field_0x91: undefined,
    pub field_0x92: undefined,
    pub field_0x93: undefined,
    pub field_0x94: undefined,
    pub field_0x95: undefined,
    pub field_0x96: undefined,
    pub field_0x97: undefined,
    pub field_0x98: undefined,
    pub field_0x99: undefined,
    pub field_0x9a: undefined,
    pub field_0x9b: undefined,
    pub field_0x9c: undefined,
    pub field_0x9d: undefined,
    pub field_0x9e: undefined,
    pub field_0x9f: undefined,
    pub field_0xa0: undefined,
    pub field_0xa1: undefined,
    pub field_0xa2: undefined,
    pub field_0xa3: undefined,
    pub graphical_direction_mirror1: direction_id_8,
    pub field_0xa5: undefined,
    pub field_0xa6: undefined,
    pub field_0xa7: undefined,
    pub field_0xa8: undefined,
    pub field_0xa9: undefined,
    pub field_0xaa: undefined,
    pub field_0xab: undefined,
    pub field_0xac: undefined,
    pub field_0xad: undefined,
    pub anim_id: u8,
    pub anim_id_mirror: u8,
    pub graphical_direction: direction_id_8,
    pub graphical_direction_mirror0: direction_id_8,
    pub field_0xb2: undefined,
    pub field_0xb3: undefined,
    pub info: *mut crate::ctypes::c_void,
}
#[repr(C)]
pub struct entity_table_hdr {
    pub monster_slot_ptrs: [*mut entity; 20usize],
    pub active_monster_ptrs: [*mut entity; 20usize],
    pub item_ptrs: [*mut entity; 64usize],
    pub trap_ptrs: [*mut entity; 64usize],
    pub hidden_stairs_ptr: *mut entity,
}
#[repr(C)]
pub struct entity_table {
    pub header: entity_table_hdr,
    pub entities: [entity; 149usize],
}
#[repr(C)]
#[repr(align(2))]
pub struct spawn_flags {
    pub _bitfield_align_1: [u16; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 2usize]>,
}
impl spawn_flags {
    #[inline]
    pub fn f_stairs(&self) -> bool_ {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_f_stairs(&mut self, val: bool_) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn f_item(&self) -> bool_ {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(1usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_f_item(&mut self, val: bool_) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(1usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn f_trap(&self) -> bool_ {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(2usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_f_trap(&mut self, val: bool_) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(2usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn f_monster(&self) -> bool_ {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(3usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_f_monster(&mut self, val: bool_) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(3usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn spawn_flags_unk4(&self) -> u16 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(4usize, 12u8) as u16) }
    }
    #[inline]
    pub fn set_spawn_flags_unk4(&mut self, val: u16) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            self._bitfield_1.set(4usize, 12u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        f_stairs: bool_,
        f_item: bool_,
        f_trap: bool_,
        f_monster: bool_,
        spawn_flags_unk4: u16,
    ) -> __BindgenBitfieldUnit<[u8; 2usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 2usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let f_stairs: u8 = unsafe { ::core::mem::transmute(f_stairs) };
            f_stairs as u64
        });
        __bindgen_bitfield_unit.set(1usize, 1u8, {
            let f_item: u8 = unsafe { ::core::mem::transmute(f_item) };
            f_item as u64
        });
        __bindgen_bitfield_unit.set(2usize, 1u8, {
            let f_trap: u8 = unsafe { ::core::mem::transmute(f_trap) };
            f_trap as u64
        });
        __bindgen_bitfield_unit.set(3usize, 1u8, {
            let f_monster: u8 = unsafe { ::core::mem::transmute(f_monster) };
            f_monster as u64
        });
        __bindgen_bitfield_unit.set(4usize, 12u8, {
            let spawn_flags_unk4: u16 = unsafe { ::core::mem::transmute(spawn_flags_unk4) };
            spawn_flags_unk4 as u64
        });
        __bindgen_bitfield_unit
    }
}
#[repr(C)]
#[repr(align(2))]
pub struct visibility_flags {
    pub _bitfield_align_1: [u16; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 2usize]>,
}
impl visibility_flags {
    #[inline]
    pub fn f_revealed(&self) -> bool_ {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_f_revealed(&mut self, val: bool_) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn f_visited(&self) -> bool_ {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(1usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_f_visited(&mut self, val: bool_) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(1usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn visibility_flags_unk2(&self) -> u16 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(2usize, 14u8) as u16) }
    }
    #[inline]
    pub fn set_visibility_flags_unk2(&mut self, val: u16) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            self._bitfield_1.set(2usize, 14u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        f_revealed: bool_,
        f_visited: bool_,
        visibility_flags_unk2: u16,
    ) -> __BindgenBitfieldUnit<[u8; 2usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 2usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let f_revealed: u8 = unsafe { ::core::mem::transmute(f_revealed) };
            f_revealed as u64
        });
        __bindgen_bitfield_unit.set(1usize, 1u8, {
            let f_visited: u8 = unsafe { ::core::mem::transmute(f_visited) };
            f_visited as u64
        });
        __bindgen_bitfield_unit.set(2usize, 14u8, {
            let visibility_flags_unk2: u16 =
                unsafe { ::core::mem::transmute(visibility_flags_unk2) };
            visibility_flags_unk2 as u64
        });
        __bindgen_bitfield_unit
    }
}
#[repr(C)]
pub struct spawn_or_visibility_flags {
    pub spawn: __BindgenUnionField<spawn_flags>,
    pub visibility: __BindgenUnionField<visibility_flags>,
    pub bindgen_union_field: u16,
}
#[repr(C)]
pub struct tile {
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 2usize]>,
    pub spawn_or_visibility_flags: spawn_or_visibility_flags,
    pub texture_id: u16,
    pub field_0x6: undefined,
    pub room: u8,
    pub walkable_neighbor_flags: [u8; 4usize],
    pub monster: *mut entity,
    pub object: *mut entity,
}
impl tile {
    #[inline]
    pub fn terrain_type(&self) -> terrain_type::Type {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(0usize, 2u8) as u32) }
    }
    #[inline]
    pub fn set_terrain_type(&mut self, val: terrain_type::Type) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(0usize, 2u8, val as u64)
        }
    }
    #[inline]
    pub fn f_corner_cuttable(&self) -> bool_ {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(2usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_f_corner_cuttable(&mut self, val: bool_) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(2usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn f_natural_junction(&self) -> bool_ {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(3usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_f_natural_junction(&mut self, val: bool_) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(3usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn f_impassable_wall(&self) -> bool_ {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(4usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_f_impassable_wall(&mut self, val: bool_) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(4usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn f_in_kecleon_shop(&self) -> bool_ {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(5usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_f_in_kecleon_shop(&mut self, val: bool_) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(5usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn f_in_monster_house(&self) -> bool_ {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(6usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_f_in_monster_house(&mut self, val: bool_) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(6usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn terrain_flags_unk7(&self) -> u16 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(7usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_terrain_flags_unk7(&mut self, val: u16) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            self._bitfield_1.set(7usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn f_unbreakable(&self) -> bool_ {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(8usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_f_unbreakable(&mut self, val: bool_) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(8usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn f_stairs(&self) -> bool_ {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(9usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_f_stairs(&mut self, val: bool_) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(9usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn terrain_flags_unk10(&self) -> u16 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(10usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_terrain_flags_unk10(&mut self, val: u16) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            self._bitfield_1.set(10usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn f_key_door(&self) -> bool_ {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(11usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_f_key_door(&mut self, val: bool_) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(11usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn f_key_door_key_locked(&self) -> bool_ {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(12usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_f_key_door_key_locked(&mut self, val: bool_) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(12usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn f_key_door_escort_locked(&self) -> bool_ {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(13usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_f_key_door_escort_locked(&mut self, val: bool_) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(13usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn terrain_flags_unk14(&self) -> u16 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(14usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_terrain_flags_unk14(&mut self, val: u16) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            self._bitfield_1.set(14usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn f_unreachable_from_stairs(&self) -> bool_ {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(15usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_f_unreachable_from_stairs(&mut self, val: bool_) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(15usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        terrain_type: terrain_type::Type,
        f_corner_cuttable: bool_,
        f_natural_junction: bool_,
        f_impassable_wall: bool_,
        f_in_kecleon_shop: bool_,
        f_in_monster_house: bool_,
        terrain_flags_unk7: u16,
        f_unbreakable: bool_,
        f_stairs: bool_,
        terrain_flags_unk10: u16,
        f_key_door: bool_,
        f_key_door_key_locked: bool_,
        f_key_door_escort_locked: bool_,
        terrain_flags_unk14: u16,
        f_unreachable_from_stairs: bool_,
    ) -> __BindgenBitfieldUnit<[u8; 2usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 2usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 2u8, {
            let terrain_type: u32 = unsafe { ::core::mem::transmute(terrain_type) };
            terrain_type as u64
        });
        __bindgen_bitfield_unit.set(2usize, 1u8, {
            let f_corner_cuttable: u8 = unsafe { ::core::mem::transmute(f_corner_cuttable) };
            f_corner_cuttable as u64
        });
        __bindgen_bitfield_unit.set(3usize, 1u8, {
            let f_natural_junction: u8 = unsafe { ::core::mem::transmute(f_natural_junction) };
            f_natural_junction as u64
        });
        __bindgen_bitfield_unit.set(4usize, 1u8, {
            let f_impassable_wall: u8 = unsafe { ::core::mem::transmute(f_impassable_wall) };
            f_impassable_wall as u64
        });
        __bindgen_bitfield_unit.set(5usize, 1u8, {
            let f_in_kecleon_shop: u8 = unsafe { ::core::mem::transmute(f_in_kecleon_shop) };
            f_in_kecleon_shop as u64
        });
        __bindgen_bitfield_unit.set(6usize, 1u8, {
            let f_in_monster_house: u8 = unsafe { ::core::mem::transmute(f_in_monster_house) };
            f_in_monster_house as u64
        });
        __bindgen_bitfield_unit.set(7usize, 1u8, {
            let terrain_flags_unk7: u16 = unsafe { ::core::mem::transmute(terrain_flags_unk7) };
            terrain_flags_unk7 as u64
        });
        __bindgen_bitfield_unit.set(8usize, 1u8, {
            let f_unbreakable: u8 = unsafe { ::core::mem::transmute(f_unbreakable) };
            f_unbreakable as u64
        });
        __bindgen_bitfield_unit.set(9usize, 1u8, {
            let f_stairs: u8 = unsafe { ::core::mem::transmute(f_stairs) };
            f_stairs as u64
        });
        __bindgen_bitfield_unit.set(10usize, 1u8, {
            let terrain_flags_unk10: u16 = unsafe { ::core::mem::transmute(terrain_flags_unk10) };
            terrain_flags_unk10 as u64
        });
        __bindgen_bitfield_unit.set(11usize, 1u8, {
            let f_key_door: u8 = unsafe { ::core::mem::transmute(f_key_door) };
            f_key_door as u64
        });
        __bindgen_bitfield_unit.set(12usize, 1u8, {
            let f_key_door_key_locked: u8 =
                unsafe { ::core::mem::transmute(f_key_door_key_locked) };
            f_key_door_key_locked as u64
        });
        __bindgen_bitfield_unit.set(13usize, 1u8, {
            let f_key_door_escort_locked: u8 =
                unsafe { ::core::mem::transmute(f_key_door_escort_locked) };
            f_key_door_escort_locked as u64
        });
        __bindgen_bitfield_unit.set(14usize, 1u8, {
            let terrain_flags_unk14: u16 = unsafe { ::core::mem::transmute(terrain_flags_unk14) };
            terrain_flags_unk14 as u64
        });
        __bindgen_bitfield_unit.set(15usize, 1u8, {
            let f_unreachable_from_stairs: u8 =
                unsafe { ::core::mem::transmute(f_unreachable_from_stairs) };
            f_unreachable_from_stairs as u64
        });
        __bindgen_bitfield_unit
    }
}
#[repr(C)]
pub struct room_data {
    pub room_id: u8,
    pub field_0x1: undefined,
    pub bottom_right_corner: position,
    pub top_left_corner: position,
    pub field_0xa: undefined,
    pub field_0xb: undefined,
    pub field_0xc: undefined4,
    pub field_0x10: undefined4,
    pub field_0x14: undefined4,
    pub field_0x18: undefined4,
}
#[repr(C)]
pub struct display_data {
    pub camera_pos: position,
    pub camera_pos_mirror: position,
    pub camera_pixel_pos: position,
    pub camera_pixel_pos_mirror: position,
    pub camera_target: *mut entity,
    pub field_0x14: undefined,
    pub field_0x15: undefined,
    pub field_0x16: undefined,
    pub field_0x17: undefined,
    pub field_0x18: undefined,
    pub field_0x19: undefined,
    pub field_0x1A: undefined,
    pub field_0x1B: undefined,
    pub field_0x1C: undefined,
    pub field_0x1D: undefined,
    pub field_0x1E: undefined,
    pub field_0x1F: undefined,
    pub field_0x20: undefined,
    pub visibility_range: u8,
    pub blinded: bool_,
    pub luminous: bool_,
    pub natural_lighting: bool_,
    pub map_surveyor: bool_,
    pub can_see_enemies: bool_,
    pub can_see_items: bool_,
    pub can_see_traps: bool_,
    pub hallucinating: bool_,
    pub can_see_stairs: bool_,
    pub field_0x2B: undefined,
    pub field_0x2C: undefined,
    pub darkness: bool_,
    pub field_0x2E: undefined,
    pub leader_pointed: bool_,
    pub field_0x30: undefined,
    pub field_0x31: undefined,
    pub field_0x32: undefined,
    pub field_0x33: undefined,
    pub field_0x34: undefined,
    pub team_menu_or_grid: bool_,
    pub leader_target_direction: direction_id_8,
    pub leader_target_direction_mirror: direction_id_8,
    pub field_0x38: undefined,
    pub field_0x39: undefined,
    pub field_0x3A: undefined,
    pub field_0x3B: undefined,
    pub floor_touch_screen: i16,
    pub leader_level_touch_screen: i16,
    pub leader_hp_touch_screen: i16,
    pub leader_max_hp_touch_screen: i16,
    pub field_0x44: undefined2,
    pub field_0x46: undefined,
    pub field_0x47: undefined,
}
#[repr(C)]
pub struct minimap_display_tile {
    pub field_0x0: undefined4,
    pub field_0x4: undefined4,
    pub field_0x8: undefined4,
    pub field_0x0C: undefined4,
    pub field_0x10: undefined4,
    pub field_0x14: undefined4,
    pub field_0x18: undefined4,
    pub field_0x1C: undefined4,
    pub field_0x20: undefined4,
    pub field_0x24: undefined4,
    pub field_0x28: undefined4,
    pub field_0x2C: undefined4,
    pub field_0x30: undefined4,
    pub field_0x34: undefined4,
    pub field_0x38: undefined4,
    pub field_0x3C: undefined4,
}
#[repr(C)]
pub struct minimap_display_data {
    pub tile_matrix_1: [[minimap_display_tile; 28usize]; 16usize],
    pub tile_matrix_2: [[minimap_display_tile; 28usize]; 16usize],
    pub field_0xE000: [[undefined; 28usize]; 32usize],
    pub overwritten_extra_bytes: [undefined; 28usize],
    pub field_0xE39C: [undefined4; 41usize],
    pub field_0xE440: undefined4,
    pub field_0xE444: undefined,
    pub field_0xE445: undefined,
    pub field_0xE446: undefined,
    pub field_0xE447: undefined,
    pub field_0xE448: undefined,
    pub field_0xE449: undefined,
    pub field_0xE44A: undefined,
    pub field_0xE44B: undefined,
}
#[repr(C)]
pub struct dungeon_generation_info {
    pub force_create_monster_house: bool_,
    pub field_0x1: undefined,
    pub field_0x2: undefined,
    pub field_0x3: undefined,
    pub field_0x4: undefined,
    pub monster_house_room: u8,
    pub field_0x6: undefined,
    pub field_0x7: undefined,
    pub hidden_stairs_type: hidden_stairs_type::Type,
    pub field_0xc: undefined4,
    pub tileset_id: u8,
    pub field_0x11: undefined,
    pub music_table_idx: u16,
    pub field_0x14: undefined,
    pub field_0x15: undefined,
    pub fixed_room_id: fixed_room_id_8,
    pub field_0x17: undefined,
    pub field_0x18: undefined,
    pub field_0x19: undefined,
    pub floor_generation_attempts: u16,
    pub tiles: [[tile; 56usize]; 32usize],
    pub team_spawn_pos: position,
    pub stairs_pos: position,
    pub hidden_stairs_pos: position,
    pub individual_team_spawn_positions: [position; 4usize],
}
#[repr(C)]
pub struct dungeon_grid_cell {
    pub start_x: i16,
    pub start_y: i16,
    pub end_x: i16,
    pub end_y: i16,
    pub is_invalid: bool_,
    pub field_0x9: undefined,
    pub is_room: bool_,
    pub is_connected: bool_,
    pub field_0xc: undefined,
    pub field_0xd: undefined,
    pub is_monster_house: bool_,
    pub field_0xf: undefined,
    pub is_maze_room: bool_,
    pub was_merged_into_other_room: bool_,
    pub is_merged_room: bool_,
    pub is_connected_to_top: bool_,
    pub is_connected_to_bottom: bool_,
    pub is_connected_to_left: bool_,
    pub is_connected_to_right: bool_,
    pub should_connect_to_top: bool_,
    pub should_connect_to_bottom: bool_,
    pub should_connect_to_left: bool_,
    pub should_connect_to_right: bool_,
    pub field_0x1b: undefined,
    pub flag_imperfect: bool_,
    pub flag_secondary_structure: bool_,
}
#[repr(C)]
pub struct floor_generation_status {
    pub second_spawn: bool_,
    pub has_monster_house: bool_,
    pub stairs_room: u8,
    pub has_kecleon_shop: bool_,
    pub has_chasms_as_secondary_terrain: bool_,
    pub is_invalid: bool_,
    pub floor_size: floor_size_8,
    pub has_maze: bool_,
    pub no_enemy_spawns: bool_,
    pub field_0x9: undefined,
    pub field_0xa: undefined,
    pub field_0xb: undefined,
    pub kecleon_shop_spawn_chance: i16,
    pub field_0xe: undefined,
    pub field_0xf: undefined,
    pub monster_house_spawn_chance: i16,
    pub field_0x12: undefined,
    pub field_0x13: undefined,
    pub n_rooms: crate::ctypes::c_int,
    pub secondary_structures_budget: crate::ctypes::c_int,
    pub hidden_stairs_spawn_x: u16,
    pub hidden_stairs_spawn_y: u16,
    pub kecleon_shop_middle_x: u16,
    pub kecleon_shop_middle_y: u16,
    pub n_tiles_reachable_from_stairs: crate::ctypes::c_int,
    pub layout: floor_layout::Type,
    pub hidden_stairs_type: hidden_stairs_type::Type,
    pub kecleon_shop_min_x: crate::ctypes::c_int,
    pub kecleon_shop_min_y: crate::ctypes::c_int,
    pub kecleon_shop_max_x: crate::ctypes::c_int,
    pub kecleon_shop_max_y: crate::ctypes::c_int,
}
#[repr(C)]
pub struct spawn_position {
    pub x: u8,
    pub y: u8,
}
#[repr(C)]
pub struct floor_properties {
    pub layout: floor_layout_8,
    pub room_density: i8,
    pub tileset: u8,
    pub music_table_idx: u8,
    pub weather: weather_id_8,
    pub floor_connectivity: u8,
    pub enemy_density: u8,
    pub kecleon_shop_spawn_chance: u8,
    pub monster_house_spawn_chance: u8,
    pub maze_room_chance: u8,
    pub sticky_item_chance: u8,
    pub allow_dead_ends: bool_,
    pub max_secondary_structures: u8,
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 1usize]>,
    pub field_0xe: undefined,
    pub item_density: u8,
    pub trap_density: u8,
    pub floor_number: u8,
    pub fixed_room_id: fixed_room_id_8,
    pub extra_hallways: u8,
    pub buried_item_density: u8,
    pub secondary_terrain_density: u8,
    pub visibility_range: u8,
    pub max_money_amount_div_5: u8,
    pub shop_item_positions: shop_item_positions_8,
    pub itemless_monster_house_chance: u8,
    pub hidden_stairs_type: u8,
    pub hidden_stairs_spawn_chance: u8,
    pub enemy_iq: i16,
    pub iq_booster_value: i16,
}
impl floor_properties {
    #[inline]
    pub fn f_secondary_structures(&self) -> bool_ {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_f_secondary_structures(&mut self, val: bool_) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn room_flags_unk1(&self) -> u8 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(1usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_room_flags_unk1(&mut self, val: u8) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(1usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn f_room_imperfections(&self) -> bool_ {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(2usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_f_room_imperfections(&mut self, val: bool_) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(2usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn room_flags_unk3(&self) -> u8 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(3usize, 5u8) as u8) }
    }
    #[inline]
    pub fn set_room_flags_unk3(&mut self, val: u8) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(3usize, 5u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        f_secondary_structures: bool_,
        room_flags_unk1: u8,
        f_room_imperfections: bool_,
        room_flags_unk3: u8,
    ) -> __BindgenBitfieldUnit<[u8; 1usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 1usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let f_secondary_structures: u8 =
                unsafe { ::core::mem::transmute(f_secondary_structures) };
            f_secondary_structures as u64
        });
        __bindgen_bitfield_unit.set(1usize, 1u8, {
            let room_flags_unk1: u8 = unsafe { ::core::mem::transmute(room_flags_unk1) };
            room_flags_unk1 as u64
        });
        __bindgen_bitfield_unit.set(2usize, 1u8, {
            let f_room_imperfections: u8 = unsafe { ::core::mem::transmute(f_room_imperfections) };
            f_room_imperfections as u64
        });
        __bindgen_bitfield_unit.set(3usize, 5u8, {
            let room_flags_unk3: u8 = unsafe { ::core::mem::transmute(room_flags_unk3) };
            room_flags_unk3 as u64
        });
        __bindgen_bitfield_unit
    }
}
#[repr(C)]
pub struct tileset_property {
    pub field_0x0: i32,
    pub field_0x4: u8,
    pub field_0x5: u8,
    pub field_0x6: u8,
    pub _padding: u8,
    pub field_0x8: i16,
    pub field_0xa: u8,
    pub field_0xb: u8,
}
#[repr(C)]
pub struct level_tilemap_list_entry {
    pub field_0x0: i16,
    pub field_0x2: u8,
    pub field_0x3: u8,
    pub field_0x4: undefined4,
}
#[repr(C)]
pub struct monster_spawn_entry {
    pub level_mult_512: u16,
    pub incremental_spawn_weight: u16,
    pub incremental_spawn_weight_monster_house: u16,
    pub id: monster_id_16,
}
#[repr(C)]
pub struct mission_destination_info {
    pub is_destination_floor: bool_,
    pub type_: mission_type_8,
    pub subtype: u8,
    pub field_0x3: undefined,
    pub item_to_retrieve: item_id_16,
    pub item_to_deliver: item_id_16,
    pub special_target_item: item_id_16,
    pub client: monster_id_16,
    pub rescue_target: monster_id_16,
    pub enemy_species: [monster_id_16; 3usize],
    pub n_enemy_species: u8,
    pub field_0x15: undefined,
    pub fixed_room_id: fixed_room_id_8,
    pub field_0x17: undefined,
    pub field_0x18: undefined,
    pub field_0x19: undefined,
    pub field_0x1a: undefined,
    pub target_enemy_is_defeated: bool_,
}
#[repr(C)]
pub struct dungeon_data_list_entry {
    pub n_floors: u8,
    pub dungeon_data_index_mappa_s: u8,
    pub n_preceding_floors_group: u8,
    pub n_total_floors_group: u8,
}
#[repr(C)]
pub struct dungeon_group_and_group_floor {
    pub group_id: dungeon_group_id_8,
    pub group_floor: u8,
}
#[repr(C)]
pub struct dungeon_restriction {
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 2usize]>,
    pub unused: u16,
    pub max_rescue_attempts: u8,
    pub max_items_allowed: u8,
    pub max_party_size: u8,
    pub field_0x7: undefined,
    pub turn_limit_per_floor: u16,
    pub field_0xa: undefined,
    pub field_0xb: undefined,
}
impl dungeon_restriction {
    #[inline]
    pub fn f_dungeon_goes_up(&self) -> bool_ {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_f_dungeon_goes_up(&mut self, val: bool_) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn f_enemies_evolve(&self) -> bool_ {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(1usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_f_enemies_evolve(&mut self, val: bool_) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(1usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn f_enemies_give_exp(&self) -> bool_ {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(2usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_f_enemies_give_exp(&mut self, val: bool_) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(2usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn f_recruitment_allowed(&self) -> bool_ {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(3usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_f_recruitment_allowed(&mut self, val: bool_) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(3usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn f_reset_to_level_1(&self) -> bool_ {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(4usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_f_reset_to_level_1(&mut self, val: bool_) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(4usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn f_money_allowed(&self) -> bool_ {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(5usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_f_money_allowed(&mut self, val: bool_) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(5usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn f_leader_change_enabled(&self) -> bool_ {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(6usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_f_leader_change_enabled(&mut self, val: bool_) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(6usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn f_enter_without_saving(&self) -> bool_ {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(7usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_f_enter_without_saving(&mut self, val: bool_) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(7usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn f_disable_iq_skills(&self) -> bool_ {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(8usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_f_disable_iq_skills(&mut self, val: bool_) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(8usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn f_no_trap_uncovering(&self) -> bool_ {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(9usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_f_no_trap_uncovering(&mut self, val: bool_) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(9usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn f_treasure_box_drops(&self) -> bool_ {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(10usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_f_treasure_box_drops(&mut self, val: bool_) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(10usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn flags_unused(&self) -> u16 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(11usize, 5u8) as u16) }
    }
    #[inline]
    pub fn set_flags_unused(&mut self, val: u16) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            self._bitfield_1.set(11usize, 5u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        f_dungeon_goes_up: bool_,
        f_enemies_evolve: bool_,
        f_enemies_give_exp: bool_,
        f_recruitment_allowed: bool_,
        f_reset_to_level_1: bool_,
        f_money_allowed: bool_,
        f_leader_change_enabled: bool_,
        f_enter_without_saving: bool_,
        f_disable_iq_skills: bool_,
        f_no_trap_uncovering: bool_,
        f_treasure_box_drops: bool_,
        flags_unused: u16,
    ) -> __BindgenBitfieldUnit<[u8; 2usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 2usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let f_dungeon_goes_up: u8 = unsafe { ::core::mem::transmute(f_dungeon_goes_up) };
            f_dungeon_goes_up as u64
        });
        __bindgen_bitfield_unit.set(1usize, 1u8, {
            let f_enemies_evolve: u8 = unsafe { ::core::mem::transmute(f_enemies_evolve) };
            f_enemies_evolve as u64
        });
        __bindgen_bitfield_unit.set(2usize, 1u8, {
            let f_enemies_give_exp: u8 = unsafe { ::core::mem::transmute(f_enemies_give_exp) };
            f_enemies_give_exp as u64
        });
        __bindgen_bitfield_unit.set(3usize, 1u8, {
            let f_recruitment_allowed: u8 =
                unsafe { ::core::mem::transmute(f_recruitment_allowed) };
            f_recruitment_allowed as u64
        });
        __bindgen_bitfield_unit.set(4usize, 1u8, {
            let f_reset_to_level_1: u8 = unsafe { ::core::mem::transmute(f_reset_to_level_1) };
            f_reset_to_level_1 as u64
        });
        __bindgen_bitfield_unit.set(5usize, 1u8, {
            let f_money_allowed: u8 = unsafe { ::core::mem::transmute(f_money_allowed) };
            f_money_allowed as u64
        });
        __bindgen_bitfield_unit.set(6usize, 1u8, {
            let f_leader_change_enabled: u8 =
                unsafe { ::core::mem::transmute(f_leader_change_enabled) };
            f_leader_change_enabled as u64
        });
        __bindgen_bitfield_unit.set(7usize, 1u8, {
            let f_enter_without_saving: u8 =
                unsafe { ::core::mem::transmute(f_enter_without_saving) };
            f_enter_without_saving as u64
        });
        __bindgen_bitfield_unit.set(8usize, 1u8, {
            let f_disable_iq_skills: u8 = unsafe { ::core::mem::transmute(f_disable_iq_skills) };
            f_disable_iq_skills as u64
        });
        __bindgen_bitfield_unit.set(9usize, 1u8, {
            let f_no_trap_uncovering: u8 = unsafe { ::core::mem::transmute(f_no_trap_uncovering) };
            f_no_trap_uncovering as u64
        });
        __bindgen_bitfield_unit.set(10usize, 1u8, {
            let f_treasure_box_drops: u8 = unsafe { ::core::mem::transmute(f_treasure_box_drops) };
            f_treasure_box_drops as u64
        });
        __bindgen_bitfield_unit.set(11usize, 5u8, {
            let flags_unused: u16 = unsafe { ::core::mem::transmute(flags_unused) };
            flags_unused as u64
        });
        __bindgen_bitfield_unit
    }
}
#[repr(C)]
pub struct fixed_room_item_spawn_entry {
    pub item: bulk_item,
    pub field_0x4: undefined,
    pub field_0x5: undefined,
    pub field_0x6: undefined,
    pub field_0x7: undefined,
}
#[repr(C)]
pub struct fixed_room_monster_spawn_entry {
    pub id: monster_id_16,
    pub stat_table_idx: u8,
    pub behavior: monster_behavior_8,
}
#[repr(C)]
pub struct fixed_room_monster_spawn_stats_entry {
    pub level: u16,
    pub hp: u16,
    pub exp_yield: i16,
    pub atk: u8,
    pub sp_atk: u8,
    pub def: u8,
    pub sp_def: u8,
    pub field_0xa: undefined,
    pub field_0xb: undefined,
}
#[repr(C)]
pub struct fixed_room_properties_entry {
    pub music: music_id_16,
    pub field_0x2: undefined,
    pub field_0x3: undefined,
    pub illuminated: bool_,
    pub enable_lategame_traps: bool_,
    pub moves_enabled: bool_,
    pub orbs_allowed: bool_,
    pub tile_jumps_allowed: bool_,
    pub trawl_orbs_allowed: bool_,
    pub exit_after_enemies_defeated: bool_,
    pub field_0xb: undefined,
}
#[repr(C)]
pub struct fixed_room_tile_spawn_entry {
    pub id: trap_id_8,
    pub flags: u8,
    pub room: u8,
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 1usize]>,
}
impl fixed_room_tile_spawn_entry {
    #[inline]
    pub fn f_trap_visible(&self) -> bool_ {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_f_trap_visible(&mut self, val: bool_) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn flags3_unk1(&self) -> u8 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(1usize, 2u8) as u8) }
    }
    #[inline]
    pub fn set_flags3_unk1(&mut self, val: u8) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(1usize, 2u8, val as u64)
        }
    }
    #[inline]
    pub fn f_secondary_terrain(&self) -> bool_ {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(3usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_f_secondary_terrain(&mut self, val: bool_) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(3usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn flags3_unk4(&self) -> u8 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(4usize, 4u8) as u8) }
    }
    #[inline]
    pub fn set_flags3_unk4(&mut self, val: u8) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(4usize, 4u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        f_trap_visible: bool_,
        flags3_unk1: u8,
        f_secondary_terrain: bool_,
        flags3_unk4: u8,
    ) -> __BindgenBitfieldUnit<[u8; 1usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 1usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let f_trap_visible: u8 = unsafe { ::core::mem::transmute(f_trap_visible) };
            f_trap_visible as u64
        });
        __bindgen_bitfield_unit.set(1usize, 2u8, {
            let flags3_unk1: u8 = unsafe { ::core::mem::transmute(flags3_unk1) };
            flags3_unk1 as u64
        });
        __bindgen_bitfield_unit.set(3usize, 1u8, {
            let f_secondary_terrain: u8 = unsafe { ::core::mem::transmute(f_secondary_terrain) };
            f_secondary_terrain as u64
        });
        __bindgen_bitfield_unit.set(4usize, 4u8, {
            let flags3_unk4: u8 = unsafe { ::core::mem::transmute(flags3_unk4) };
            flags3_unk4 as u64
        });
        __bindgen_bitfield_unit
    }
}
#[repr(C)]
pub struct fixed_room_entity_spawn_entry {
    pub item: *mut fixed_room_item_spawn_entry,
    pub monster: *mut fixed_room_monster_spawn_entry,
    pub tile: *mut fixed_room_tile_spawn_entry,
}
#[repr(C)]
pub struct enemy_spawn_stats {
    pub id: monster_id_16,
    pub level: u16,
    pub moves: [move_id_16; 4usize],
    pub max_hp: u16,
    pub atk: u8,
    pub def: u8,
    pub sp_atk: u8,
    pub sp_def: u8,
}
#[repr(C)]
pub struct guest_monster {
    pub name: *mut crate::ctypes::c_char,
    pub id: monster_id_16,
    pub joined_at: dungeon_id_8,
    pub field_0x7: undefined,
    pub moves: [move_id_16; 4usize],
    pub max_hp: i16,
    pub level: u8,
    pub field_0x13: undefined,
    pub iq: i16,
    pub atk: u8,
    pub field_0x17: undefined,
    pub sp_atk: u8,
    pub field_0x19: undefined,
    pub def: u8,
    pub field_0x1b: undefined,
    pub sp_def: u8,
    pub field_0x1d: undefined,
    pub field_0x1e: undefined,
    pub field_0x1f: undefined,
    pub exp: crate::ctypes::c_int,
}
#[repr(C)]
pub struct ai_possible_move {
    pub can_be_used: bool_,
    pub direction: direction_id_8,
    pub field_0x2: undefined,
    pub field_0x3: undefined,
    pub weight: crate::ctypes::c_int,
}
#[repr(C)]
pub struct dungeon_menu_entry {
    pub id: u16,
    pub parameter: u16,
    pub field_0x4: undefined,
    pub field_0x5: undefined,
    pub string_id: u16,
}
#[repr(C)]
pub struct message_tip {
    pub tip_id: crate::ctypes::c_int,
    pub message_id: crate::ctypes::c_int,
}
#[repr(C)]
pub struct map_marker {
    pub map_id: u16,
    pub reference_id: i16,
    pub pos: position,
}
#[repr(C)]
pub struct prng_state {
    pub use_secondary: crate::ctypes::c_int,
    pub seq_num_primary: u32,
    pub preseed: u32,
    pub last_value_primary: u32,
    pub idx_secondary: crate::ctypes::c_int,
}
#[repr(C)]
pub struct spawned_monster_data {
    pub monster_id: monster_id_16,
    pub behavior: monster_behavior_8,
    pub field_0x3: undefined,
    pub field_0x4: undefined,
    pub field_0x5: undefined,
    pub field_0x6: undefined,
    pub field_0x7: undefined,
    pub level: u16,
    pub pos: position,
    pub cannot_be_asleep: bool_,
    pub field_0xf: undefined,
}
#[repr(C)]
pub struct dungeon {
    pub field_0x0: undefined,
    pub field_0x1: undefined,
    pub field_0x2: undefined,
    pub target_monster_not_found_flag: bool_,
    pub field_0x4: undefined,
    pub stepped_on_stairs: bool_,
    pub end_floor_flag: u8,
    pub quicksave_flag: bool_,
    pub end_floor_no_death_check_flag: bool_,
    pub field_0x9: undefined,
    pub field_0xa: undefined,
    pub field_0xb: undefined,
    pub field_0xc: undefined,
    pub field_0xd: undefined,
    pub activate_artificial_weather_flag: bool_,
    pub should_enemy_evolve: bool_,
    pub field_0x10: undefined,
    pub no_action_in_progress: bool_,
    pub iq_disabled: bool_,
    pub field_0x13: undefined,
    pub forced_loss_reason: forced_loss_reason::Type,
    pub field_0x18: undefined,
    pub field_0x19: undefined,
    pub field_0x1a: undefined,
    pub field_0x1b: undefined,
    pub field_0x1c: undefined,
    pub field_0x1d: undefined,
    pub field_0x1e: undefined,
    pub speed_boost_counter: u8,
    pub field_0x20: undefined,
    pub field_0x21: undefined,
    pub field_0x22: undefined,
    pub field_0x23: undefined,
    pub field_0x24: undefined,
    pub field_0x25: undefined,
    pub field_0x26: undefined,
    pub field_0x27: undefined,
    pub field_0x28: undefined,
    pub field_0x29: undefined,
    pub field_0x2a: undefined,
    pub field_0x2b: undefined,
    pub field_0x2c: undefined,
    pub field_0x2d: undefined,
    pub field_0x2e: undefined,
    pub field_0x2f: undefined,
    pub field_0x30: undefined,
    pub field_0x31: undefined,
    pub field_0x32: undefined,
    pub field_0x33: undefined,
    pub field_0x34: undefined,
    pub field_0x35: undefined,
    pub field_0x36: undefined,
    pub field_0x37: undefined,
    pub field_0x38: undefined,
    pub field_0x39: undefined,
    pub field_0x3a: undefined,
    pub field_0x3b: undefined,
    pub field_0x3c: undefined,
    pub field_0x3d: undefined,
    pub field_0x3e: undefined,
    pub field_0x3f: undefined,
    pub field_0x40: undefined,
    pub field_0x41: undefined,
    pub field_0x42: undefined,
    pub field_0x43: undefined,
    pub field_0x44: undefined,
    pub field_0x45: undefined,
    pub field_0x46: undefined,
    pub field_0x47: undefined,
    pub field_0x48: undefined,
    pub field_0x49: undefined,
    pub field_0x4a: undefined,
    pub field_0x4b: undefined,
    pub field_0x4c: undefined,
    pub field_0x4d: undefined,
    pub field_0x4e: undefined,
    pub field_0x4f: undefined,
    pub field_0x50: undefined,
    pub field_0x51: undefined,
    pub field_0x52: undefined,
    pub field_0x53: undefined,
    pub field_0x54: undefined,
    pub field_0x55: undefined,
    pub field_0x56: undefined,
    pub field_0x57: undefined,
    pub field_0x58: undefined,
    pub field_0x59: undefined,
    pub field_0x5a: undefined,
    pub field_0x5b: undefined,
    pub field_0x5c: undefined,
    pub field_0x5d: undefined,
    pub field_0x5e: undefined,
    pub field_0x5f: undefined,
    pub field_0x60: undefined,
    pub field_0x61: undefined,
    pub field_0x62: undefined,
    pub field_0x63: undefined,
    pub field_0x64: undefined,
    pub field_0x65: undefined,
    pub field_0x66: undefined,
    pub field_0x67: undefined,
    pub field_0x68: undefined,
    pub field_0x69: undefined,
    pub field_0x6a: undefined,
    pub field_0x6b: undefined,
    pub field_0x6c: undefined,
    pub field_0x6d: undefined,
    pub field_0x6e: undefined,
    pub field_0x6f: undefined,
    pub field_0x70: undefined,
    pub field_0x71: undefined,
    pub field_0x72: undefined,
    pub field_0x73: undefined,
    pub field_0x74: undefined,
    pub field_0x75: undefined,
    pub field_0x76: undefined,
    pub field_0x77: undefined,
    pub field_0x78: undefined,
    pub field_0x79: undefined,
    pub field_0x7a: undefined,
    pub field_0x7b: undefined,
    pub field_0x7c: undefined,
    pub field_0x7d: undefined,
    pub field_0x7e: undefined,
    pub field_0x7f: undefined,
    pub field_0x80: undefined,
    pub field_0x81: undefined,
    pub field_0x82: undefined,
    pub field_0x83: undefined,
    pub field_0x84: undefined,
    pub field_0x85: undefined,
    pub field_0x86: undefined,
    pub field_0x87: undefined,
    pub field_0x88: undefined,
    pub field_0x89: undefined,
    pub field_0x8a: undefined,
    pub field_0x8b: undefined,
    pub field_0x8c: undefined,
    pub field_0x8d: undefined,
    pub field_0x8e: undefined,
    pub field_0x8f: undefined,
    pub field_0x90: undefined,
    pub field_0x91: undefined,
    pub field_0x92: undefined,
    pub field_0x93: undefined,
    pub field_0x94: undefined,
    pub field_0x95: undefined,
    pub field_0x96: undefined,
    pub field_0x97: undefined,
    pub field_0x98: undefined,
    pub field_0x99: undefined,
    pub field_0x9a: undefined,
    pub field_0x9b: undefined,
    pub field_0x9c: undefined,
    pub field_0x9d: undefined,
    pub field_0x9e: undefined,
    pub field_0x9f: undefined,
    pub field_0xa0: undefined,
    pub field_0xa1: undefined,
    pub field_0xa2: undefined,
    pub field_0xa3: undefined,
    pub field_0xa4: undefined,
    pub field_0xa5: undefined,
    pub field_0xa6: undefined,
    pub field_0xa7: undefined,
    pub field_0xa8: undefined,
    pub field_0xa9: undefined,
    pub field_0xaa: undefined,
    pub field_0xab: undefined,
    pub field_0xac: undefined,
    pub field_0xad: undefined,
    pub field_0xae: undefined,
    pub field_0xaf: undefined,
    pub field_0xb0: undefined,
    pub field_0xb1: undefined,
    pub field_0xb2: undefined,
    pub field_0xb3: undefined,
    pub field_0xb4: undefined,
    pub field_0xb5: undefined,
    pub field_0xb6: undefined,
    pub field_0xb7: undefined,
    pub field_0xb8: undefined,
    pub field_0xb9: undefined,
    pub field_0xba: undefined,
    pub field_0xbb: undefined,
    pub field_0xbc: undefined,
    pub field_0xbd: undefined,
    pub field_0xbe: undefined,
    pub field_0xbf: undefined,
    pub field_0xc0: undefined,
    pub field_0xc1: undefined,
    pub field_0xc2: undefined,
    pub field_0xc3: undefined,
    pub current_active_entity: *mut entity,
    pub new_leader: *mut entity,
    pub thrown_item: entity,
    pub field_0x184: undefined,
    pub field_0x185: undefined,
    pub field_0x186: undefined,
    pub field_0x187: undefined,
    pub field_0x188: undefined,
    pub field_0x189: undefined,
    pub field_0x18a: undefined,
    pub field_0x18b: undefined,
    pub field_0x18c: undefined,
    pub field_0x18d: undefined,
    pub field_0x18e: undefined,
    pub field_0x18f: undefined,
    pub field_0x190: undefined,
    pub field_0x191: undefined,
    pub field_0x192: undefined,
    pub field_0x193: undefined,
    pub field_0x194: undefined,
    pub field_0x195: undefined,
    pub field_0x196: undefined,
    pub field_0x197: undefined,
    pub field_0x198: undefined,
    pub field_0x199: undefined,
    pub field_0x19a: undefined,
    pub field_0x19b: undefined,
    pub field_0x19c: undefined,
    pub field_0x19d: undefined,
    pub field_0x19e: undefined,
    pub field_0x19f: undefined,
    pub field_0x1a0: undefined,
    pub field_0x1a1: undefined,
    pub field_0x1a2: undefined,
    pub field_0x1a3: undefined,
    pub field_0x1a4: undefined,
    pub field_0x1a5: undefined,
    pub field_0x1a6: undefined,
    pub field_0x1a7: undefined,
    pub field_0x1a8: undefined,
    pub field_0x1a9: undefined,
    pub field_0x1aa: undefined,
    pub field_0x1ab: undefined,
    pub field_0x1ac: undefined,
    pub field_0x1ad: undefined,
    pub field_0x1ae: undefined,
    pub field_0x1af: undefined,
    pub field_0x1b0: undefined,
    pub field_0x1b1: undefined,
    pub field_0x1b2: undefined,
    pub field_0x1b3: undefined,
    pub field_0x1b4: undefined,
    pub field_0x1b5: undefined,
    pub field_0x1b6: undefined,
    pub field_0x1b7: undefined,
    pub field_0x1b8: undefined,
    pub field_0x1b9: undefined,
    pub field_0x1ba: undefined,
    pub field_0x1bb: undefined,
    pub field_0x1bc: undefined,
    pub field_0x1bd: undefined,
    pub field_0x1be: undefined,
    pub field_0x1bf: undefined,
    pub field_0x1c0: undefined,
    pub field_0x1c1: undefined,
    pub field_0x1c2: undefined,
    pub field_0x1c3: undefined,
    pub field_0x1c4: undefined,
    pub field_0x1c5: undefined,
    pub field_0x1c6: undefined,
    pub field_0x1c7: undefined,
    pub field_0x1c8: undefined,
    pub field_0x1c9: undefined,
    pub field_0x1ca: undefined,
    pub field_0x1cb: undefined,
    pub field_0x1cc: undefined,
    pub field_0x1cd: undefined,
    pub field_0x1ce: undefined,
    pub field_0x1cf: undefined,
    pub field_0x1d0: undefined,
    pub field_0x1d1: undefined,
    pub field_0x1d2: undefined,
    pub field_0x1d3: undefined,
    pub field_0x1d4: undefined,
    pub field_0x1d5: undefined,
    pub field_0x1d6: undefined,
    pub field_0x1d7: undefined,
    pub field_0x1d8: undefined,
    pub field_0x1d9: undefined,
    pub field_0x1da: undefined,
    pub field_0x1db: undefined,
    pub field_0x1dc: undefined,
    pub field_0x1dd: undefined,
    pub field_0x1de: undefined,
    pub field_0x1df: undefined,
    pub color_table: [rgb; 256usize],
    pub field_0x5e0: undefined,
    pub field_0x5e1: undefined,
    pub field_0x5e2: undefined,
    pub field_0x5e3: undefined,
    pub field_0x5e4: undefined,
    pub field_0x5e5: undefined,
    pub field_0x5e6: undefined,
    pub field_0x5e7: undefined,
    pub field_0x5e8: undefined,
    pub field_0x5e9: undefined,
    pub field_0x5ea: undefined,
    pub field_0x5eb: undefined,
    pub field_0x5ec: undefined,
    pub field_0x5ed: undefined,
    pub field_0x5ee: undefined,
    pub field_0x5ef: undefined,
    pub field_0x5f0: undefined,
    pub field_0x5f1: undefined,
    pub field_0x5f2: undefined,
    pub field_0x5f3: undefined,
    pub field_0x5f4: undefined,
    pub field_0x5f5: undefined,
    pub field_0x5f6: undefined,
    pub field_0x5f7: undefined,
    pub field_0x5f8: undefined,
    pub field_0x5f9: undefined,
    pub field_0x5fa: undefined,
    pub field_0x5fb: undefined,
    pub field_0x5fc: undefined,
    pub field_0x5fd: undefined,
    pub field_0x5fe: undefined,
    pub field_0x5ff: undefined,
    pub field_0x600: undefined,
    pub field_0x601: undefined,
    pub field_0x602: undefined,
    pub field_0x603: undefined,
    pub field_0x604: undefined,
    pub field_0x605: undefined,
    pub field_0x606: undefined,
    pub field_0x607: undefined,
    pub field_0x608: undefined,
    pub field_0x609: undefined,
    pub field_0x60a: undefined,
    pub field_0x60b: undefined,
    pub field_0x60c: undefined,
    pub field_0x60d: undefined,
    pub field_0x60e: undefined,
    pub field_0x60f: undefined,
    pub field_0x610: undefined,
    pub field_0x611: undefined,
    pub field_0x612: undefined,
    pub field_0x613: undefined,
    pub field_0x614: undefined,
    pub field_0x615: undefined,
    pub field_0x616: undefined,
    pub field_0x617: undefined,
    pub field_0x618: undefined,
    pub field_0x619: undefined,
    pub field_0x61a: undefined,
    pub field_0x61b: undefined,
    pub field_0x61c: undefined,
    pub field_0x61d: undefined,
    pub field_0x61e: undefined,
    pub field_0x61f: undefined,
    pub field_0x620: undefined,
    pub field_0x621: undefined,
    pub field_0x622: undefined,
    pub field_0x623: undefined,
    pub field_0x624: undefined,
    pub field_0x625: undefined,
    pub field_0x626: undefined,
    pub field_0x627: undefined,
    pub field_0x628: undefined,
    pub field_0x629: undefined,
    pub field_0x62a: undefined,
    pub field_0x62b: undefined,
    pub field_0x62c: undefined,
    pub field_0x62d: undefined,
    pub field_0x62e: undefined,
    pub field_0x62f: undefined,
    pub field_0x630: undefined,
    pub field_0x631: undefined,
    pub field_0x632: undefined,
    pub field_0x633: undefined,
    pub field_0x634: undefined,
    pub field_0x635: undefined,
    pub field_0x636: undefined,
    pub field_0x637: undefined,
    pub field_0x638: undefined,
    pub field_0x639: undefined,
    pub field_0x63a: undefined,
    pub field_0x63b: undefined,
    pub field_0x63c: undefined,
    pub field_0x63d: undefined,
    pub field_0x63e: undefined,
    pub field_0x63f: undefined,
    pub field_0x640: undefined,
    pub field_0x641: undefined,
    pub field_0x642: undefined,
    pub field_0x643: undefined,
    pub field_0x644: undefined,
    pub field_0x645: undefined,
    pub field_0x646: undefined,
    pub field_0x647: undefined,
    pub field_0x648: undefined,
    pub field_0x649: undefined,
    pub field_0x64a: undefined,
    pub field_0x64b: undefined,
    pub field_0x64c: undefined,
    pub field_0x64d: undefined,
    pub field_0x64e: undefined,
    pub field_0x64f: undefined,
    pub field_0x650: undefined,
    pub field_0x651: undefined,
    pub field_0x652: undefined,
    pub field_0x653: undefined,
    pub field_0x654: undefined,
    pub field_0x655: undefined,
    pub field_0x656: undefined,
    pub field_0x657: undefined,
    pub field_0x658: undefined,
    pub field_0x659: undefined,
    pub field_0x65a: undefined,
    pub field_0x65b: undefined,
    pub field_0x65c: undefined,
    pub field_0x65d: undefined,
    pub field_0x65e: undefined,
    pub field_0x65f: undefined,
    pub field_0x660: undefined,
    pub field_0x661: undefined,
    pub field_0x662: undefined,
    pub field_0x663: undefined,
    pub field_0x664: undefined,
    pub field_0x665: undefined,
    pub field_0x666: undefined,
    pub field_0x667: undefined,
    pub field_0x668: undefined,
    pub field_0x669: undefined,
    pub field_0x66a: undefined,
    pub field_0x66b: undefined,
    pub field_0x66c: undefined,
    pub field_0x66d: undefined,
    pub field_0x66e: undefined,
    pub field_0x66f: undefined,
    pub field_0x670: undefined,
    pub field_0x671: undefined,
    pub field_0x672: undefined,
    pub field_0x673: undefined,
    pub field_0x674: undefined,
    pub field_0x675: undefined,
    pub field_0x676: undefined,
    pub field_0x677: undefined,
    pub field_0x678: undefined,
    pub field_0x679: undefined,
    pub field_0x67a: undefined,
    pub field_0x67b: undefined,
    pub field_0x67c: undefined,
    pub field_0x67d: undefined,
    pub field_0x67e: undefined,
    pub field_0x67f: undefined,
    pub field_0x680: undefined,
    pub field_0x681: undefined,
    pub field_0x682: undefined,
    pub field_0x683: undefined,
    pub field_0x684: undefined,
    pub field_0x685: undefined,
    pub field_0x686: undefined,
    pub field_0x687: undefined,
    pub field_0x688: undefined,
    pub field_0x689: undefined,
    pub field_0x68a: undefined,
    pub field_0x68b: undefined,
    pub field_0x68c: undefined,
    pub field_0x68d: undefined,
    pub field_0x68e: undefined,
    pub field_0x68f: undefined,
    pub field_0x690: undefined,
    pub field_0x691: undefined,
    pub field_0x692: undefined,
    pub field_0x693: undefined,
    pub field_0x694: undefined,
    pub field_0x695: undefined,
    pub field_0x696: undefined,
    pub field_0x697: undefined,
    pub field_0x698: undefined,
    pub field_0x699: undefined,
    pub field_0x69a: undefined,
    pub field_0x69b: undefined,
    pub field_0x69c: undefined,
    pub field_0x69d: undefined,
    pub field_0x69e: undefined,
    pub field_0x69f: undefined,
    pub field_0x6a0: undefined,
    pub field_0x6a1: undefined,
    pub field_0x6a2: undefined,
    pub field_0x6a3: undefined,
    pub field_0x6a4: undefined,
    pub field_0x6a5: undefined,
    pub field_0x6a6: undefined,
    pub field_0x6a7: undefined,
    pub field_0x6a8: undefined,
    pub field_0x6a9: undefined,
    pub field_0x6aa: undefined,
    pub field_0x6ab: undefined,
    pub field_0x6ac: undefined,
    pub field_0x6ad: undefined,
    pub field_0x6ae: undefined,
    pub field_0x6af: undefined,
    pub field_0x6b0: undefined,
    pub field_0x6b1: undefined,
    pub field_0x6b2: undefined,
    pub field_0x6b3: undefined,
    pub field_0x6b4: undefined,
    pub field_0x6b5: undefined,
    pub field_0x6b6: undefined,
    pub field_0x6b7: undefined,
    pub field_0x6b8: undefined,
    pub field_0x6b9: undefined,
    pub field_0x6ba: undefined,
    pub field_0x6bb: undefined,
    pub field_0x6bc: undefined,
    pub field_0x6bd: undefined,
    pub field_0x6be: undefined,
    pub field_0x6bf: undefined,
    pub field_0x6c0: undefined,
    pub field_0x6c1: undefined,
    pub field_0x6c2: undefined,
    pub field_0x6c3: undefined,
    pub field_0x6c4: undefined,
    pub field_0x6c5: undefined,
    pub field_0x6c6: undefined,
    pub field_0x6c7: undefined,
    pub field_0x6c8: undefined,
    pub field_0x6c9: undefined,
    pub field_0x6ca: undefined,
    pub field_0x6cb: undefined,
    pub field_0x6cc: undefined,
    pub field_0x6cd: undefined,
    pub field_0x6ce: undefined,
    pub field_0x6cf: undefined,
    pub field_0x6d0: undefined,
    pub field_0x6d1: undefined,
    pub field_0x6d2: undefined,
    pub field_0x6d3: undefined,
    pub field_0x6d4: undefined,
    pub field_0x6d5: undefined,
    pub field_0x6d6: undefined,
    pub field_0x6d7: undefined,
    pub field_0x6d8: undefined,
    pub field_0x6d9: undefined,
    pub field_0x6da: undefined,
    pub field_0x6db: undefined,
    pub field_0x6dc: undefined,
    pub field_0x6dd: undefined,
    pub field_0x6de: undefined,
    pub field_0x6df: undefined,
    pub field_0x6e0: undefined,
    pub field_0x6e1: undefined,
    pub field_0x6e2: undefined,
    pub field_0x6e3: undefined,
    pub field_0x6e4: undefined,
    pub field_0x6e5: undefined,
    pub field_0x6e6: undefined,
    pub field_0x6e7: undefined,
    pub field_0x6e8: undefined,
    pub field_0x6e9: undefined,
    pub field_0x6ea: undefined,
    pub field_0x6eb: undefined,
    pub field_0x6ec: undefined,
    pub field_0x6ed: undefined,
    pub field_0x6ee: undefined,
    pub field_0x6ef: undefined,
    pub field_0x6f0: undefined,
    pub field_0x6f1: undefined,
    pub field_0x6f2: undefined,
    pub field_0x6f3: undefined,
    pub field_0x6f4: undefined,
    pub field_0x6f5: undefined,
    pub field_0x6f6: undefined,
    pub field_0x6f7: undefined,
    pub field_0x6f8: undefined,
    pub field_0x6f9: undefined,
    pub field_0x6fa: undefined,
    pub field_0x6fb: undefined,
    pub field_0x6fc: undefined,
    pub field_0x6fd: undefined,
    pub field_0x6fe: undefined,
    pub field_0x6ff: undefined,
    pub field_0x700: undefined,
    pub field_0x701: undefined,
    pub field_0x702: undefined,
    pub field_0x703: undefined,
    pub field_0x704: undefined,
    pub field_0x705: undefined,
    pub field_0x706: undefined,
    pub field_0x707: undefined,
    pub field_0x708: undefined,
    pub field_0x709: undefined,
    pub field_0x70a: undefined,
    pub field_0x70b: undefined,
    pub field_0x70c: undefined,
    pub field_0x70d: undefined,
    pub field_0x70e: undefined,
    pub field_0x70f: undefined,
    pub field_0x710: undefined,
    pub field_0x711: undefined,
    pub field_0x712: undefined,
    pub field_0x713: undefined,
    pub field_0x714: undefined,
    pub field_0x715: undefined,
    pub field_0x716: undefined,
    pub field_0x717: undefined,
    pub field_0x718: undefined,
    pub field_0x719: undefined,
    pub field_0x71a: undefined,
    pub field_0x71b: undefined,
    pub field_0x71c: undefined,
    pub field_0x71d: undefined,
    pub field_0x71e: undefined,
    pub field_0x71f: undefined,
    pub field_0x720: undefined,
    pub field_0x721: undefined,
    pub field_0x722: undefined,
    pub field_0x723: undefined,
    pub field_0x724: undefined,
    pub field_0x725: undefined,
    pub field_0x726: undefined,
    pub field_0x727: undefined,
    pub field_0x728: undefined,
    pub field_0x729: undefined,
    pub field_0x72a: undefined,
    pub field_0x72b: undefined,
    pub field_0x72c: undefined,
    pub field_0x72d: undefined,
    pub field_0x72e: undefined,
    pub field_0x72f: undefined,
    pub field_0x730: undefined,
    pub field_0x731: undefined,
    pub field_0x732: undefined,
    pub field_0x733: undefined,
    pub field_0x734: undefined,
    pub field_0x735: undefined,
    pub field_0x736: undefined,
    pub field_0x737: undefined,
    pub field_0x738: undefined,
    pub field_0x739: undefined,
    pub field_0x73a: undefined,
    pub field_0x73b: undefined,
    pub field_0x73c: undefined,
    pub field_0x73d: undefined,
    pub field_0x73e: undefined,
    pub field_0x73f: undefined,
    pub field_0x740: undefined,
    pub field_0x741: undefined,
    pub field_0x742: undefined,
    pub field_0x743: undefined,
    pub field_0x744: undefined,
    pub field_0x745: undefined,
    pub field_0x746: undefined,
    pub field_0x747: undefined,
    pub id: dungeon_id_8,
    pub floor: u8,
    pub group_id: dungeon_group_id_8,
    pub field_0x74b: undefined,
    pub field_0x74c: undefined,
    pub field_0x74d: undefined,
    pub field_0x74e: undefined,
    pub field_0x74f: undefined,
    pub field_0x750: undefined,
    pub rescue_floor: u8,
    pub field_0x752: undefined,
    pub field_0x753: undefined,
    pub field_0x754: undefined,
    pub field_0x755: undefined,
    pub field_0x756: undefined,
    pub field_0x757: undefined,
    pub floor_loop_status: floor_loop_status_8,
    pub recruiting_enabled: bool_,
    pub field_0x75a: undefined,
    pub field_0x75b: undefined,
    pub nonstory_flag: bool_,
    pub send_home_disabled: bool_,
    pub hidden_land_flag: bool_,
    pub skip_faint_animation_flag: bool_,
    pub mission_destination: mission_destination_info,
    pub field_0x77c: undefined,
    pub field_0x77d: undefined,
    pub field_0x77e: undefined,
    pub field_0x77f: undefined,
    pub fractional_turn: u16,
    pub enemy_spawn_counter: u16,
    pub wind_turns: i16,
    pub enemy_density: u16,
    pub next_spawn_genid: u16,
    pub field_0x78a: undefined,
    pub leader_running: bool_,
    pub field_0x78c: undefined,
    pub identify_orb_flag: bool_,
    pub pass_turn: bool_,
    pub field_0x78f: undefined,
    pub thief_alert: bool_,
    pub thief_alert_event: bool_,
    pub field_0x792: undefined,
    pub monster_house_triggered: bool_,
    pub monster_house_triggered_event: bool_,
    pub field_0x795: undefined,
    pub field_0x796: undefined,
    pub field_0x797: undefined,
    pub dungeon_objective: dungeon_objective_8,
    pub field_0x799: undefined,
    pub field_0x79a: undefined,
    pub rescue_attempts_left: i8,
    pub prng_seed: u32,
    pub field_0x7a0: undefined,
    pub field_0x7a1: undefined,
    pub field_0x7a2: undefined,
    pub field_0x7a3: undefined,
    pub field_0x7a4: undefined,
    pub field_0x7a5: undefined,
    pub field_0x7a6: undefined,
    pub field_0x7a7: undefined,
    pub field_0x7a8: undefined,
    pub field_0x7a9: undefined,
    pub field_0x7aa: undefined,
    pub field_0x7ab: undefined,
    pub prng_preseed: u32,
    pub field_0x7b0: undefined,
    pub field_0x7b1: undefined,
    pub field_0x7b2: undefined,
    pub field_0x7b3: undefined,
    pub field_0x7b4: undefined,
    pub field_0x7b5: undefined,
    pub field_0x7b6: undefined,
    pub field_0x7b7: undefined,
    pub field_0x7b8: undefined,
    pub field_0x7b9: undefined,
    pub field_0x7ba: undefined,
    pub field_0x7bb: undefined,
    pub field_0x7bc: undefined,
    pub field_0x7bd: undefined,
    pub field_0x7be: undefined,
    pub field_0x7bf: undefined,
    pub field_0x7c0: undefined,
    pub field_0x7c1: undefined,
    pub field_0x7c2: undefined,
    pub field_0x7c3: undefined,
    pub field_0x7c4: undefined,
    pub field_0x7c5: undefined,
    pub field_0x7c6: undefined,
    pub field_0x7c7: undefined,
    pub field_0x7c8: undefined,
    pub field_0x7c9: undefined,
    pub field_0x7ca: undefined,
    pub field_0x7cb: undefined,
    pub field_0x7cc: undefined,
    pub field_0x7cd: undefined,
    pub field_0x7ce: undefined,
    pub field_0x7cf: undefined,
    pub field_0x7d0: undefined,
    pub field_0x7d1: undefined,
    pub field_0x7d2: undefined,
    pub field_0x7d3: undefined,
    pub field_0x7d4: undefined,
    pub field_0x7d5: undefined,
    pub field_0x7d6: undefined,
    pub field_0x7d7: undefined,
    pub field_0x7d8: undefined,
    pub field_0x7d9: undefined,
    pub field_0x7da: undefined,
    pub field_0x7db: undefined,
    pub field_0x7dc: undefined,
    pub field_0x7dd: undefined,
    pub field_0x7de: undefined,
    pub field_0x7df: undefined,
    pub field_0x7e0: undefined,
    pub field_0x7e1: undefined,
    pub field_0x7e2: undefined,
    pub field_0x7e3: undefined,
    pub field_0x7e4: undefined,
    pub field_0x7e5: undefined,
    pub field_0x7e6: undefined,
    pub field_0x7e7: undefined,
    pub field_0x7e8: undefined,
    pub field_0x7e9: undefined,
    pub field_0x7ea: undefined,
    pub field_0x7eb: undefined,
    pub field_0x7ec: undefined,
    pub field_0x7ed: undefined,
    pub field_0x7ee: undefined,
    pub field_0x7ef: undefined,
    pub field_0x7f0: undefined,
    pub field_0x7f1: undefined,
    pub field_0x7f2: undefined,
    pub field_0x7f3: undefined,
    pub monsters: [monster; 20usize],
    pub enemy_spawn_stats: [enemy_spawn_stats; 64usize],
    pub spawn_entries: [monster_spawn_entry; 16usize],
    pub field_0x39f4: undefined,
    pub field_0x39f5: undefined,
    pub field_0x39f6: undefined,
    pub field_0x39f7: undefined,
    pub field_0x39f8: undefined,
    pub field_0x39f9: undefined,
    pub field_0x39fa: undefined,
    pub field_0x39fb: undefined,
    pub field_0x39fc: undefined,
    pub field_0x39fd: undefined,
    pub field_0x39fe: undefined,
    pub field_0x39ff: undefined,
    pub field_0x3a00: undefined,
    pub field_0x3a01: undefined,
    pub field_0x3a02: undefined,
    pub field_0x3a03: undefined,
    pub field_0x3a04: undefined,
    pub field_0x3a05: undefined,
    pub field_0x3a06: undefined,
    pub field_0x3a07: undefined,
    pub field_0x3a08: undefined,
    pub field_0x3a09: undefined,
    pub field_0x3a0a: undefined,
    pub field_0x3a0b: undefined,
    pub field_0x3a0c: undefined,
    pub field_0x3a0d: undefined,
    pub field_0x3a0e: undefined,
    pub field_0x3a0f: undefined,
    pub field_0x3a10: undefined,
    pub field_0x3a11: undefined,
    pub field_0x3a12: undefined,
    pub field_0x3a13: undefined,
    pub field_0x3a14: undefined,
    pub field_0x3a15: undefined,
    pub field_0x3a16: undefined,
    pub field_0x3a17: undefined,
    pub field_0x3a18: undefined,
    pub field_0x3a19: undefined,
    pub field_0x3a1a: undefined,
    pub field_0x3a1b: undefined,
    pub field_0x3a1c: undefined,
    pub field_0x3a1d: undefined,
    pub field_0x3a1e: undefined,
    pub field_0x3a1f: undefined,
    pub field_0x3a20: undefined,
    pub field_0x3a21: undefined,
    pub field_0x3a22: undefined,
    pub field_0x3a23: undefined,
    pub field_0x3a24: undefined,
    pub field_0x3a25: undefined,
    pub field_0x3a26: undefined,
    pub field_0x3a27: undefined,
    pub field_0x3a28: undefined,
    pub field_0x3a29: undefined,
    pub field_0x3a2a: undefined,
    pub field_0x3a2b: undefined,
    pub field_0x3a2c: undefined,
    pub field_0x3a2d: undefined,
    pub field_0x3a2e: undefined,
    pub field_0x3a2f: undefined,
    pub field_0x3a30: undefined,
    pub field_0x3a31: undefined,
    pub field_0x3a32: undefined,
    pub field_0x3a33: undefined,
    pub field_0x3a34: undefined,
    pub field_0x3a35: undefined,
    pub field_0x3a36: undefined,
    pub field_0x3a37: undefined,
    pub field_0x3a38: undefined,
    pub field_0x3a39: undefined,
    pub field_0x3a3a: undefined,
    pub field_0x3a3b: undefined,
    pub field_0x3a3c: undefined,
    pub field_0x3a3d: undefined,
    pub field_0x3a3e: undefined,
    pub field_0x3a3f: undefined,
    pub field_0x3a40: undefined,
    pub field_0x3a41: undefined,
    pub field_0x3a42: undefined,
    pub field_0x3a43: undefined,
    pub field_0x3a44: undefined,
    pub field_0x3a45: undefined,
    pub field_0x3a46: undefined,
    pub field_0x3a47: undefined,
    pub field_0x3a48: undefined,
    pub field_0x3a49: undefined,
    pub field_0x3a4a: undefined,
    pub field_0x3a4b: undefined,
    pub field_0x3a4c: undefined,
    pub field_0x3a4d: undefined,
    pub field_0x3a4e: undefined,
    pub field_0x3a4f: undefined,
    pub field_0x3a50: undefined,
    pub field_0x3a51: undefined,
    pub field_0x3a52: undefined,
    pub field_0x3a53: undefined,
    pub field_0x3a54: undefined,
    pub field_0x3a55: undefined,
    pub field_0x3a56: undefined,
    pub field_0x3a57: undefined,
    pub field_0x3a58: undefined,
    pub field_0x3a59: undefined,
    pub field_0x3a5a: undefined,
    pub field_0x3a5b: undefined,
    pub field_0x3a5c: undefined,
    pub field_0x3a5d: undefined,
    pub field_0x3a5e: undefined,
    pub field_0x3a5f: undefined,
    pub field_0x3a60: undefined,
    pub field_0x3a61: undefined,
    pub field_0x3a62: undefined,
    pub field_0x3a63: undefined,
    pub field_0x3a64: undefined,
    pub field_0x3a65: undefined,
    pub field_0x3a66: undefined,
    pub field_0x3a67: undefined,
    pub field_0x3a68: undefined,
    pub field_0x3a69: undefined,
    pub field_0x3a6a: undefined,
    pub field_0x3a6b: undefined,
    pub field_0x3a6c: undefined,
    pub field_0x3a6d: undefined,
    pub field_0x3a6e: undefined,
    pub field_0x3a6f: undefined,
    pub field_0x3a70: undefined,
    pub field_0x3a71: undefined,
    pub field_0x3a72: undefined,
    pub field_0x3a73: undefined,
    pub field_0x3a74: undefined,
    pub field_0x3a75: undefined,
    pub field_0x3a76: undefined,
    pub field_0x3a77: undefined,
    pub field_0x3a78: undefined,
    pub field_0x3a79: undefined,
    pub field_0x3a7a: undefined,
    pub field_0x3a7b: undefined,
    pub field_0x3a7c: undefined,
    pub field_0x3a7d: undefined,
    pub field_0x3a7e: undefined,
    pub field_0x3a7f: undefined,
    pub field_0x3a80: undefined,
    pub field_0x3a81: undefined,
    pub field_0x3a82: undefined,
    pub field_0x3a83: undefined,
    pub field_0x3a84: undefined,
    pub field_0x3a85: undefined,
    pub field_0x3a86: undefined,
    pub field_0x3a87: undefined,
    pub field_0x3a88: undefined,
    pub field_0x3a89: undefined,
    pub field_0x3a8a: undefined,
    pub field_0x3a8b: undefined,
    pub field_0x3a8c: undefined,
    pub field_0x3a8d: undefined,
    pub field_0x3a8e: undefined,
    pub field_0x3a8f: undefined,
    pub field_0x3a90: undefined,
    pub field_0x3a91: undefined,
    pub field_0x3a92: undefined,
    pub field_0x3a93: undefined,
    pub field_0x3a94: undefined,
    pub field_0x3a95: undefined,
    pub field_0x3a96: undefined,
    pub field_0x3a97: undefined,
    pub field_0x3a98: undefined,
    pub field_0x3a99: undefined,
    pub field_0x3a9a: undefined,
    pub field_0x3a9b: undefined,
    pub field_0x3a9c: undefined,
    pub field_0x3a9d: undefined,
    pub field_0x3a9e: undefined,
    pub field_0x3a9f: undefined,
    pub field_0x3aa0: undefined,
    pub field_0x3aa1: undefined,
    pub field_0x3aa2: undefined,
    pub field_0x3aa3: undefined,
    pub field_0x3aa4: undefined,
    pub field_0x3aa5: undefined,
    pub field_0x3aa6: undefined,
    pub field_0x3aa7: undefined,
    pub field_0x3aa8: undefined,
    pub field_0x3aa9: undefined,
    pub field_0x3aaa: undefined,
    pub field_0x3aab: undefined,
    pub field_0x3aac: undefined,
    pub field_0x3aad: undefined,
    pub field_0x3aae: undefined,
    pub field_0x3aaf: undefined,
    pub field_0x3ab0: undefined,
    pub field_0x3ab1: undefined,
    pub field_0x3ab2: undefined,
    pub field_0x3ab3: undefined,
    pub field_0x3ab4: undefined,
    pub field_0x3ab5: undefined,
    pub field_0x3ab6: undefined,
    pub field_0x3ab7: undefined,
    pub field_0x3ab8: undefined,
    pub field_0x3ab9: undefined,
    pub field_0x3aba: undefined,
    pub field_0x3abb: undefined,
    pub field_0x3abc: undefined,
    pub field_0x3abd: undefined,
    pub field_0x3abe: undefined,
    pub field_0x3abf: undefined,
    pub field_0x3ac0: undefined,
    pub field_0x3ac1: undefined,
    pub field_0x3ac2: undefined,
    pub field_0x3ac3: undefined,
    pub field_0x3ac4: undefined,
    pub field_0x3ac5: undefined,
    pub field_0x3ac6: undefined,
    pub field_0x3ac7: undefined,
    pub field_0x3ac8: undefined,
    pub field_0x3ac9: undefined,
    pub field_0x3aca: undefined,
    pub field_0x3acb: undefined,
    pub field_0x3acc: undefined,
    pub field_0x3acd: undefined,
    pub field_0x3ace: undefined,
    pub field_0x3acf: undefined,
    pub field_0x3ad0: undefined,
    pub field_0x3ad1: undefined,
    pub field_0x3ad2: undefined,
    pub field_0x3ad3: undefined,
    pub field_0x3ad4: undefined,
    pub field_0x3ad5: undefined,
    pub field_0x3ad6: undefined,
    pub field_0x3ad7: undefined,
    pub field_0x3ad8: undefined,
    pub field_0x3ad9: undefined,
    pub field_0x3ada: undefined,
    pub field_0x3adb: undefined,
    pub field_0x3adc: undefined,
    pub field_0x3add: undefined,
    pub field_0x3ade: undefined,
    pub field_0x3adf: undefined,
    pub field_0x3ae0: undefined,
    pub field_0x3ae1: undefined,
    pub field_0x3ae2: undefined,
    pub field_0x3ae3: undefined,
    pub field_0x3ae4: undefined,
    pub field_0x3ae5: undefined,
    pub field_0x3ae6: undefined,
    pub field_0x3ae7: undefined,
    pub field_0x3ae8: undefined,
    pub field_0x3ae9: undefined,
    pub field_0x3aea: undefined,
    pub field_0x3aeb: undefined,
    pub field_0x3aec: undefined,
    pub field_0x3aed: undefined,
    pub field_0x3aee: undefined,
    pub field_0x3aef: undefined,
    pub field_0x3af0: undefined,
    pub field_0x3af1: undefined,
    pub field_0x3af2: undefined,
    pub field_0x3af3: undefined,
    pub field_0x3af4: undefined,
    pub field_0x3af5: undefined,
    pub field_0x3af6: undefined,
    pub field_0x3af7: undefined,
    pub field_0x3af8: undefined,
    pub field_0x3af9: undefined,
    pub field_0x3afa: undefined,
    pub field_0x3afb: undefined,
    pub field_0x3afc: undefined,
    pub field_0x3afd: undefined,
    pub field_0x3afe: undefined,
    pub field_0x3aff: undefined,
    pub field_0x3b00: undefined,
    pub field_0x3b01: undefined,
    pub field_0x3b02: undefined,
    pub field_0x3b03: undefined,
    pub field_0x3b04: undefined,
    pub field_0x3b05: undefined,
    pub field_0x3b06: undefined,
    pub field_0x3b07: undefined,
    pub field_0x3b08: undefined,
    pub field_0x3b09: undefined,
    pub field_0x3b0a: undefined,
    pub field_0x3b0b: undefined,
    pub field_0x3b0c: undefined,
    pub field_0x3b0d: undefined,
    pub field_0x3b0e: undefined,
    pub field_0x3b0f: undefined,
    pub field_0x3b10: undefined,
    pub field_0x3b11: undefined,
    pub field_0x3b12: undefined,
    pub field_0x3b13: undefined,
    pub field_0x3b14: undefined,
    pub field_0x3b15: undefined,
    pub field_0x3b16: undefined,
    pub field_0x3b17: undefined,
    pub field_0x3b18: undefined,
    pub field_0x3b19: undefined,
    pub field_0x3b1a: undefined,
    pub field_0x3b1b: undefined,
    pub field_0x3b1c: undefined,
    pub field_0x3b1d: undefined,
    pub field_0x3b1e: undefined,
    pub field_0x3b1f: undefined,
    pub field_0x3b20: undefined,
    pub field_0x3b21: undefined,
    pub field_0x3b22: undefined,
    pub field_0x3b23: undefined,
    pub field_0x3b24: undefined,
    pub field_0x3b25: undefined,
    pub field_0x3b26: undefined,
    pub field_0x3b27: undefined,
    pub field_0x3b28: undefined,
    pub field_0x3b29: undefined,
    pub field_0x3b2a: undefined,
    pub field_0x3b2b: undefined,
    pub field_0x3b2c: undefined,
    pub field_0x3b2d: undefined,
    pub field_0x3b2e: undefined,
    pub field_0x3b2f: undefined,
    pub field_0x3b30: undefined,
    pub field_0x3b31: undefined,
    pub field_0x3b32: undefined,
    pub field_0x3b33: undefined,
    pub field_0x3b34: undefined,
    pub field_0x3b35: undefined,
    pub field_0x3b36: undefined,
    pub field_0x3b37: undefined,
    pub field_0x3b38: undefined,
    pub field_0x3b39: undefined,
    pub field_0x3b3a: undefined,
    pub field_0x3b3b: undefined,
    pub field_0x3b3c: undefined,
    pub field_0x3b3d: undefined,
    pub field_0x3b3e: undefined,
    pub field_0x3b3f: undefined,
    pub field_0x3b40: undefined,
    pub field_0x3b41: undefined,
    pub field_0x3b42: undefined,
    pub field_0x3b43: undefined,
    pub field_0x3b44: undefined,
    pub field_0x3b45: undefined,
    pub field_0x3b46: undefined,
    pub field_0x3b47: undefined,
    pub field_0x3b48: undefined,
    pub field_0x3b49: undefined,
    pub field_0x3b4a: undefined,
    pub field_0x3b4b: undefined,
    pub field_0x3b4c: undefined,
    pub field_0x3b4d: undefined,
    pub field_0x3b4e: undefined,
    pub field_0x3b4f: undefined,
    pub field_0x3b50: undefined,
    pub field_0x3b51: undefined,
    pub field_0x3b52: undefined,
    pub field_0x3b53: undefined,
    pub field_0x3b54: undefined,
    pub field_0x3b55: undefined,
    pub field_0x3b56: undefined,
    pub field_0x3b57: undefined,
    pub field_0x3b58: undefined,
    pub field_0x3b59: undefined,
    pub field_0x3b5a: undefined,
    pub field_0x3b5b: undefined,
    pub field_0x3b5c: undefined,
    pub field_0x3b5d: undefined,
    pub field_0x3b5e: undefined,
    pub field_0x3b5f: undefined,
    pub field_0x3b60: undefined,
    pub field_0x3b61: undefined,
    pub field_0x3b62: undefined,
    pub field_0x3b63: undefined,
    pub field_0x3b64: undefined,
    pub field_0x3b65: undefined,
    pub field_0x3b66: undefined,
    pub field_0x3b67: undefined,
    pub field_0x3b68: undefined,
    pub field_0x3b69: undefined,
    pub field_0x3b6a: undefined,
    pub field_0x3b6b: undefined,
    pub field_0x3b6c: undefined,
    pub field_0x3b6d: undefined,
    pub field_0x3b6e: undefined,
    pub field_0x3b6f: undefined,
    pub field_0x3b70: undefined,
    pub field_0x3b71: undefined,
    pub field_0x3b72: undefined,
    pub field_0x3b73: undefined,
    pub unknown_array_0x3B74: [u8; 600usize],
    pub field_0x3dcc: undefined,
    pub field_0x3dcd: undefined,
    pub field_0x3dce: undefined,
    pub field_0x3dcf: undefined,
    pub field_0x3dd0: undefined,
    pub field_0x3dd1: undefined,
    pub field_0x3dd2: undefined,
    pub field_0x3dd3: undefined,
    pub field_0x3dd4: undefined,
    pub field_0x3dd5: undefined,
    pub field_0x3dd6: undefined,
    pub field_0x3dd7: undefined,
    pub field_0x3dd8: undefined,
    pub field_0x3dd9: undefined,
    pub field_0x3dda: undefined,
    pub field_0x3ddb: undefined,
    pub field_0x3ddc: undefined,
    pub field_0x3ddd: undefined,
    pub field_0x3dde: undefined,
    pub field_0x3ddf: undefined,
    pub field_0x3de0: undefined,
    pub field_0x3de1: undefined,
    pub field_0x3de2: undefined,
    pub field_0x3de3: undefined,
    pub field_0x3de4: undefined,
    pub field_0x3de5: undefined,
    pub field_0x3de6: undefined,
    pub field_0x3de7: undefined,
    pub field_0x3de8: undefined,
    pub field_0x3de9: undefined,
    pub field_0x3dea: undefined,
    pub field_0x3deb: undefined,
    pub field_0x3dec: undefined,
    pub field_0x3ded: undefined,
    pub field_0x3dee: undefined,
    pub field_0x3def: undefined,
    pub field_0x3df0: undefined,
    pub field_0x3df1: undefined,
    pub field_0x3df2: undefined,
    pub field_0x3df3: undefined,
    pub field_0x3df4: undefined,
    pub field_0x3df5: undefined,
    pub field_0x3df6: undefined,
    pub field_0x3df7: undefined,
    pub field_0x3df8: undefined,
    pub field_0x3df9: undefined,
    pub field_0x3dfa: undefined,
    pub field_0x3dfb: undefined,
    pub field_0x3dfc: undefined,
    pub field_0x3dfd: undefined,
    pub field_0x3dfe: undefined,
    pub field_0x3dff: undefined,
    pub field_0x3e00: undefined,
    pub field_0x3e01: undefined,
    pub field_0x3e02: undefined,
    pub field_0x3e03: undefined,
    pub field_0x3e04: undefined,
    pub field_0x3e05: undefined,
    pub field_0x3e06: undefined,
    pub field_0x3e07: undefined,
    pub field_0x3e08: undefined,
    pub field_0x3e09: undefined,
    pub field_0x3e0a: undefined,
    pub field_0x3e0b: undefined,
    pub field_0x3e0c: undefined,
    pub field_0x3e0d: undefined,
    pub field_0x3e0e: undefined,
    pub field_0x3e0f: undefined,
    pub field_0x3e10: undefined,
    pub field_0x3e11: undefined,
    pub field_0x3e12: undefined,
    pub field_0x3e13: undefined,
    pub field_0x3e14: undefined,
    pub field_0x3e15: undefined,
    pub field_0x3e16: undefined,
    pub field_0x3e17: undefined,
    pub field_0x3e18: undefined,
    pub field_0x3e19: undefined,
    pub field_0x3e1a: undefined,
    pub field_0x3e1b: undefined,
    pub field_0x3e1c: undefined4,
    pub monster_spawn_entries_length: crate::ctypes::c_int,
    pub field_0x3e24: undefined,
    pub field_0x3e25: undefined,
    pub field_0x3e26: undefined,
    pub field_0x3e27: undefined,
    pub field_0x3e28: undefined,
    pub field_0x3e29: undefined,
    pub field_0x3e2a: undefined,
    pub field_0x3e2b: undefined,
    pub field_0x3e2c: undefined,
    pub field_0x3e2d: undefined,
    pub field_0x3e2e: undefined,
    pub field_0x3e2f: undefined,
    pub field_0x3e30: undefined,
    pub field_0x3e31: undefined,
    pub field_0x3e32: undefined,
    pub field_0x3e33: undefined,
    pub enemy_plus_is_active: bool_,
    pub team_plus_is_active: bool_,
    pub enemy_minus_is_active: bool_,
    pub team_minus_is_active: bool_,
    pub field_0x3e38: undefined,
    pub mew_cannot_spawn: bool_,
    pub field_0x3e3a: undefined,
    pub field_0x3e3b: undefined,
    pub field_0x3e3c: undefined,
    pub field_0x3e3d: undefined,
    pub field_0x3e3e: undefined,
    pub field_0x3e3f: undefined,
    pub items: [item; 64usize],
    pub n_items: u16,
    pub field_0x3fc2: undefined,
    pub field_0x3fc3: undefined,
    pub traps: [trap; 64usize],
    pub gen_info: dungeon_generation_info,
    pub field_0xccfc: undefined,
    pub field_0xccfd: undefined,
    pub field_0xccfe: undefined,
    pub field_0xccff: undefined,
    pub field_0xcd00: undefined,
    pub field_0xcd01: undefined,
    pub field_0xcd02: undefined,
    pub field_0xcd03: undefined,
    pub field_0xcd04: undefined,
    pub field_0xcd05: undefined,
    pub field_0xcd06: undefined,
    pub field_0xcd07: undefined,
    pub field_0xcd08: undefined,
    pub field_0xcd09: undefined,
    pub field_0xcd0a: undefined,
    pub field_0xcd0b: undefined,
    pub field_0xcd0c: undefined,
    pub field_0xcd0d: undefined,
    pub field_0xcd0e: undefined,
    pub field_0xcd0f: undefined,
    pub field_0xcd10: undefined,
    pub field_0xcd11: undefined,
    pub field_0xcd12: undefined,
    pub field_0xcd13: undefined,
    pub kecleon_shop_min_x: crate::ctypes::c_int,
    pub kecleon_shop_min_y: crate::ctypes::c_int,
    pub kecleon_shop_max_x: crate::ctypes::c_int,
    pub kecleon_shop_max_y: crate::ctypes::c_int,
    pub field_0xcd24: undefined,
    pub field_0xcd25: undefined,
    pub field_0xcd26: undefined,
    pub field_0xcd27: undefined,
    pub field_0xcd28: undefined,
    pub field_0xcd29: undefined,
    pub field_0xcd2a: undefined,
    pub field_0xcd2b: undefined,
    pub field_0xcd2c: undefined,
    pub field_0xcd2d: undefined,
    pub field_0xcd2e: undefined,
    pub field_0xcd2f: undefined,
    pub field_0xcd30: undefined,
    pub field_0xcd31: undefined,
    pub field_0xcd32: undefined,
    pub field_0xcd33: undefined,
    pub field_0xcd34: undefined,
    pub field_0xcd35: undefined,
    pub field_0xcd36: undefined,
    pub field_0xcd37: undefined,
    pub weather: weather_id_8,
    pub natural_weather: weather_id_8,
    pub weather_turns: [u16; 8usize],
    pub artificial_permaweather_turns: [u16; 8usize],
    pub weather_damage_counter: u8,
    pub mud_sport_turns: u8,
    pub water_sport_turns: u8,
    pub nullify_weather: bool_,
    pub field_0xcd5e: undefined,
    pub field_0xcd5f: undefined,
    pub fixed_room_tiles: [[tile; 8usize]; 8usize],
    pub field_0xd260: undefined,
    pub field_0xd261: undefined,
    pub field_0xd262: undefined,
    pub field_0xd263: undefined,
    pub field_0xd264: undefined,
    pub field_0xd265: undefined,
    pub field_0xd266: undefined,
    pub field_0xd267: undefined,
    pub field_0xd268: undefined,
    pub field_0xd269: undefined,
    pub field_0xd26a: undefined,
    pub field_0xd26b: undefined,
    pub field_0xd26c: undefined,
    pub field_0xd26d: undefined,
    pub field_0xd26e: undefined,
    pub field_0xd26f: undefined,
    pub field_0xd270: undefined,
    pub field_0xd271: undefined,
    pub field_0xd272: undefined,
    pub field_0xd273: undefined,
    pub field_0xd274: undefined,
    pub field_0xd275: undefined,
    pub field_0xd276: undefined,
    pub field_0xd277: undefined,
    pub field_0xd278: undefined,
    pub field_0xd279: undefined,
    pub field_0xd27a: undefined,
    pub field_0xd27b: undefined,
    pub field_0xd27c: undefined,
    pub field_0xd27d: undefined,
    pub field_0xd27e: undefined,
    pub field_0xd27f: undefined,
    pub field_0xd280: undefined,
    pub field_0xd281: undefined,
    pub field_0xd282: undefined,
    pub field_0xd283: undefined,
    pub field_0xd284: undefined,
    pub field_0xd285: undefined,
    pub field_0xd286: undefined,
    pub field_0xd287: undefined,
    pub field_0xd288: undefined,
    pub field_0xd289: undefined,
    pub field_0xd28a: undefined,
    pub field_0xd28b: undefined,
    pub field_0xd28c: undefined,
    pub field_0xd28d: undefined,
    pub field_0xd28e: undefined,
    pub field_0xd28f: undefined,
    pub field_0xd290: undefined,
    pub field_0xd291: undefined,
    pub field_0xd292: undefined,
    pub field_0xd293: undefined,
    pub field_0xd294: undefined,
    pub field_0xd295: undefined,
    pub field_0xd296: undefined,
    pub field_0xd297: undefined,
    pub field_0xd298: undefined,
    pub field_0xd299: undefined,
    pub field_0xd29a: undefined,
    pub field_0xd29b: undefined,
    pub field_0xd29c: undefined,
    pub field_0xd29d: undefined,
    pub field_0xd29e: undefined,
    pub field_0xd29f: undefined,
    pub field_0xd2a0: undefined,
    pub field_0xd2a1: undefined,
    pub field_0xd2a2: undefined,
    pub field_0xd2a3: undefined,
    pub field_0xd2a4: undefined,
    pub field_0xd2a5: undefined,
    pub field_0xd2a6: undefined,
    pub field_0xd2a7: undefined,
    pub field_0xd2a8: undefined,
    pub field_0xd2a9: undefined,
    pub field_0xd2aa: undefined,
    pub field_0xd2ab: undefined,
    pub field_0xd2ac: undefined,
    pub field_0xd2ad: undefined,
    pub field_0xd2ae: undefined,
    pub field_0xd2af: undefined,
    pub field_0xd2b0: undefined,
    pub field_0xd2b1: undefined,
    pub field_0xd2b2: undefined,
    pub field_0xd2b3: undefined,
    pub field_0xd2b4: undefined,
    pub field_0xd2b5: undefined,
    pub field_0xd2b6: undefined,
    pub field_0xd2b7: undefined,
    pub field_0xd2b8: undefined,
    pub field_0xd2b9: undefined,
    pub field_0xd2ba: undefined,
    pub field_0xd2bb: undefined,
    pub field_0xd2bc: undefined,
    pub field_0xd2bd: undefined,
    pub field_0xd2be: undefined,
    pub field_0xd2bf: undefined,
    pub field_0xd2c0: undefined,
    pub field_0xd2c1: undefined,
    pub field_0xd2c2: undefined,
    pub field_0xd2c3: undefined,
    pub field_0xd2c4: undefined,
    pub field_0xd2c5: undefined,
    pub field_0xd2c6: undefined,
    pub field_0xd2c7: undefined,
    pub field_0xd2c8: undefined,
    pub field_0xd2c9: undefined,
    pub field_0xd2ca: undefined,
    pub field_0xd2cb: undefined,
    pub field_0xd2cc: undefined,
    pub field_0xd2cd: undefined,
    pub field_0xd2ce: undefined,
    pub field_0xd2cf: undefined,
    pub field_0xd2d0: undefined,
    pub field_0xd2d1: undefined,
    pub field_0xd2d2: undefined,
    pub field_0xd2d3: undefined,
    pub field_0xd2d4: undefined,
    pub field_0xd2d5: undefined,
    pub field_0xd2d6: undefined,
    pub field_0xd2d7: undefined,
    pub field_0xd2d8: undefined,
    pub field_0xd2d9: undefined,
    pub field_0xd2da: undefined,
    pub field_0xd2db: undefined,
    pub field_0xd2dc: undefined,
    pub field_0xd2dd: undefined,
    pub field_0xd2de: undefined,
    pub field_0xd2df: undefined,
    pub field_0xd2e0: undefined,
    pub field_0xd2e1: undefined,
    pub field_0xd2e2: undefined,
    pub field_0xd2e3: undefined,
    pub tile_ptrs: [[*mut tile; 56usize]; 32usize],
    pub n_rooms: u8,
    pub field_0xeee5: undefined,
    pub field_0xeee6: undefined,
    pub field_0xeee7: undefined,
    pub room_data: [room_data; 32usize],
    pub natural_junction_list_counts: [u16; 32usize],
    pub natural_junction_list: [[position; 32usize]; 32usize],
    pub unknown_file_buffer_0x102A8: [u8; 7200usize],
    pub unknown_tile_matrix: [[u16; 34usize]; 9usize],
    pub unknown_matrix_0x1212C: [[u16; 3usize]; 9usize],
    pub unknown_file_buffer_0x12162: [u8; 2352usize],
    pub unknown_array_0x12A92: [u16; 9usize],
    pub field_0x12aa4: undefined,
    pub field_0x12aa5: undefined,
    pub field_0x12aa6: undefined,
    pub field_0x12aa7: undefined,
    pub field_0x12aa8: undefined,
    pub field_0x12aa9: undefined,
    pub field_0x12aaa: undefined,
    pub field_0x12aab: undefined,
    pub field_0x12aac: undefined,
    pub field_0x12aad: undefined,
    pub field_0x12aae: undefined,
    pub field_0x12aaf: undefined,
    pub field_0x12ab0: undefined,
    pub field_0x12ab1: undefined,
    pub field_0x12ab2: undefined,
    pub field_0x12ab3: undefined,
    pub field_0x12ab4: undefined,
    pub field_0x12ab5: undefined,
    pub field_0x12ab6: undefined,
    pub field_0x12ab7: undefined,
    pub field_0x12ab8: undefined,
    pub field_0x12ab9: undefined,
    pub field_0x12aba: undefined,
    pub field_0x12abb: undefined,
    pub field_0x12abc: undefined,
    pub field_0x12abd: undefined,
    pub field_0x12abe: undefined,
    pub field_0x12abf: undefined,
    pub field_0x12ac0: undefined,
    pub field_0x12ac1: undefined,
    pub field_0x12ac2: undefined,
    pub field_0x12ac3: undefined,
    pub field_0x12ac4: undefined,
    pub field_0x12ac5: undefined,
    pub field_0x12ac6: undefined,
    pub field_0x12ac7: undefined,
    pub field_0x12ac8: undefined,
    pub field_0x12ac9: undefined,
    pub field_0x12aca: undefined,
    pub field_0x12acb: undefined,
    pub field_0x12acc: undefined,
    pub field_0x12acd: undefined,
    pub field_0x12ace: undefined,
    pub field_0x12acf: undefined,
    pub field_0x12ad0: undefined,
    pub field_0x12ad1: undefined,
    pub field_0x12ad2: undefined,
    pub field_0x12ad3: undefined,
    pub field_0x12ad4: undefined,
    pub field_0x12ad5: undefined,
    pub field_0x12ad6: undefined,
    pub field_0x12ad7: undefined,
    pub field_0x12ad8: undefined,
    pub field_0x12ad9: undefined,
    pub field_0x12ada: undefined,
    pub field_0x12adb: undefined,
    pub field_0x12adc: undefined,
    pub field_0x12add: undefined,
    pub field_0x12ade: undefined,
    pub field_0x12adf: undefined,
    pub field_0x12ae0: undefined,
    pub field_0x12ae1: undefined,
    pub field_0x12ae2: undefined,
    pub field_0x12ae3: undefined,
    pub field_0x12ae4: undefined,
    pub field_0x12ae5: undefined,
    pub field_0x12ae6: undefined,
    pub field_0x12ae7: undefined,
    pub field_0x12ae8: undefined,
    pub field_0x12ae9: undefined,
    pub field_0x12aea: undefined,
    pub field_0x12aeb: undefined,
    pub field_0x12aec: undefined,
    pub field_0x12aed: undefined,
    pub field_0x12aee: undefined,
    pub field_0x12aef: undefined,
    pub field_0x12af0: undefined,
    pub field_0x12af1: undefined,
    pub field_0x12af2: undefined,
    pub field_0x12af3: undefined,
    pub field_0x12af4: undefined,
    pub field_0x12af5: undefined,
    pub field_0x12af6: undefined,
    pub field_0x12af7: undefined,
    pub field_0x12af8: undefined,
    pub field_0x12af9: undefined,
    pub n_normal_item_spawns: u16,
    pub gravity: bool_,
    pub field_0x12afd: undefined,
    pub field_0x12afe: undefined,
    pub field_0x12aff: undefined,
    pub field_0x12b00: undefined,
    pub field_0x12b01: undefined,
    pub field_0x12b02: undefined,
    pub field_0x12b03: undefined,
    pub field_0x12b04: undefined,
    pub field_0x12b05: undefined,
    pub field_0x12b06: undefined,
    pub field_0x12b07: undefined,
    pub field_0x12b08: undefined,
    pub field_0x12b09: undefined,
    pub field_0x12b0a: undefined,
    pub field_0x12b0b: undefined,
    pub field_0x12b0c: undefined,
    pub field_0x12b0d: undefined,
    pub field_0x12b0e: undefined,
    pub field_0x12b0f: undefined,
    pub field_0x12b10: undefined,
    pub field_0x12b11: undefined,
    pub field_0x12b12: undefined,
    pub field_0x12b13: undefined,
    pub field_0x12b14: undefined,
    pub field_0x12b15: undefined,
    pub field_0x12b16: undefined,
    pub field_0x12b17: undefined,
    pub field_0x12b18: undefined,
    pub field_0x12b19: undefined,
    pub field_0x12b1a: undefined,
    pub field_0x12b1b: undefined,
    pub field_0x12b1c: undefined,
    pub field_0x12b1d: undefined,
    pub field_0x12b1e: undefined,
    pub field_0x12b1f: undefined,
    pub field_0x12b20: undefined,
    pub field_0x12b21: undefined,
    pub field_0x12b22: undefined,
    pub field_0x12b23: undefined,
    pub field_0x12b24: undefined,
    pub field_0x12b25: undefined,
    pub field_0x12b26: undefined,
    pub field_0x12b27: undefined,
    pub entity_table: entity_table,
    pub field_0x198e4: undefined,
    pub field_0x198e5: undefined,
    pub field_0x198e6: undefined,
    pub field_0x198e7: undefined,
    pub field_0x198e8: undefined,
    pub field_0x198e9: undefined,
    pub field_0x198ea: undefined,
    pub field_0x198eb: undefined,
    pub field_0x198ec: undefined,
    pub field_0x198ed: undefined,
    pub field_0x198ee: undefined,
    pub field_0x198ef: undefined,
    pub field_0x198f0: undefined,
    pub field_0x198f1: undefined,
    pub field_0x198f2: undefined,
    pub field_0x198f3: undefined,
    pub field_0x198f4: undefined,
    pub field_0x198f5: undefined,
    pub field_0x198f6: undefined,
    pub field_0x198f7: undefined,
    pub field_0x198f8: undefined,
    pub field_0x198f9: undefined,
    pub field_0x198fa: undefined,
    pub field_0x198fb: undefined,
    pub field_0x198fc: undefined,
    pub field_0x198fd: undefined,
    pub field_0x198fe: undefined,
    pub field_0x198ff: undefined,
    pub field_0x19900: undefined,
    pub field_0x19901: undefined,
    pub field_0x19902: undefined,
    pub field_0x19903: undefined,
    pub unknown_monster: *mut entity,
    pub illuminate_spawn_entity: *mut entity,
    pub field_0x1990c: undefined,
    pub field_0x1990d: undefined,
    pub field_0x1990e: undefined,
    pub field_0x1990f: undefined,
    pub illuminate_spawn_genid: u16,
    pub field_0x19912: undefined,
    pub field_0x19913: undefined,
    pub sprite_indexes: [monster_id_16; 1155usize],
    pub field_0x1a21a: undefined,
    pub field_0x1a21b: undefined,
    pub display_data: display_data,
    pub minimap_display_data: minimap_display_data,
    pub field_0x286b0: undefined,
    pub field_0x286b1: undefined,
    pub floor_properties: floor_properties,
    pub field_0x286d2: undefined,
    pub field_0x286d3: undefined,
    pub field_0x286d4: undefined,
    pub field_0x286d5: undefined,
    pub field_0x286d6: undefined,
    pub field_0x286d7: undefined,
    pub field_0x286d8: undefined,
    pub field_0x286d9: undefined,
    pub field_0x286da: undefined,
    pub field_0x286db: undefined,
    pub field_0x286dc: undefined,
    pub field_0x286dd: undefined,
    pub field_0x286de: undefined,
    pub field_0x286df: undefined,
    pub field_0x286e0: undefined,
    pub field_0x286e1: undefined,
    pub field_0x286e2: undefined,
    pub field_0x286e3: undefined,
    pub field_0x286e4: undefined,
    pub field_0x286e5: undefined,
    pub field_0x286e6: undefined,
    pub field_0x286e7: undefined,
    pub field_0x286e8: undefined,
    pub field_0x286e9: undefined,
    pub field_0x286ea: undefined,
    pub field_0x286eb: undefined,
    pub field_0x286ec: undefined,
    pub field_0x286ed: undefined,
    pub field_0x286ee: undefined,
    pub field_0x286ef: undefined,
    pub field_0x286f0: undefined,
    pub field_0x286f1: undefined,
    pub regular_item_weights: [u16; 1416usize],
    pub kecleon_item_weights: [u16; 1416usize],
    pub monster_house_item_weights: [u16; 1416usize],
    pub buried_item_weights: [u16; 1416usize],
    pub grab_bag_item_weights: [u16; 1416usize],
    pub secret_room_item_weights: [u16; 1416usize],
    pub field_0x2c952: undefined,
    pub field_0x2c953: undefined,
    pub field_0x2c954: undefined,
    pub field_0x2c955: undefined,
    pub field_0x2c956: undefined,
    pub field_0x2c957: undefined,
    pub field_0x2c958: undefined,
    pub field_0x2c959: undefined,
    pub field_0x2c95a: undefined,
    pub field_0x2c95b: undefined,
    pub field_0x2c95c: undefined,
    pub field_0x2c95d: undefined,
    pub field_0x2c95e: undefined,
    pub field_0x2c95f: undefined,
    pub field_0x2c960: undefined,
    pub field_0x2c961: undefined,
    pub field_0x2c962: undefined,
    pub field_0x2c963: undefined,
    pub spawn_entries_master: [monster_spawn_entry; 16usize],
    pub field_0x2c9e4: undefined2,
    pub highest_enemy_level: u16,
    pub guaranteed_item_id: item_id_16,
    pub spawn_table_entries_chosen: [u16; 16usize],
    pub field_0x2ca0a: undefined,
    pub field_0x2ca0b: undefined,
    pub field_0x2ca0c: undefined,
    pub field_0x2ca0d: undefined,
    pub field_0x2ca0e: undefined,
    pub field_0x2ca0f: undefined,
    pub field_0x2ca10: undefined,
    pub field_0x2ca11: undefined,
    pub field_0x2ca12: undefined,
    pub field_0x2ca13: undefined,
    pub field_0x2ca14: undefined,
    pub field_0x2ca15: undefined,
    pub field_0x2ca16: undefined,
    pub field_0x2ca17: undefined,
    pub field_0x2ca18: undefined,
    pub field_0x2ca19: undefined,
    pub field_0x2ca1a: undefined,
    pub field_0x2ca1b: undefined,
    pub field_0x2ca1c: undefined,
    pub field_0x2ca1d: undefined,
    pub field_0x2ca1e: undefined,
    pub field_0x2ca1f: undefined,
    pub field_0x2ca20: undefined,
    pub field_0x2ca21: undefined,
    pub field_0x2ca22: undefined,
    pub field_0x2ca23: undefined,
    pub field_0x2ca24: undefined,
    pub field_0x2ca25: undefined,
    pub field_0x2ca26: undefined,
    pub field_0x2ca27: undefined,
    pub field_0x2ca28: undefined,
    pub field_0x2ca29: undefined,
    pub field_0x2ca2a: undefined,
    pub field_0x2ca2b: undefined,
    pub field_0x2ca2c: undefined,
    pub field_0x2ca2d: undefined,
    pub field_0x2ca2e: undefined,
    pub field_0x2ca2f: undefined,
    pub field_0x2ca30: undefined,
    pub field_0x2ca31: undefined,
    pub field_0x2ca32: undefined,
    pub field_0x2ca33: undefined,
    pub field_0x2ca34: undefined,
    pub field_0x2ca35: undefined,
    pub field_0x2ca36: undefined,
    pub field_0x2ca37: undefined,
    pub field_0x2ca38: undefined,
    pub field_0x2ca39: undefined,
    pub field_0x2ca3a: undefined,
    pub field_0x2ca3b: undefined,
    pub field_0x2ca3c: undefined,
    pub field_0x2ca3d: undefined,
    pub field_0x2ca3e: undefined,
    pub field_0x2ca3f: undefined,
    pub field_0x2ca40: undefined,
    pub field_0x2ca41: undefined,
    pub field_0x2ca42: undefined,
    pub field_0x2ca43: undefined,
    pub field_0x2ca44: undefined,
    pub field_0x2ca45: undefined,
    pub field_0x2ca46: undefined,
    pub field_0x2ca47: undefined,
    pub field_0x2ca48: undefined,
    pub field_0x2ca49: undefined,
    pub field_0x2ca4a: undefined,
    pub field_0x2ca4b: undefined,
    pub field_0x2ca4c: undefined,
    pub field_0x2ca4d: undefined,
    pub field_0x2ca4e: undefined,
    pub field_0x2ca4f: undefined,
    pub field_0x2ca50: undefined,
    pub field_0x2ca51: undefined,
    pub field_0x2ca52: undefined,
    pub field_0x2ca53: undefined,
    pub field_0x2ca54: undefined,
    pub field_0x2ca55: undefined,
    pub field_0x2ca56: undefined,
    pub field_0x2ca57: undefined,
    pub field_0x2ca58: undefined,
    pub field_0x2ca59: undefined,
    pub field_0x2ca5a: undefined,
    pub field_0x2ca5b: undefined,
    pub field_0x2ca5c: undefined,
    pub field_0x2ca5d: undefined,
    pub field_0x2ca5e: undefined,
    pub field_0x2ca5f: undefined,
    pub field_0x2ca60: undefined,
    pub field_0x2ca61: undefined,
    pub field_0x2ca62: undefined,
    pub field_0x2ca63: undefined,
    pub field_0x2ca64: undefined,
    pub field_0x2ca65: undefined,
    pub field_0x2ca66: undefined,
    pub field_0x2ca67: undefined,
    pub field_0x2ca68: undefined,
    pub field_0x2ca69: undefined,
    pub field_0x2ca6a: undefined,
    pub field_0x2ca6b: undefined,
    pub field_0x2ca6c: undefined,
    pub field_0x2ca6d: undefined,
    pub field_0x2ca6e: undefined,
    pub field_0x2ca6f: undefined,
    pub field_0x2ca70: undefined,
    pub field_0x2ca71: undefined,
    pub field_0x2ca72: undefined,
    pub field_0x2ca73: undefined,
    pub field_0x2ca74: undefined,
    pub field_0x2ca75: undefined,
    pub field_0x2ca76: undefined,
    pub field_0x2ca77: undefined,
    pub field_0x2ca78: undefined,
    pub field_0x2ca79: undefined,
    pub field_0x2ca7a: undefined,
    pub field_0x2ca7b: undefined,
    pub field_0x2ca7c: undefined,
    pub field_0x2ca7d: undefined,
    pub field_0x2ca7e: undefined,
    pub field_0x2ca7f: undefined,
    pub field_0x2ca80: undefined,
    pub field_0x2ca81: undefined,
    pub field_0x2ca82: undefined,
    pub field_0x2ca83: undefined,
    pub field_0x2ca84: undefined,
    pub field_0x2ca85: undefined,
    pub field_0x2ca86: undefined,
    pub field_0x2ca87: undefined,
    pub field_0x2ca88: undefined,
    pub field_0x2ca89: undefined,
    pub field_0x2ca8a: undefined,
    pub field_0x2ca8b: undefined,
    pub field_0x2ca8c: undefined,
    pub field_0x2ca8d: undefined,
    pub field_0x2ca8e: undefined,
    pub field_0x2ca8f: undefined,
    pub field_0x2ca90: undefined,
    pub field_0x2ca91: undefined,
    pub field_0x2ca92: undefined,
    pub field_0x2ca93: undefined,
    pub field_0x2ca94: undefined,
    pub field_0x2ca95: undefined,
    pub field_0x2ca96: undefined,
    pub field_0x2ca97: undefined,
    pub field_0x2ca98: undefined,
    pub field_0x2ca99: undefined,
    pub field_0x2ca9a: undefined,
    pub field_0x2ca9b: undefined,
    pub field_0x2ca9c: undefined,
    pub field_0x2ca9d: undefined,
    pub field_0x2ca9e: undefined,
    pub field_0x2ca9f: undefined,
    pub field_0x2caa0: undefined,
    pub field_0x2caa1: undefined,
    pub field_0x2caa2: undefined,
    pub field_0x2caa3: undefined,
    pub field_0x2caa4: undefined,
    pub field_0x2caa5: undefined,
    pub field_0x2caa6: undefined,
    pub field_0x2caa7: undefined,
    pub field_0x2caa8: undefined,
    pub field_0x2caa9: undefined,
    pub field_0x2caaa: undefined,
    pub field_0x2caab: undefined,
    pub field_0x2caac: undefined,
    pub field_0x2caad: undefined,
    pub field_0x2caae: undefined,
    pub field_0x2caaf: undefined,
    pub field_0x2cab0: undefined,
    pub field_0x2cab1: undefined,
    pub field_0x2cab2: undefined,
    pub field_0x2cab3: undefined,
    pub field_0x2cab4: undefined,
    pub field_0x2cab5: undefined,
    pub field_0x2cab6: undefined,
    pub field_0x2cab7: undefined,
    pub field_0x2cab8: undefined,
    pub field_0x2cab9: undefined,
    pub field_0x2caba: undefined,
    pub field_0x2cabb: undefined,
    pub field_0x2cabc: undefined,
    pub field_0x2cabd: undefined,
    pub field_0x2cabe: undefined,
    pub field_0x2cabf: undefined,
    pub field_0x2cac0: undefined,
    pub field_0x2cac1: undefined,
    pub field_0x2cac2: undefined,
    pub field_0x2cac3: undefined,
    pub field_0x2cac4: undefined,
    pub field_0x2cac5: undefined,
    pub field_0x2cac6: undefined,
    pub field_0x2cac7: undefined,
    pub field_0x2cac8: undefined,
    pub field_0x2cac9: undefined,
    pub field_0x2caca: undefined,
    pub field_0x2cacb: undefined,
    pub field_0x2cacc: undefined,
    pub field_0x2cacd: undefined,
    pub field_0x2cace: undefined,
    pub field_0x2cacf: undefined,
    pub field_0x2cad0: undefined,
    pub field_0x2cad1: undefined,
    pub field_0x2cad2: undefined,
    pub field_0x2cad3: undefined,
    pub field_0x2cad4: undefined,
    pub field_0x2cad5: undefined,
    pub field_0x2cad6: undefined,
    pub field_0x2cad7: undefined,
    pub field_0x2cad8: undefined,
    pub field_0x2cad9: undefined,
    pub field_0x2cada: undefined,
    pub field_0x2cadb: undefined,
    pub field_0x2cadc: undefined,
    pub field_0x2cadd: undefined,
    pub field_0x2cade: undefined,
    pub field_0x2cadf: undefined,
    pub field_0x2cae0: undefined,
    pub field_0x2cae1: undefined,
    pub field_0x2cae2: undefined,
    pub field_0x2cae3: undefined,
    pub field_0x2cae4: undefined,
    pub field_0x2cae5: undefined,
    pub field_0x2cae6: undefined,
    pub field_0x2cae7: undefined,
    pub field_0x2cae8: undefined,
    pub field_0x2cae9: undefined,
    pub field_0x2caea: undefined,
    pub field_0x2caeb: undefined,
    pub field_0x2caec: undefined,
    pub field_0x2caed: undefined,
    pub field_0x2caee: undefined,
    pub field_0x2caef: undefined,
    pub field_0x2caf0: undefined,
    pub field_0x2caf1: undefined,
    pub field_0x2caf2: undefined,
    pub field_0x2caf3: undefined,
    pub n_floors_plus_one: u8,
    pub field_0x2caf5: undefined,
    pub field_0x2caf6: undefined,
    pub field_0x2caf7: undefined,
    pub field_0x2caf8: undefined,
    pub field_0x2caf9: undefined,
    pub field_0x2cafa: undefined,
    pub field_0x2cafb: undefined,
    pub field_0x2cafc: undefined,
    pub field_0x2cafd: undefined,
    pub field_0x2cafe: undefined,
    pub field_0x2caff: undefined,
    pub field_0x2cb00: undefined,
    pub field_0x2cb01: undefined,
    pub field_0x2cb02: undefined,
    pub field_0x2cb03: undefined,
    pub field_0x2cb04: undefined,
    pub field_0x2cb05: undefined,
    pub field_0x2cb06: undefined,
    pub field_0x2cb07: undefined,
    pub field_0x2cb08: undefined,
    pub field_0x2cb09: undefined,
    pub field_0x2cb0a: undefined,
    pub field_0x2cb0b: undefined,
    pub field_0x2cb0c: undefined,
    pub field_0x2cb0d: undefined,
    pub field_0x2cb0e: undefined,
    pub field_0x2cb0f: undefined,
    pub field_0x2cb10: undefined,
    pub field_0x2cb11: undefined,
    pub field_0x2cb12: undefined,
    pub field_0x2cb13: undefined,
}
impl script_var_id {
    pub const VAR_VERSION: script_var_id = script_var_id(0);
}
impl script_var_id {
    pub const VAR_CONDITION: script_var_id = script_var_id(1);
}
impl script_var_id {
    pub const VAR_SCENARIO_SELECT: script_var_id = script_var_id(2);
}
impl script_var_id {
    pub const VAR_SCENARIO_MAIN: script_var_id = script_var_id(3);
}
impl script_var_id {
    pub const VAR_SCENARIO_SIDE: script_var_id = script_var_id(4);
}
impl script_var_id {
    pub const VAR_SCENARIO_SUB1: script_var_id = script_var_id(5);
}
impl script_var_id {
    pub const VAR_SCENARIO_SUB2: script_var_id = script_var_id(6);
}
impl script_var_id {
    pub const VAR_SCENARIO_SUB3: script_var_id = script_var_id(7);
}
impl script_var_id {
    pub const VAR_SCENARIO_SUB4: script_var_id = script_var_id(8);
}
impl script_var_id {
    pub const VAR_SCENARIO_SUB5: script_var_id = script_var_id(9);
}
impl script_var_id {
    pub const VAR_SCENARIO_SUB6: script_var_id = script_var_id(10);
}
impl script_var_id {
    pub const VAR_SCENARIO_SUB7: script_var_id = script_var_id(11);
}
impl script_var_id {
    pub const VAR_SCENARIO_SUB8: script_var_id = script_var_id(12);
}
impl script_var_id {
    pub const VAR_SIDE02_TALK: script_var_id = script_var_id(13);
}
impl script_var_id {
    pub const VAR_SIDE06_ROOM: script_var_id = script_var_id(14);
}
impl script_var_id {
    pub const VAR_SIDE08_BOSS2ND: script_var_id = script_var_id(15);
}
impl script_var_id {
    pub const VAR_SIDE01_BOSS2ND: script_var_id = script_var_id(16);
}
impl script_var_id {
    pub const VAR_SCENARIO_MAIN_BIT_FLAG: script_var_id = script_var_id(17);
}
impl script_var_id {
    pub const VAR_SCENARIO_TALK_BIT_FLAG: script_var_id = script_var_id(18);
}
impl script_var_id {
    pub const VAR_SCENARIO_BALANCE_FLAG: script_var_id = script_var_id(19);
}
impl script_var_id {
    pub const VAR_SCENARIO_BALANCE_DEBUG: script_var_id = script_var_id(20);
}
impl script_var_id {
    pub const VAR_CRYSTAL_COLOR_01: script_var_id = script_var_id(21);
}
impl script_var_id {
    pub const VAR_CRYSTAL_COLOR_02: script_var_id = script_var_id(22);
}
impl script_var_id {
    pub const VAR_CRYSTAL_COLOR_03: script_var_id = script_var_id(23);
}
impl script_var_id {
    pub const VAR_COMPULSORY_SAVE_POINT: script_var_id = script_var_id(24);
}
impl script_var_id {
    pub const VAR_COMPULSORY_SAVE_POINT_SIDE: script_var_id = script_var_id(25);
}
impl script_var_id {
    pub const VAR_SCENARIO_SELECT_BACKUP: script_var_id = script_var_id(26);
}
impl script_var_id {
    pub const VAR_SCENARIO_MAIN_BIT_FLAG_BACKUP: script_var_id = script_var_id(27);
}
impl script_var_id {
    pub const VAR_GROUND_ENTER: script_var_id = script_var_id(28);
}
impl script_var_id {
    pub const VAR_GROUND_ENTER_LINK: script_var_id = script_var_id(29);
}
impl script_var_id {
    pub const VAR_GROUND_GETOUT: script_var_id = script_var_id(30);
}
impl script_var_id {
    pub const VAR_GROUND_MAP: script_var_id = script_var_id(31);
}
impl script_var_id {
    pub const VAR_GROUND_PLACE: script_var_id = script_var_id(32);
}
impl script_var_id {
    pub const VAR_GROUND_ENTER_BACKUP: script_var_id = script_var_id(33);
}
impl script_var_id {
    pub const VAR_GROUND_ENTER_LINK_BACKUP: script_var_id = script_var_id(34);
}
impl script_var_id {
    pub const VAR_GROUND_GETOUT_BACKUP: script_var_id = script_var_id(35);
}
impl script_var_id {
    pub const VAR_GROUND_MAP_BACKUP: script_var_id = script_var_id(36);
}
impl script_var_id {
    pub const VAR_GROUND_PLACE_BACKUP: script_var_id = script_var_id(37);
}
impl script_var_id {
    pub const VAR_DUNGEON_SELECT: script_var_id = script_var_id(38);
}
impl script_var_id {
    pub const VAR_DUNGEON_ENTER: script_var_id = script_var_id(39);
}
impl script_var_id {
    pub const VAR_DUNGEON_ENTER_MODE: script_var_id = script_var_id(40);
}
impl script_var_id {
    pub const VAR_DUNGEON_ENTER_INDEX: script_var_id = script_var_id(41);
}
impl script_var_id {
    pub const VAR_DUNGEON_ENTER_FREQUENCY: script_var_id = script_var_id(42);
}
impl script_var_id {
    pub const VAR_DUNGEON_RESULT: script_var_id = script_var_id(43);
}
impl script_var_id {
    pub const VAR_GROUND_START_MODE: script_var_id = script_var_id(44);
}
impl script_var_id {
    pub const VAR_DUNGEON_ENTER_BACKUP: script_var_id = script_var_id(45);
}
impl script_var_id {
    pub const VAR_DUNGEON_ENTER_MODE_BACKUP: script_var_id = script_var_id(46);
}
impl script_var_id {
    pub const VAR_DUNGEON_ENTER_INDEX_BACKUP: script_var_id = script_var_id(47);
}
impl script_var_id {
    pub const VAR_DUNGEON_ENTER_FREQUENCY_BACKUP: script_var_id = script_var_id(48);
}
impl script_var_id {
    pub const VAR_DUNGEON_RESULT_BACKUP: script_var_id = script_var_id(49);
}
impl script_var_id {
    pub const VAR_GROUND_START_MODE_BACKUP: script_var_id = script_var_id(50);
}
impl script_var_id {
    pub const VAR_REQUEST_CLEAR_COUNT: script_var_id = script_var_id(51);
}
impl script_var_id {
    pub const VAR_PLAYER_KIND: script_var_id = script_var_id(52);
}
impl script_var_id {
    pub const VAR_ATTENDANT1_KIND: script_var_id = script_var_id(53);
}
impl script_var_id {
    pub const VAR_ATTENDANT2_KIND: script_var_id = script_var_id(54);
}
impl script_var_id {
    pub const VAR_PLAYER_KIND_BACKUP: script_var_id = script_var_id(55);
}
impl script_var_id {
    pub const VAR_ATTENDANT1_KIND_BACKUP: script_var_id = script_var_id(56);
}
impl script_var_id {
    pub const VAR_ATTENDANT2_KIND_BACKUP: script_var_id = script_var_id(57);
}
impl script_var_id {
    pub const VAR_FRIEND_SUM: script_var_id = script_var_id(58);
}
impl script_var_id {
    pub const VAR_UNIT_SUM: script_var_id = script_var_id(59);
}
impl script_var_id {
    pub const VAR_CARRY_GOLD: script_var_id = script_var_id(60);
}
impl script_var_id {
    pub const VAR_BANK_GOLD: script_var_id = script_var_id(61);
}
impl script_var_id {
    pub const VAR_HERO_FIRST_KIND: script_var_id = script_var_id(62);
}
impl script_var_id {
    pub const VAR_HERO_FIRST_NAME: script_var_id = script_var_id(63);
}
impl script_var_id {
    pub const VAR_PARTNER_FIRST_KIND: script_var_id = script_var_id(64);
}
impl script_var_id {
    pub const VAR_PARTNER_FIRST_NAME: script_var_id = script_var_id(65);
}
impl script_var_id {
    pub const VAR_HERO_TALK_KIND: script_var_id = script_var_id(66);
}
impl script_var_id {
    pub const VAR_PARTNER_TALK_KIND: script_var_id = script_var_id(67);
}
impl script_var_id {
    pub const VAR_RANDOM_REQUEST_NPC03_KIND: script_var_id = script_var_id(68);
}
impl script_var_id {
    pub const VAR_CONFIG_COLOR_KIND: script_var_id = script_var_id(69);
}
impl script_var_id {
    pub const VAR_ROM_VARIATION: script_var_id = script_var_id(70);
}
impl script_var_id {
    pub const VAR_LANGUAGE_TYPE: script_var_id = script_var_id(71);
}
impl script_var_id {
    pub const VAR_GAME_MODE: script_var_id = script_var_id(72);
}
impl script_var_id {
    pub const VAR_EXECUTE_SPECIAL_EPISODE_TYPE: script_var_id = script_var_id(73);
}
impl script_var_id {
    pub const VAR_SPECIAL_EPISODE_TYPE: script_var_id = script_var_id(74);
}
impl script_var_id {
    pub const VAR_SPECIAL_EPISODE_OPEN: script_var_id = script_var_id(75);
}
impl script_var_id {
    pub const VAR_SPECIAL_EPISODE_OPEN_OLD: script_var_id = script_var_id(76);
}
impl script_var_id {
    pub const VAR_SPECIAL_EPISODE_CONQUEST: script_var_id = script_var_id(77);
}
impl script_var_id {
    pub const VAR_PERFORMANCE_PROGRESS_LIST: script_var_id = script_var_id(78);
}
impl script_var_id {
    pub const VAR_DUNGEON_OPEN_LIST: script_var_id = script_var_id(79);
}
impl script_var_id {
    pub const VAR_DUNGEON_ENTER_LIST: script_var_id = script_var_id(80);
}
impl script_var_id {
    pub const VAR_DUNGEON_ARRIVE_LIST: script_var_id = script_var_id(81);
}
impl script_var_id {
    pub const VAR_DUNGEON_CONQUEST_LIST: script_var_id = script_var_id(82);
}
impl script_var_id {
    pub const VAR_DUNGEON_PRESENT_LIST: script_var_id = script_var_id(83);
}
impl script_var_id {
    pub const VAR_DUNGEON_REQUEST_LIST: script_var_id = script_var_id(84);
}
impl script_var_id {
    pub const VAR_WORLD_MAP_MARK_LIST_NORMAL: script_var_id = script_var_id(85);
}
impl script_var_id {
    pub const VAR_WORLD_MAP_MARK_LIST_SPECIAL: script_var_id = script_var_id(86);
}
impl script_var_id {
    pub const VAR_WORLD_MAP_LEVEL: script_var_id = script_var_id(87);
}
impl script_var_id {
    pub const VAR_POSITION_X: script_var_id = script_var_id(88);
}
impl script_var_id {
    pub const VAR_POSITION_Y: script_var_id = script_var_id(89);
}
impl script_var_id {
    pub const VAR_POSITION_HEIGHT: script_var_id = script_var_id(90);
}
impl script_var_id {
    pub const VAR_POSITION_DIRECTION: script_var_id = script_var_id(91);
}
impl script_var_id {
    pub const VAR_EVENT_LOCAL: script_var_id = script_var_id(92);
}
impl script_var_id {
    pub const VAR_DUNGEON_EVENT_LOCAL: script_var_id = script_var_id(93);
}
impl script_var_id {
    pub const VAR_STATION_ITEM_STATIC: script_var_id = script_var_id(94);
}
impl script_var_id {
    pub const VAR_STATION_ITEM_TEMP: script_var_id = script_var_id(95);
}
impl script_var_id {
    pub const VAR_DELIVER_ITEM_STATIC: script_var_id = script_var_id(96);
}
impl script_var_id {
    pub const VAR_DELIVER_ITEM_TEMP: script_var_id = script_var_id(97);
}
impl script_var_id {
    pub const VAR_BIT_FUWARANTE_LOCAL: script_var_id = script_var_id(98);
}
impl script_var_id {
    pub const VAR_LOTTERY_RESULT: script_var_id = script_var_id(99);
}
impl script_var_id {
    pub const VAR_ITEM_BACKUP: script_var_id = script_var_id(100);
}
impl script_var_id {
    pub const VAR_ITEM_BACKUP_KUREKURE: script_var_id = script_var_id(101);
}
impl script_var_id {
    pub const VAR_ITEM_BACKUP_TAKE: script_var_id = script_var_id(102);
}
impl script_var_id {
    pub const VAR_ITEM_BACKUP_GET: script_var_id = script_var_id(103);
}
impl script_var_id {
    pub const VAR_REQUEST_THANKS_RESULT_KIND: script_var_id = script_var_id(104);
}
impl script_var_id {
    pub const VAR_REQUEST_THANKS_RESULT_VARIATION: script_var_id = script_var_id(105);
}
impl script_var_id {
    pub const VAR_SUB30_TREASURE_DISCOVER: script_var_id = script_var_id(106);
}
impl script_var_id {
    pub const VAR_SUB30_SPOT_DISCOVER: script_var_id = script_var_id(107);
}
impl script_var_id {
    pub const VAR_RECYCLE_COUNT: script_var_id = script_var_id(108);
}
impl script_var_id {
    pub const VAR_SUB30_SPOT_LEVEL: script_var_id = script_var_id(109);
}
impl script_var_id {
    pub const VAR_TEAM_RANK_EVENT_LEVEL: script_var_id = script_var_id(110);
}
impl script_var_id {
    pub const VAR_PLAY_OLD_GAME: script_var_id = script_var_id(111);
}
impl script_var_id {
    pub const VAR_NOTE_MODIFY_FLAG: script_var_id = script_var_id(112);
}
impl script_var_id {
    pub const VAR_SUB30_PROJECTP: script_var_id = script_var_id(113);
}
impl script_var_id {
    pub const VAR_SUM: script_var_id = script_var_id(114);
}
impl script_var_id {
    pub const VAR_LOCAL0: script_var_id = script_var_id(1024);
}
impl script_var_id {
    pub const VAR_LOCAL1: script_var_id = script_var_id(1025);
}
impl script_var_id {
    pub const VAR_LOCAL2: script_var_id = script_var_id(1026);
}
impl script_var_id {
    pub const VAR_LOCAL3: script_var_id = script_var_id(1027);
}
#[repr(transparent)]
#[derive(Clone, Hash, PartialEq, Eq)]
pub struct script_var_id(pub(crate) crate::ctypes::c_uint);
pub mod script_var_type {
    pub type Type = crate::ctypes::c_uint;
    pub const VARTYPE_NONE: Type = 0;
    pub const VARTYPE_BIT: Type = 1;
    pub const VARTYPE_STRING: Type = 2;
    pub const VARTYPE_UINT8: Type = 3;
    pub const VARTYPE_INT8: Type = 4;
    pub const VARTYPE_UINT16: Type = 5;
    pub const VARTYPE_INT16: Type = 6;
    pub const VARTYPE_UINT32: Type = 7;
    pub const VARTYPE_INT32: Type = 8;
    pub const VARTYPE_SPECIAL: Type = 9;
}
#[repr(C)]
#[repr(align(2))]
pub struct script_var_type_16 {
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 2usize]>,
}
impl script_var_type_16 {
    #[inline]
    pub fn val(&self) -> script_var_type::Type {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(0usize, 16u8) as u32) }
    }
    #[inline]
    pub fn set_val(&mut self, val: script_var_type::Type) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(0usize, 16u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(val: script_var_type::Type) -> __BindgenBitfieldUnit<[u8; 2usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 2usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 16u8, {
            let val: u32 = unsafe { ::core::mem::transmute(val) };
            val as u64
        });
        __bindgen_bitfield_unit
    }
}
impl script_opcode_id {
    pub const OPCODE_NULL: script_opcode_id = script_opcode_id(0);
}
impl script_opcode_id {
    pub const OPCODE_BACK_CHANGE_GROUND: script_opcode_id = script_opcode_id(1);
}
impl script_opcode_id {
    pub const OPCODE_BACK_SET_BACK_EFFECT: script_opcode_id = script_opcode_id(2);
}
impl script_opcode_id {
    pub const OPCODE_BACK_SET_BACK_SCROLL_OFFSET: script_opcode_id = script_opcode_id(3);
}
impl script_opcode_id {
    pub const OPCODE_BACK_SET_BACK_SCROLL_SPEED: script_opcode_id = script_opcode_id(4);
}
impl script_opcode_id {
    pub const OPCODE_BACK_SET_BANNER: script_opcode_id = script_opcode_id(5);
}
impl script_opcode_id {
    pub const OPCODE_BACK_SET_BANNER2: script_opcode_id = script_opcode_id(6);
}
impl script_opcode_id {
    pub const OPCODE_BACK_SET_EFFECT: script_opcode_id = script_opcode_id(7);
}
impl script_opcode_id {
    pub const OPCODE_BACK_SET_DUNGEON_BANNER: script_opcode_id = script_opcode_id(8);
}
impl script_opcode_id {
    pub const OPCODE_BACK_SET_GROUND: script_opcode_id = script_opcode_id(9);
}
impl script_opcode_id {
    pub const OPCODE_BACK_SET_SPECIAL_EPISODE_BANNER: script_opcode_id = script_opcode_id(10);
}
impl script_opcode_id {
    pub const OPCODE_BACK_SET_SPECIAL_EPISODE_BANNER2: script_opcode_id = script_opcode_id(11);
}
impl script_opcode_id {
    pub const OPCODE_BACK_SET_SPECIAL_EPISODE_BANNER3: script_opcode_id = script_opcode_id(12);
}
impl script_opcode_id {
    pub const OPCODE_BACK_SET_TITLE_BANNER: script_opcode_id = script_opcode_id(13);
}
impl script_opcode_id {
    pub const OPCODE_BACK_SET_WEATHER: script_opcode_id = script_opcode_id(14);
}
impl script_opcode_id {
    pub const OPCODE_BACK_SET_WEATHER_EFFECT: script_opcode_id = script_opcode_id(15);
}
impl script_opcode_id {
    pub const OPCODE_BACK_SET_WEATHER_SCROLL_OFFSET: script_opcode_id = script_opcode_id(16);
}
impl script_opcode_id {
    pub const OPCODE_BACK_SET_WEATHER_SCROLL_SPEED: script_opcode_id = script_opcode_id(17);
}
impl script_opcode_id {
    pub const OPCODE_BACK2_SET_BACK_EFFECT: script_opcode_id = script_opcode_id(18);
}
impl script_opcode_id {
    pub const OPCODE_BACK2_SET_BACK_SCROLL_OFFSET: script_opcode_id = script_opcode_id(19);
}
impl script_opcode_id {
    pub const OPCODE_BACK2_SET_BACK_SCROLL_SPEED: script_opcode_id = script_opcode_id(20);
}
impl script_opcode_id {
    pub const OPCODE_BACK2_SET_DATA: script_opcode_id = script_opcode_id(21);
}
impl script_opcode_id {
    pub const OPCODE_BACK2_SET_EFFECT: script_opcode_id = script_opcode_id(22);
}
impl script_opcode_id {
    pub const OPCODE_BACK2_SET_GROUND: script_opcode_id = script_opcode_id(23);
}
impl script_opcode_id {
    pub const OPCODE_BACK2_SET_MODE: script_opcode_id = script_opcode_id(24);
}
impl script_opcode_id {
    pub const OPCODE_BACK2_SET_SPECIAL_ACTING: script_opcode_id = script_opcode_id(25);
}
impl script_opcode_id {
    pub const OPCODE_BACK2_SET_WEATHER: script_opcode_id = script_opcode_id(26);
}
impl script_opcode_id {
    pub const OPCODE_BACK2_SET_WEATHER_EFFECT: script_opcode_id = script_opcode_id(27);
}
impl script_opcode_id {
    pub const OPCODE_BACK2_SET_WEATHER_SCROLL_OFFSET: script_opcode_id = script_opcode_id(28);
}
impl script_opcode_id {
    pub const OPCODE_BACK2_SET_WEATHER_SCROLL_SPEED: script_opcode_id = script_opcode_id(29);
}
impl script_opcode_id {
    pub const OPCODE_BGM_FADE_OUT: script_opcode_id = script_opcode_id(30);
}
impl script_opcode_id {
    pub const OPCODE_BGM_PLAY: script_opcode_id = script_opcode_id(31);
}
impl script_opcode_id {
    pub const OPCODE_BGM_PLAY_FADE_IN: script_opcode_id = script_opcode_id(32);
}
impl script_opcode_id {
    pub const OPCODE_BGM_STOP: script_opcode_id = script_opcode_id(33);
}
impl script_opcode_id {
    pub const OPCODE_BGM_CHANGE_VOLUME: script_opcode_id = script_opcode_id(34);
}
impl script_opcode_id {
    pub const OPCODE_BGM2_FADE_OUT: script_opcode_id = script_opcode_id(35);
}
impl script_opcode_id {
    pub const OPCODE_BGM2_PLAY: script_opcode_id = script_opcode_id(36);
}
impl script_opcode_id {
    pub const OPCODE_BGM2_PLAY_FADE_IN: script_opcode_id = script_opcode_id(37);
}
impl script_opcode_id {
    pub const OPCODE_BGM2_STOP: script_opcode_id = script_opcode_id(38);
}
impl script_opcode_id {
    pub const OPCODE_BGM2_CHANGE_VOLUME: script_opcode_id = script_opcode_id(39);
}
impl script_opcode_id {
    pub const OPCODE_BRANCH: script_opcode_id = script_opcode_id(40);
}
impl script_opcode_id {
    pub const OPCODE_BRANCH_BIT: script_opcode_id = script_opcode_id(41);
}
impl script_opcode_id {
    pub const OPCODE_BRANCH_DEBUG: script_opcode_id = script_opcode_id(42);
}
impl script_opcode_id {
    pub const OPCODE_BRANCH_EDIT: script_opcode_id = script_opcode_id(43);
}
impl script_opcode_id {
    pub const OPCODE_BRANCH_EXECUTE_SUB: script_opcode_id = script_opcode_id(44);
}
impl script_opcode_id {
    pub const OPCODE_BRANCH_PERFORMANCE: script_opcode_id = script_opcode_id(45);
}
impl script_opcode_id {
    pub const OPCODE_BRANCH_SCENARIO_NOW: script_opcode_id = script_opcode_id(46);
}
impl script_opcode_id {
    pub const OPCODE_BRANCH_SCENARIO_NOW_AFTER: script_opcode_id = script_opcode_id(47);
}
impl script_opcode_id {
    pub const OPCODE_BRANCH_SCENARIO_NOW_BEFORE: script_opcode_id = script_opcode_id(48);
}
impl script_opcode_id {
    pub const OPCODE_BRANCH_SCENARIO_AFTER: script_opcode_id = script_opcode_id(49);
}
impl script_opcode_id {
    pub const OPCODE_BRANCH_SCENARIO_BEFORE: script_opcode_id = script_opcode_id(50);
}
impl script_opcode_id {
    pub const OPCODE_BRANCH_SUM: script_opcode_id = script_opcode_id(51);
}
impl script_opcode_id {
    pub const OPCODE_BRANCH_VALUE: script_opcode_id = script_opcode_id(52);
}
impl script_opcode_id {
    pub const OPCODE_BRANCH_VARIABLE: script_opcode_id = script_opcode_id(53);
}
impl script_opcode_id {
    pub const OPCODE_BRANCH_VARIATION: script_opcode_id = script_opcode_id(54);
}
impl script_opcode_id {
    pub const OPCODE_CALL: script_opcode_id = script_opcode_id(55);
}
impl script_opcode_id {
    pub const OPCODE_CALL_COMMON: script_opcode_id = script_opcode_id(56);
}
impl script_opcode_id {
    pub const OPCODE_CAMERA_MOVE2_DEFAULT: script_opcode_id = script_opcode_id(57);
}
impl script_opcode_id {
    pub const OPCODE_CAMERA_MOVE2_MY_POSITION: script_opcode_id = script_opcode_id(58);
}
impl script_opcode_id {
    pub const OPCODE_CAMERA_MOVE2_MYSELF: script_opcode_id = script_opcode_id(59);
}
impl script_opcode_id {
    pub const OPCODE_CAMERA_MOVE2_POSITION_MARK_VARIADIC: script_opcode_id = script_opcode_id(60);
}
impl script_opcode_id {
    pub const OPCODE_CAMERA_MOVE2_POSITION_MARK: script_opcode_id = script_opcode_id(61);
}
impl script_opcode_id {
    pub const OPCODE_CAMERA_MOVE3_DEFAULT: script_opcode_id = script_opcode_id(62);
}
impl script_opcode_id {
    pub const OPCODE_CAMERA_MOVE3_MY_POSITION: script_opcode_id = script_opcode_id(63);
}
impl script_opcode_id {
    pub const OPCODE_CAMERA_MOVE3_MYSELF: script_opcode_id = script_opcode_id(64);
}
impl script_opcode_id {
    pub const OPCODE_CAMERA_MOVE3_POSITION_MARK_VARIADIC: script_opcode_id = script_opcode_id(65);
}
impl script_opcode_id {
    pub const OPCODE_CAMERA_MOVE3_POSITION_MARK: script_opcode_id = script_opcode_id(66);
}
impl script_opcode_id {
    pub const OPCODE_CAMERA_MOVE_DEFAULT: script_opcode_id = script_opcode_id(67);
}
impl script_opcode_id {
    pub const OPCODE_CAMERA_MOVE_MY_POSITION: script_opcode_id = script_opcode_id(68);
}
impl script_opcode_id {
    pub const OPCODE_CAMERA_MOVE_MYSELF: script_opcode_id = script_opcode_id(69);
}
impl script_opcode_id {
    pub const OPCODE_CAMERA_MOVE_POSITION_MARK_VARIADIC: script_opcode_id = script_opcode_id(70);
}
impl script_opcode_id {
    pub const OPCODE_CAMERA_MOVE_POSITION_MARK: script_opcode_id = script_opcode_id(71);
}
impl script_opcode_id {
    pub const OPCODE_CAMERA_SET_DEFAULT: script_opcode_id = script_opcode_id(72);
}
impl script_opcode_id {
    pub const OPCODE_CAMERA_SET_EFFECT: script_opcode_id = script_opcode_id(73);
}
impl script_opcode_id {
    pub const OPCODE_CAMERA_SET_MY_POSITION: script_opcode_id = script_opcode_id(74);
}
impl script_opcode_id {
    pub const OPCODE_CAMERA_SET_MYSELF: script_opcode_id = script_opcode_id(75);
}
impl script_opcode_id {
    pub const OPCODE_CAMERA_SET_POSITION_MARK: script_opcode_id = script_opcode_id(76);
}
impl script_opcode_id {
    pub const OPCODE_CAMERA2_MOVE2_DEFAULT: script_opcode_id = script_opcode_id(77);
}
impl script_opcode_id {
    pub const OPCODE_CAMERA2_MOVE2_MY_POSITION: script_opcode_id = script_opcode_id(78);
}
impl script_opcode_id {
    pub const OPCODE_CAMERA2_MOVE2_MYSELF: script_opcode_id = script_opcode_id(79);
}
impl script_opcode_id {
    pub const OPCODE_CAMERA2_MOVE2_POSITION_MARK_VARIADIC: script_opcode_id = script_opcode_id(80);
}
impl script_opcode_id {
    pub const OPCODE_CAMERA2_MOVE2_POSITION_MARK: script_opcode_id = script_opcode_id(81);
}
impl script_opcode_id {
    pub const OPCODE_CAMERA2_MOVE3_DEFAULT: script_opcode_id = script_opcode_id(82);
}
impl script_opcode_id {
    pub const OPCODE_CAMERA2_MOVE3_MY_POSITION: script_opcode_id = script_opcode_id(83);
}
impl script_opcode_id {
    pub const OPCODE_CAMERA2_MOVE3_MYSELF: script_opcode_id = script_opcode_id(84);
}
impl script_opcode_id {
    pub const OPCODE_CAMERA2_MOVE3_POSITION_MARK_VARIADIC: script_opcode_id = script_opcode_id(85);
}
impl script_opcode_id {
    pub const OPCODE_CAMERA2_MOVE3_POSITION_MARK: script_opcode_id = script_opcode_id(86);
}
impl script_opcode_id {
    pub const OPCODE_CAMERA2_MOVE_DEFAULT: script_opcode_id = script_opcode_id(87);
}
impl script_opcode_id {
    pub const OPCODE_CAMERA2_MOVE_MY_POSITION: script_opcode_id = script_opcode_id(88);
}
impl script_opcode_id {
    pub const OPCODE_CAMERA2_MOVE_MYSELF: script_opcode_id = script_opcode_id(89);
}
impl script_opcode_id {
    pub const OPCODE_CAMERA2_MOVE_POSITION_MARK_VARIADIC: script_opcode_id = script_opcode_id(90);
}
impl script_opcode_id {
    pub const OPCODE_CAMERA2_MOVE_POSITION_MARK: script_opcode_id = script_opcode_id(91);
}
impl script_opcode_id {
    pub const OPCODE_CAMERA2_SET_DEFAULT: script_opcode_id = script_opcode_id(92);
}
impl script_opcode_id {
    pub const OPCODE_CAMERA2_SET_EFFECT: script_opcode_id = script_opcode_id(93);
}
impl script_opcode_id {
    pub const OPCODE_CAMERA2_SET_MY_POSITION: script_opcode_id = script_opcode_id(94);
}
impl script_opcode_id {
    pub const OPCODE_CAMERA2_SET_MYSELF: script_opcode_id = script_opcode_id(95);
}
impl script_opcode_id {
    pub const OPCODE_CAMERA2_SET_POSITION_MARK: script_opcode_id = script_opcode_id(96);
}
impl script_opcode_id {
    pub const OPCODE_CANCEL_CUT: script_opcode_id = script_opcode_id(97);
}
impl script_opcode_id {
    pub const OPCODE_CANCEL_RECOVER_COMMON: script_opcode_id = script_opcode_id(98);
}
impl script_opcode_id {
    pub const OPCODE_CASE: script_opcode_id = script_opcode_id(99);
}
impl script_opcode_id {
    pub const OPCODE_CASE_MENU: script_opcode_id = script_opcode_id(100);
}
impl script_opcode_id {
    pub const OPCODE_CASE_MENU2: script_opcode_id = script_opcode_id(101);
}
impl script_opcode_id {
    pub const OPCODE_CASE_SCENARIO: script_opcode_id = script_opcode_id(102);
}
impl script_opcode_id {
    pub const OPCODE_CASE_TEXT: script_opcode_id = script_opcode_id(103);
}
impl script_opcode_id {
    pub const OPCODE_CASE_VALUE: script_opcode_id = script_opcode_id(104);
}
impl script_opcode_id {
    pub const OPCODE_CASE_VARIABLE: script_opcode_id = script_opcode_id(105);
}
impl script_opcode_id {
    pub const OPCODE_DEBUG_ASSERT: script_opcode_id = script_opcode_id(106);
}
impl script_opcode_id {
    pub const OPCODE_DEBUG_PRINT: script_opcode_id = script_opcode_id(107);
}
impl script_opcode_id {
    pub const OPCODE_DEBUG_PRINT_FLAG: script_opcode_id = script_opcode_id(108);
}
impl script_opcode_id {
    pub const OPCODE_DEBUG_PRINT_SCENARIO: script_opcode_id = script_opcode_id(109);
}
impl script_opcode_id {
    pub const OPCODE_DEFAULT_TEXT: script_opcode_id = script_opcode_id(110);
}
impl script_opcode_id {
    pub const OPCODE_DESTROY: script_opcode_id = script_opcode_id(111);
}
impl script_opcode_id {
    pub const OPCODE_END: script_opcode_id = script_opcode_id(112);
}
impl script_opcode_id {
    pub const OPCODE_END_ANIMATION: script_opcode_id = script_opcode_id(113);
}
impl script_opcode_id {
    pub const OPCODE_EXECUTE_ACTING: script_opcode_id = script_opcode_id(114);
}
impl script_opcode_id {
    pub const OPCODE_EXECUTE_COMMON: script_opcode_id = script_opcode_id(115);
}
impl script_opcode_id {
    pub const OPCODE_FLAG_CALC_BIT: script_opcode_id = script_opcode_id(116);
}
impl script_opcode_id {
    pub const OPCODE_FLAG_CALC_VALUE: script_opcode_id = script_opcode_id(117);
}
impl script_opcode_id {
    pub const OPCODE_FLAG_CALC_VARIABLE: script_opcode_id = script_opcode_id(118);
}
impl script_opcode_id {
    pub const OPCODE_FLAG_CLEAR: script_opcode_id = script_opcode_id(119);
}
impl script_opcode_id {
    pub const OPCODE_FLAG_INITIAL: script_opcode_id = script_opcode_id(120);
}
impl script_opcode_id {
    pub const OPCODE_FLAG_SET: script_opcode_id = script_opcode_id(121);
}
impl script_opcode_id {
    pub const OPCODE_FLAG_RESET_DUNGEON_RESULT: script_opcode_id = script_opcode_id(122);
}
impl script_opcode_id {
    pub const OPCODE_FLAG_RESET_SCENARIO: script_opcode_id = script_opcode_id(123);
}
impl script_opcode_id {
    pub const OPCODE_FLAG_SET_ADVENTURE_LOG: script_opcode_id = script_opcode_id(124);
}
impl script_opcode_id {
    pub const OPCODE_FLAG_SET_DUNGEON_MODE: script_opcode_id = script_opcode_id(125);
}
impl script_opcode_id {
    pub const OPCODE_FLAG_SET_DUNGEON_RESULT: script_opcode_id = script_opcode_id(126);
}
impl script_opcode_id {
    pub const OPCODE_FLAG_SET_PERFORMANCE: script_opcode_id = script_opcode_id(127);
}
impl script_opcode_id {
    pub const OPCODE_FLAG_SET_SCENARIO: script_opcode_id = script_opcode_id(128);
}
impl script_opcode_id {
    pub const OPCODE_FLASH: script_opcode_id = script_opcode_id(129);
}
impl script_opcode_id {
    pub const OPCODE_HOLD: script_opcode_id = script_opcode_id(130);
}
impl script_opcode_id {
    pub const OPCODE_ITEM_GET_VARIABLE: script_opcode_id = script_opcode_id(131);
}
impl script_opcode_id {
    pub const OPCODE_ITEM_SET: script_opcode_id = script_opcode_id(132);
}
impl script_opcode_id {
    pub const OPCODE_ITEM_SET_TABLE_DATA: script_opcode_id = script_opcode_id(133);
}
impl script_opcode_id {
    pub const OPCODE_ITEM_SET_VARIABLE: script_opcode_id = script_opcode_id(134);
}
impl script_opcode_id {
    pub const OPCODE_JUMP: script_opcode_id = script_opcode_id(135);
}
impl script_opcode_id {
    pub const OPCODE_JUMP_COMMON: script_opcode_id = script_opcode_id(136);
}
impl script_opcode_id {
    pub const OPCODE_LIVES: script_opcode_id = script_opcode_id(137);
}
impl script_opcode_id {
    pub const OPCODE_LOAD_POSITION: script_opcode_id = script_opcode_id(138);
}
impl script_opcode_id {
    pub const OPCODE_LOCK: script_opcode_id = script_opcode_id(139);
}
impl script_opcode_id {
    pub const OPCODE_MAIN_ENTER_ADVENTURE: script_opcode_id = script_opcode_id(140);
}
impl script_opcode_id {
    pub const OPCODE_MAIN_ENTER_DUNGEON: script_opcode_id = script_opcode_id(141);
}
impl script_opcode_id {
    pub const OPCODE_MAIN_ENTER_GROUND: script_opcode_id = script_opcode_id(142);
}
impl script_opcode_id {
    pub const OPCODE_MAIN_ENTER_GROUND_MULTI: script_opcode_id = script_opcode_id(143);
}
impl script_opcode_id {
    pub const OPCODE_MAIN_ENTER_RESCUE_USER: script_opcode_id = script_opcode_id(144);
}
impl script_opcode_id {
    pub const OPCODE_MAIN_ENTER_TRAINING: script_opcode_id = script_opcode_id(145);
}
impl script_opcode_id {
    pub const OPCODE_MAIN_ENTER_TRAINING2: script_opcode_id = script_opcode_id(146);
}
impl script_opcode_id {
    pub const OPCODE_MAIN_SET_GROUND: script_opcode_id = script_opcode_id(147);
}
impl script_opcode_id {
    pub const OPCODE_ME_PLAY: script_opcode_id = script_opcode_id(148);
}
impl script_opcode_id {
    pub const OPCODE_ME_STOP: script_opcode_id = script_opcode_id(149);
}
impl script_opcode_id {
    pub const OPCODE_MESSAGE_CLOSE: script_opcode_id = script_opcode_id(150);
}
impl script_opcode_id {
    pub const OPCODE_MESSAGE_CLOSE_ENFORCE: script_opcode_id = script_opcode_id(151);
}
impl script_opcode_id {
    pub const OPCODE_MESSAGE_EXPLANATION: script_opcode_id = script_opcode_id(152);
}
impl script_opcode_id {
    pub const OPCODE_MESSAGE_FACE_POSITION_OFFSET: script_opcode_id = script_opcode_id(153);
}
impl script_opcode_id {
    pub const OPCODE_MESSAGE_IMITATION_SOUND: script_opcode_id = script_opcode_id(154);
}
impl script_opcode_id {
    pub const OPCODE_MESSAGE_KEY_WAIT: script_opcode_id = script_opcode_id(155);
}
impl script_opcode_id {
    pub const OPCODE_MESSAGE_MAIL: script_opcode_id = script_opcode_id(156);
}
impl script_opcode_id {
    pub const OPCODE_MESSAGE_MENU: script_opcode_id = script_opcode_id(157);
}
impl script_opcode_id {
    pub const OPCODE_MESSAGE_MONOLOGUE: script_opcode_id = script_opcode_id(158);
}
impl script_opcode_id {
    pub const OPCODE_MESSAGE_NARRATION: script_opcode_id = script_opcode_id(159);
}
impl script_opcode_id {
    pub const OPCODE_MESSAGE_NOTICE: script_opcode_id = script_opcode_id(160);
}
impl script_opcode_id {
    pub const OPCODE_MESSAGE_EMPTY_ACTOR: script_opcode_id = script_opcode_id(161);
}
impl script_opcode_id {
    pub const OPCODE_MESSAGE_RESET_ACTOR: script_opcode_id = script_opcode_id(162);
}
impl script_opcode_id {
    pub const OPCODE_MESSAGE_SET_ACTOR: script_opcode_id = script_opcode_id(163);
}
impl script_opcode_id {
    pub const OPCODE_MESSAGE_SET_FACE: script_opcode_id = script_opcode_id(164);
}
impl script_opcode_id {
    pub const OPCODE_MESSAGE_SET_FACE_EMPTY: script_opcode_id = script_opcode_id(165);
}
impl script_opcode_id {
    pub const OPCODE_MESSAGE_SET_FACE_ONLY: script_opcode_id = script_opcode_id(166);
}
impl script_opcode_id {
    pub const OPCODE_MESSAGE_SET_FACE_POSITION: script_opcode_id = script_opcode_id(167);
}
impl script_opcode_id {
    pub const OPCODE_MESSAGE_SET_WAIT_MODE: script_opcode_id = script_opcode_id(168);
}
impl script_opcode_id {
    pub const OPCODE_MESSAGE_SPECIAL_TALK: script_opcode_id = script_opcode_id(169);
}
impl script_opcode_id {
    pub const OPCODE_MESSAGE_SWITCH_MENU: script_opcode_id = script_opcode_id(170);
}
impl script_opcode_id {
    pub const OPCODE_MESSAGE_SWITCH_MENU2: script_opcode_id = script_opcode_id(171);
}
impl script_opcode_id {
    pub const OPCODE_MESSAGE_SWITCH_MONOLOGUE: script_opcode_id = script_opcode_id(172);
}
impl script_opcode_id {
    pub const OPCODE_MESSAGE_SWITCH_TALK: script_opcode_id = script_opcode_id(173);
}
impl script_opcode_id {
    pub const OPCODE_MESSAGE_TALK: script_opcode_id = script_opcode_id(174);
}
impl script_opcode_id {
    pub const OPCODE_MOVE2_POSITION: script_opcode_id = script_opcode_id(175);
}
impl script_opcode_id {
    pub const OPCODE_MOVE2_POSITION_LIVES: script_opcode_id = script_opcode_id(176);
}
impl script_opcode_id {
    pub const OPCODE_MOVE2_POSITION_MARK_VARIADIC: script_opcode_id = script_opcode_id(177);
}
impl script_opcode_id {
    pub const OPCODE_MOVE2_POSITION_MARK: script_opcode_id = script_opcode_id(178);
}
impl script_opcode_id {
    pub const OPCODE_MOVE2_POSITION_OFFSET_VARIADIC: script_opcode_id = script_opcode_id(179);
}
impl script_opcode_id {
    pub const OPCODE_MOVE2_POSITION_OFFSET: script_opcode_id = script_opcode_id(180);
}
impl script_opcode_id {
    pub const OPCODE_MOVE2_POSITION_OFFSET_RANDOM: script_opcode_id = script_opcode_id(181);
}
impl script_opcode_id {
    pub const OPCODE_MOVE3_POSITION: script_opcode_id = script_opcode_id(182);
}
impl script_opcode_id {
    pub const OPCODE_MOVE3_POSITION_LIVES: script_opcode_id = script_opcode_id(183);
}
impl script_opcode_id {
    pub const OPCODE_MOVE3_POSITION_MARK_VARIADIC: script_opcode_id = script_opcode_id(184);
}
impl script_opcode_id {
    pub const OPCODE_MOVE3_POSITION_MARK: script_opcode_id = script_opcode_id(185);
}
impl script_opcode_id {
    pub const OPCODE_MOVE3_POSITION_OFFSET_VARIADIC: script_opcode_id = script_opcode_id(186);
}
impl script_opcode_id {
    pub const OPCODE_MOVE3_POSITION_OFFSET: script_opcode_id = script_opcode_id(187);
}
impl script_opcode_id {
    pub const OPCODE_MOVE3_POSITION_OFFSET_RANDOM: script_opcode_id = script_opcode_id(188);
}
impl script_opcode_id {
    pub const OPCODE_MOVE_DIRECTION: script_opcode_id = script_opcode_id(189);
}
impl script_opcode_id {
    pub const OPCODE_MOVE_HEIGHT: script_opcode_id = script_opcode_id(190);
}
impl script_opcode_id {
    pub const OPCODE_MOVE_POSITION: script_opcode_id = script_opcode_id(191);
}
impl script_opcode_id {
    pub const OPCODE_MOVE_POSITION_LIVES: script_opcode_id = script_opcode_id(192);
}
impl script_opcode_id {
    pub const OPCODE_MOVE_POSITION_LIVES_TIME: script_opcode_id = script_opcode_id(193);
}
impl script_opcode_id {
    pub const OPCODE_MOVE_POSITION_MARK_VARIADIC: script_opcode_id = script_opcode_id(194);
}
impl script_opcode_id {
    pub const OPCODE_MOVE_POSITION_MARK: script_opcode_id = script_opcode_id(195);
}
impl script_opcode_id {
    pub const OPCODE_MOVE_POSITION_MARK_TIME: script_opcode_id = script_opcode_id(196);
}
impl script_opcode_id {
    pub const OPCODE_MOVE_POSITION_OFFSET_VARIADIC: script_opcode_id = script_opcode_id(197);
}
impl script_opcode_id {
    pub const OPCODE_MOVE_POSITION_OFFSET: script_opcode_id = script_opcode_id(198);
}
impl script_opcode_id {
    pub const OPCODE_MOVE_SPECIAL: script_opcode_id = script_opcode_id(199);
}
impl script_opcode_id {
    pub const OPCODE_MOVE_TURN: script_opcode_id = script_opcode_id(200);
}
impl script_opcode_id {
    pub const OPCODE_OBJECT: script_opcode_id = script_opcode_id(201);
}
impl script_opcode_id {
    pub const OPCODE_PAUSE_EFFECT: script_opcode_id = script_opcode_id(202);
}
impl script_opcode_id {
    pub const OPCODE_PERFORMER: script_opcode_id = script_opcode_id(203);
}
impl script_opcode_id {
    pub const OPCODE_PROCESS_SPECIAL: script_opcode_id = script_opcode_id(204);
}
impl script_opcode_id {
    pub const OPCODE_PURSUE_TURN_LIVES: script_opcode_id = script_opcode_id(205);
}
impl script_opcode_id {
    pub const OPCODE_PURSUE_TURN_LIVES2: script_opcode_id = script_opcode_id(206);
}
impl script_opcode_id {
    pub const OPCODE_RESET_ATTRIBUTE: script_opcode_id = script_opcode_id(207);
}
impl script_opcode_id {
    pub const OPCODE_RESET_FUNCTION_ATTRIBUTE: script_opcode_id = script_opcode_id(208);
}
impl script_opcode_id {
    pub const OPCODE_RESET_HIT_ATTRIBUTE: script_opcode_id = script_opcode_id(209);
}
impl script_opcode_id {
    pub const OPCODE_RESET_OUTPUT_ATTRIBUTE: script_opcode_id = script_opcode_id(210);
}
impl script_opcode_id {
    pub const OPCODE_RESET_REPLY_ATTRIBUTE: script_opcode_id = script_opcode_id(211);
}
impl script_opcode_id {
    pub const OPCODE_RESUME_EFFECT: script_opcode_id = script_opcode_id(212);
}
impl script_opcode_id {
    pub const OPCODE_RETURN: script_opcode_id = script_opcode_id(213);
}
impl script_opcode_id {
    pub const OPCODE_SAVE_POSITION: script_opcode_id = script_opcode_id(214);
}
impl script_opcode_id {
    pub const OPCODE_SCREEN_FADE_CHANGE: script_opcode_id = script_opcode_id(215);
}
impl script_opcode_id {
    pub const OPCODE_SCREEN_FADE_CHANGE_ALL: script_opcode_id = script_opcode_id(216);
}
impl script_opcode_id {
    pub const OPCODE_SCREEN_FADE_IN: script_opcode_id = script_opcode_id(217);
}
impl script_opcode_id {
    pub const OPCODE_SCREEN_FADE_IN_ALL: script_opcode_id = script_opcode_id(218);
}
impl script_opcode_id {
    pub const OPCODE_SCREEN_FADE_OUT: script_opcode_id = script_opcode_id(219);
}
impl script_opcode_id {
    pub const OPCODE_SCREEN_FADE_OUT_ALL: script_opcode_id = script_opcode_id(220);
}
impl script_opcode_id {
    pub const OPCODE_SCREEN_FLUSH_CHANGE: script_opcode_id = script_opcode_id(221);
}
impl script_opcode_id {
    pub const OPCODE_SCREEN_FLUSH_IN: script_opcode_id = script_opcode_id(222);
}
impl script_opcode_id {
    pub const OPCODE_SCREEN_FLUSH_OUT: script_opcode_id = script_opcode_id(223);
}
impl script_opcode_id {
    pub const OPCODE_SCREEN_WHITE_CHANGE: script_opcode_id = script_opcode_id(224);
}
impl script_opcode_id {
    pub const OPCODE_SCREEN_WHITE_CHANGE_ALL: script_opcode_id = script_opcode_id(225);
}
impl script_opcode_id {
    pub const OPCODE_SCREEN_WHITE_IN: script_opcode_id = script_opcode_id(226);
}
impl script_opcode_id {
    pub const OPCODE_SCREEN_WHITE_IN_ALL: script_opcode_id = script_opcode_id(227);
}
impl script_opcode_id {
    pub const OPCODE_SCREEN_WHITE_OUT: script_opcode_id = script_opcode_id(228);
}
impl script_opcode_id {
    pub const OPCODE_SCREEN_WHITE_OUT_ALL: script_opcode_id = script_opcode_id(229);
}
impl script_opcode_id {
    pub const OPCODE_SCREEN2_FADE_CHANGE: script_opcode_id = script_opcode_id(230);
}
impl script_opcode_id {
    pub const OPCODE_SCREEN2_FADE_CHANGE_ALL: script_opcode_id = script_opcode_id(231);
}
impl script_opcode_id {
    pub const OPCODE_SCREEN2_FADE_IN: script_opcode_id = script_opcode_id(232);
}
impl script_opcode_id {
    pub const OPCODE_SCREEN2_FADE_IN_ALL: script_opcode_id = script_opcode_id(233);
}
impl script_opcode_id {
    pub const OPCODE_SCREEN2_FADE_OUT: script_opcode_id = script_opcode_id(234);
}
impl script_opcode_id {
    pub const OPCODE_SCREEN2_FADE_OUT_ALL: script_opcode_id = script_opcode_id(235);
}
impl script_opcode_id {
    pub const OPCODE_SCREEN2_FLUSH_CHANGE: script_opcode_id = script_opcode_id(236);
}
impl script_opcode_id {
    pub const OPCODE_SCREEN2_FLUSH_IN: script_opcode_id = script_opcode_id(237);
}
impl script_opcode_id {
    pub const OPCODE_SCREEN2_FLUSH_OUT: script_opcode_id = script_opcode_id(238);
}
impl script_opcode_id {
    pub const OPCODE_SCREEN2_WHITE_CHANGE: script_opcode_id = script_opcode_id(239);
}
impl script_opcode_id {
    pub const OPCODE_SCREEN2_WHITE_CHANGE_ALL: script_opcode_id = script_opcode_id(240);
}
impl script_opcode_id {
    pub const OPCODE_SCREEN2_WHITE_IN: script_opcode_id = script_opcode_id(241);
}
impl script_opcode_id {
    pub const OPCODE_SCREEN2_WHITE_IN_ALL: script_opcode_id = script_opcode_id(242);
}
impl script_opcode_id {
    pub const OPCODE_SCREEN2_WHITE_OUT: script_opcode_id = script_opcode_id(243);
}
impl script_opcode_id {
    pub const OPCODE_SCREEN2_WHITE_OUT_ALL: script_opcode_id = script_opcode_id(244);
}
impl script_opcode_id {
    pub const OPCODE_SE_CHANGE_PAN: script_opcode_id = script_opcode_id(245);
}
impl script_opcode_id {
    pub const OPCODE_SE_CHANGE_VOLUME: script_opcode_id = script_opcode_id(246);
}
impl script_opcode_id {
    pub const OPCODE_SE_FADE_OUT: script_opcode_id = script_opcode_id(247);
}
impl script_opcode_id {
    pub const OPCODE_SE_PLAY: script_opcode_id = script_opcode_id(248);
}
impl script_opcode_id {
    pub const OPCODE_SE_PLAY_FULL: script_opcode_id = script_opcode_id(249);
}
impl script_opcode_id {
    pub const OPCODE_SE_PLAY_PAN: script_opcode_id = script_opcode_id(250);
}
impl script_opcode_id {
    pub const OPCODE_SE_PLAY_VOLUME: script_opcode_id = script_opcode_id(251);
}
impl script_opcode_id {
    pub const OPCODE_SE_STOP: script_opcode_id = script_opcode_id(252);
}
impl script_opcode_id {
    pub const OPCODE_SET_ANIMATION: script_opcode_id = script_opcode_id(253);
}
impl script_opcode_id {
    pub const OPCODE_SET_ATTRIBUTE: script_opcode_id = script_opcode_id(254);
}
impl script_opcode_id {
    pub const OPCODE_SET_BLINK: script_opcode_id = script_opcode_id(255);
}
impl script_opcode_id {
    pub const OPCODE_SET_DIRECTION: script_opcode_id = script_opcode_id(256);
}
impl script_opcode_id {
    pub const OPCODE_SET_DIRECTION_LIVES: script_opcode_id = script_opcode_id(257);
}
impl script_opcode_id {
    pub const OPCODE_SET_EFFECT: script_opcode_id = script_opcode_id(258);
}
impl script_opcode_id {
    pub const OPCODE_SET_FUNCTION_ATTRIBUTE: script_opcode_id = script_opcode_id(259);
}
impl script_opcode_id {
    pub const OPCODE_SET_HEIGHT: script_opcode_id = script_opcode_id(260);
}
impl script_opcode_id {
    pub const OPCODE_SET_HIT_ATTRIBUTE: script_opcode_id = script_opcode_id(261);
}
impl script_opcode_id {
    pub const OPCODE_SET_MOVE_RANGE: script_opcode_id = script_opcode_id(262);
}
impl script_opcode_id {
    pub const OPCODE_SET_OUTPUT_ATTRIBUTE: script_opcode_id = script_opcode_id(263);
}
impl script_opcode_id {
    pub const OPCODE_SET_POSITION: script_opcode_id = script_opcode_id(264);
}
impl script_opcode_id {
    pub const OPCODE_SET_POSITION_INITIAL: script_opcode_id = script_opcode_id(265);
}
impl script_opcode_id {
    pub const OPCODE_SET_POSITION_LIVES: script_opcode_id = script_opcode_id(266);
}
impl script_opcode_id {
    pub const OPCODE_SET_POSITION_MARK: script_opcode_id = script_opcode_id(267);
}
impl script_opcode_id {
    pub const OPCODE_SET_POSITION_OFFSET: script_opcode_id = script_opcode_id(268);
}
impl script_opcode_id {
    pub const OPCODE_SET_POSITION_OFFSET_RANDOM: script_opcode_id = script_opcode_id(269);
}
impl script_opcode_id {
    pub const OPCODE_SET_REPLY_ATTRIBUTE: script_opcode_id = script_opcode_id(270);
}
impl script_opcode_id {
    pub const OPCODE_SETUP_OUTPUT_ATTRIBUTE_AND_ANIMATION: script_opcode_id = script_opcode_id(271);
}
impl script_opcode_id {
    pub const OPCODE_SLIDE2_POSITION: script_opcode_id = script_opcode_id(272);
}
impl script_opcode_id {
    pub const OPCODE_SLIDE2_POSITION_LIVES: script_opcode_id = script_opcode_id(273);
}
impl script_opcode_id {
    pub const OPCODE_SLIDE2_POSITION_MARK_VARIADIC: script_opcode_id = script_opcode_id(274);
}
impl script_opcode_id {
    pub const OPCODE_SLIDE2_POSITION_MARK: script_opcode_id = script_opcode_id(275);
}
impl script_opcode_id {
    pub const OPCODE_SLIDE2_POSITION_OFFSET_VARIADIC: script_opcode_id = script_opcode_id(276);
}
impl script_opcode_id {
    pub const OPCODE_SLIDE2_POSITION_OFFSET: script_opcode_id = script_opcode_id(277);
}
impl script_opcode_id {
    pub const OPCODE_SLIDE2_POSITION_OFFSET_RANDOM: script_opcode_id = script_opcode_id(278);
}
impl script_opcode_id {
    pub const OPCODE_SLIDE3_POSITION: script_opcode_id = script_opcode_id(279);
}
impl script_opcode_id {
    pub const OPCODE_SLIDE3_POSITION_LIVES: script_opcode_id = script_opcode_id(280);
}
impl script_opcode_id {
    pub const OPCODE_SLIDE3_POSITION_MARK_VARIADIC: script_opcode_id = script_opcode_id(281);
}
impl script_opcode_id {
    pub const OPCODE_SLIDE3_POSITION_MARK: script_opcode_id = script_opcode_id(282);
}
impl script_opcode_id {
    pub const OPCODE_SLIDE3_POSITION_OFFSET_VARIADIC: script_opcode_id = script_opcode_id(283);
}
impl script_opcode_id {
    pub const OPCODE_SLIDE3_POSITION_OFFSET: script_opcode_id = script_opcode_id(284);
}
impl script_opcode_id {
    pub const OPCODE_SLIDE3_POSITION_OFFSET_RANDOM: script_opcode_id = script_opcode_id(285);
}
impl script_opcode_id {
    pub const OPCODE_SLIDE_HEIGHT: script_opcode_id = script_opcode_id(286);
}
impl script_opcode_id {
    pub const OPCODE_SLIDE_POSITION: script_opcode_id = script_opcode_id(287);
}
impl script_opcode_id {
    pub const OPCODE_SLIDE_POSITION_LIVES: script_opcode_id = script_opcode_id(288);
}
impl script_opcode_id {
    pub const OPCODE_SLIDE_POSITION_LIVES_TIME: script_opcode_id = script_opcode_id(289);
}
impl script_opcode_id {
    pub const OPCODE_SLIDE_POSITION_MARK_VARIADIC: script_opcode_id = script_opcode_id(290);
}
impl script_opcode_id {
    pub const OPCODE_SLIDE_POSITION_MARK: script_opcode_id = script_opcode_id(291);
}
impl script_opcode_id {
    pub const OPCODE_SLIDE_POSITION_MARK_TIME: script_opcode_id = script_opcode_id(292);
}
impl script_opcode_id {
    pub const OPCODE_SLIDE_POSITION_OFFSET_VARIADIC: script_opcode_id = script_opcode_id(293);
}
impl script_opcode_id {
    pub const OPCODE_SLIDE_POSITION_OFFSET: script_opcode_id = script_opcode_id(294);
}
impl script_opcode_id {
    pub const OPCODE_SOUND_FADE_OUT: script_opcode_id = script_opcode_id(295);
}
impl script_opcode_id {
    pub const OPCODE_SOUND_STOP: script_opcode_id = script_opcode_id(296);
}
impl script_opcode_id {
    pub const OPCODE_STOP_ANIMATION: script_opcode_id = script_opcode_id(297);
}
impl script_opcode_id {
    pub const OPCODE_SUPERVISION_ACTING: script_opcode_id = script_opcode_id(298);
}
impl script_opcode_id {
    pub const OPCODE_SUPERVISION_ACTING_INVISIBLE: script_opcode_id = script_opcode_id(299);
}
impl script_opcode_id {
    pub const OPCODE_SUPERVISION_EXECUTE_ACTING: script_opcode_id = script_opcode_id(300);
}
impl script_opcode_id {
    pub const OPCODE_SUPERVISION_EXECUTE_ACTING_SUB: script_opcode_id = script_opcode_id(301);
}
impl script_opcode_id {
    pub const OPCODE_SUPERVISION_EXECUTE_COMMON: script_opcode_id = script_opcode_id(302);
}
impl script_opcode_id {
    pub const OPCODE_SUPERVISION_EXECUTE_ENTER: script_opcode_id = script_opcode_id(303);
}
impl script_opcode_id {
    pub const OPCODE_SUPERVISION_EXECUTE_STATION: script_opcode_id = script_opcode_id(304);
}
impl script_opcode_id {
    pub const OPCODE_SUPERVISION_EXECUTE_STATION_COMMON: script_opcode_id = script_opcode_id(305);
}
impl script_opcode_id {
    pub const OPCODE_SUPERVISION_EXECUTE_STATION_COMMON_SUB: script_opcode_id =
        script_opcode_id(306);
}
impl script_opcode_id {
    pub const OPCODE_SUPERVISION_EXECUTE_STATION_SUB: script_opcode_id = script_opcode_id(307);
}
impl script_opcode_id {
    pub const OPCODE_SUPERVISION_EXECUTE_EXPORT: script_opcode_id = script_opcode_id(308);
}
impl script_opcode_id {
    pub const OPCODE_SUPERVISION_EXECUTE_EXPORT_SUB: script_opcode_id = script_opcode_id(309);
}
impl script_opcode_id {
    pub const OPCODE_SUPERVISION_LOAD_STATION: script_opcode_id = script_opcode_id(310);
}
impl script_opcode_id {
    pub const OPCODE_SUPERVISION_REMOVE: script_opcode_id = script_opcode_id(311);
}
impl script_opcode_id {
    pub const OPCODE_SUPERVISION_REMOVE_ACTING: script_opcode_id = script_opcode_id(312);
}
impl script_opcode_id {
    pub const OPCODE_SUPERVISION_REMOVE_COMMON: script_opcode_id = script_opcode_id(313);
}
impl script_opcode_id {
    pub const OPCODE_SUPERVISION_SPECIAL_ACTING: script_opcode_id = script_opcode_id(314);
}
impl script_opcode_id {
    pub const OPCODE_SUPERVISION_STATION: script_opcode_id = script_opcode_id(315);
}
impl script_opcode_id {
    pub const OPCODE_SUPERVISION_STATION_COMMON: script_opcode_id = script_opcode_id(316);
}
impl script_opcode_id {
    pub const OPCODE_SUPERVISION_SUSPEND: script_opcode_id = script_opcode_id(317);
}
impl script_opcode_id {
    pub const OPCODE_SUPERVISION2_SPECIAL_ACTING: script_opcode_id = script_opcode_id(318);
}
impl script_opcode_id {
    pub const OPCODE_SWITCH: script_opcode_id = script_opcode_id(319);
}
impl script_opcode_id {
    pub const OPCODE_SWITCH_DIRECTION: script_opcode_id = script_opcode_id(320);
}
impl script_opcode_id {
    pub const OPCODE_SWITCH_DIRECTION_LIVES: script_opcode_id = script_opcode_id(321);
}
impl script_opcode_id {
    pub const OPCODE_SWITCH_DIRECTION_LIVES2: script_opcode_id = script_opcode_id(322);
}
impl script_opcode_id {
    pub const OPCODE_SWITCH_DIRECTION_MARK: script_opcode_id = script_opcode_id(323);
}
impl script_opcode_id {
    pub const OPCODE_SWITCH_DUNGEON_MODE: script_opcode_id = script_opcode_id(324);
}
impl script_opcode_id {
    pub const OPCODE_SWITCH_LIVES: script_opcode_id = script_opcode_id(325);
}
impl script_opcode_id {
    pub const OPCODE_SWITCH_RANDOM: script_opcode_id = script_opcode_id(326);
}
impl script_opcode_id {
    pub const OPCODE_SWITCH_SCENARIO: script_opcode_id = script_opcode_id(327);
}
impl script_opcode_id {
    pub const OPCODE_SWITCH_SCENARIO_LEVEL: script_opcode_id = script_opcode_id(328);
}
impl script_opcode_id {
    pub const OPCODE_SWITCH_SECTOR: script_opcode_id = script_opcode_id(329);
}
impl script_opcode_id {
    pub const OPCODE_SWITCH_VALUE: script_opcode_id = script_opcode_id(330);
}
impl script_opcode_id {
    pub const OPCODE_SWITCH_VARIABLE: script_opcode_id = script_opcode_id(331);
}
impl script_opcode_id {
    pub const OPCODE_TURN2_DIRECTION: script_opcode_id = script_opcode_id(332);
}
impl script_opcode_id {
    pub const OPCODE_TURN2_DIRECTION_LIVES: script_opcode_id = script_opcode_id(333);
}
impl script_opcode_id {
    pub const OPCODE_TURN2_DIRECTION_LIVES2: script_opcode_id = script_opcode_id(334);
}
impl script_opcode_id {
    pub const OPCODE_TURN2_DIRECTION_MARK: script_opcode_id = script_opcode_id(335);
}
impl script_opcode_id {
    pub const OPCODE_TURN2_DIRECTION_TURN: script_opcode_id = script_opcode_id(336);
}
impl script_opcode_id {
    pub const OPCODE_TURN3: script_opcode_id = script_opcode_id(337);
}
impl script_opcode_id {
    pub const OPCODE_TURN_DIRECTION: script_opcode_id = script_opcode_id(338);
}
impl script_opcode_id {
    pub const OPCODE_TURN_DIRECTION_LIVES: script_opcode_id = script_opcode_id(339);
}
impl script_opcode_id {
    pub const OPCODE_TURN_DIRECTION_LIVES2: script_opcode_id = script_opcode_id(340);
}
impl script_opcode_id {
    pub const OPCODE_TURN_DIRECTION_MARK: script_opcode_id = script_opcode_id(341);
}
impl script_opcode_id {
    pub const OPCODE_UNLOCK: script_opcode_id = script_opcode_id(342);
}
impl script_opcode_id {
    pub const OPCODE_WAIT: script_opcode_id = script_opcode_id(343);
}
impl script_opcode_id {
    pub const OPCODE_WAIT_ANIMATION: script_opcode_id = script_opcode_id(344);
}
impl script_opcode_id {
    pub const OPCODE_WAIT_BACK_EFFECT: script_opcode_id = script_opcode_id(345);
}
impl script_opcode_id {
    pub const OPCODE_WAIT_BACK2_EFFECT: script_opcode_id = script_opcode_id(346);
}
impl script_opcode_id {
    pub const OPCODE_WAIT_BGM: script_opcode_id = script_opcode_id(347);
}
impl script_opcode_id {
    pub const OPCODE_WAIT_BGM2: script_opcode_id = script_opcode_id(348);
}
impl script_opcode_id {
    pub const OPCODE_WAIT_BGM_SIGNAL: script_opcode_id = script_opcode_id(349);
}
impl script_opcode_id {
    pub const OPCODE_WAIT_EFFECT: script_opcode_id = script_opcode_id(350);
}
impl script_opcode_id {
    pub const OPCODE_WAIT_END_ANIMATION: script_opcode_id = script_opcode_id(351);
}
impl script_opcode_id {
    pub const OPCODE_WAIT_EXECUTE_LIVES: script_opcode_id = script_opcode_id(352);
}
impl script_opcode_id {
    pub const OPCODE_WAIT_EXECUTE_OBJECT: script_opcode_id = script_opcode_id(353);
}
impl script_opcode_id {
    pub const OPCODE_WAIT_EXECUTE_PERFORMER: script_opcode_id = script_opcode_id(354);
}
impl script_opcode_id {
    pub const OPCODE_WAIT_FADE_IN: script_opcode_id = script_opcode_id(355);
}
impl script_opcode_id {
    pub const OPCODE_WAIT_LOCK_LIVES: script_opcode_id = script_opcode_id(356);
}
impl script_opcode_id {
    pub const OPCODE_WAIT_LOCK_OBJECT: script_opcode_id = script_opcode_id(357);
}
impl script_opcode_id {
    pub const OPCODE_WAIT_LOCK_PERFORMER: script_opcode_id = script_opcode_id(358);
}
impl script_opcode_id {
    pub const OPCODE_WAIT_LOCK_SUPERVISION: script_opcode_id = script_opcode_id(359);
}
impl script_opcode_id {
    pub const OPCODE_WAIT_ME: script_opcode_id = script_opcode_id(360);
}
impl script_opcode_id {
    pub const OPCODE_WAIT_MOVE_CAMERA: script_opcode_id = script_opcode_id(361);
}
impl script_opcode_id {
    pub const OPCODE_WAIT_MOVE_CAMERA2: script_opcode_id = script_opcode_id(362);
}
impl script_opcode_id {
    pub const OPCODE_WAIT_RANDOM: script_opcode_id = script_opcode_id(363);
}
impl script_opcode_id {
    pub const OPCODE_WAIT_SCREEN_FADE: script_opcode_id = script_opcode_id(364);
}
impl script_opcode_id {
    pub const OPCODE_WAIT_SCREEN_FADE_ALL: script_opcode_id = script_opcode_id(365);
}
impl script_opcode_id {
    pub const OPCODE_WAIT_SCREEN2_FADE: script_opcode_id = script_opcode_id(366);
}
impl script_opcode_id {
    pub const OPCODE_WAIT_SE: script_opcode_id = script_opcode_id(367);
}
impl script_opcode_id {
    pub const OPCODE_WAIT_SPECIAL_ACTING: script_opcode_id = script_opcode_id(368);
}
impl script_opcode_id {
    pub const OPCODE_WAIT_SUB_SCREEN: script_opcode_id = script_opcode_id(369);
}
impl script_opcode_id {
    pub const OPCODE_WAIT_SUB_SPECIAL_ACTING: script_opcode_id = script_opcode_id(370);
}
impl script_opcode_id {
    pub const OPCODE_WORLDMAP_BLINK_MARK: script_opcode_id = script_opcode_id(371);
}
impl script_opcode_id {
    pub const OPCODE_WORLDMAP_CHANGE_LEVEL: script_opcode_id = script_opcode_id(372);
}
impl script_opcode_id {
    pub const OPCODE_WORLDMAP_DELETE_ARROW: script_opcode_id = script_opcode_id(373);
}
impl script_opcode_id {
    pub const OPCODE_WORLDMAP_MOVE_CAMERA: script_opcode_id = script_opcode_id(374);
}
impl script_opcode_id {
    pub const OPCODE_WORLDMAP_OFF_MESSAGE: script_opcode_id = script_opcode_id(375);
}
impl script_opcode_id {
    pub const OPCODE_WORLDMAP_SET_ARROW: script_opcode_id = script_opcode_id(376);
}
impl script_opcode_id {
    pub const OPCODE_WORLDMAP_SET_CAMERA: script_opcode_id = script_opcode_id(377);
}
impl script_opcode_id {
    pub const OPCODE_WORLDMAP_SET_LEVEL: script_opcode_id = script_opcode_id(378);
}
impl script_opcode_id {
    pub const OPCODE_WORLDMAP_SET_MARK: script_opcode_id = script_opcode_id(379);
}
impl script_opcode_id {
    pub const OPCODE_WORLDMAP_SET_MESSAGE: script_opcode_id = script_opcode_id(380);
}
impl script_opcode_id {
    pub const OPCODE_WORLDMAP_SET_MESSAGE_PLACE: script_opcode_id = script_opcode_id(381);
}
impl script_opcode_id {
    pub const OPCODE_WORLDMAP_SET_MODE: script_opcode_id = script_opcode_id(382);
}
#[repr(transparent)]
#[derive(Clone, Hash, PartialEq, Eq)]
pub struct script_opcode_id(pub(crate) crate::ctypes::c_uint);
impl special_process_id {
    pub const SPECIAL_PROC_NONE: special_process_id = special_process_id(0);
}
impl special_process_id {
    pub const SPECIAL_PROC_RETURN_DUNGEON: special_process_id = special_process_id(1);
}
impl special_process_id {
    pub const SPECIAL_PROC_INIT_MAIN_TEAM_AFTER_QUIZ: special_process_id = special_process_id(2);
}
impl special_process_id {
    pub const SPECIAL_PROC_0x3: special_process_id = special_process_id(3);
}
impl special_process_id {
    pub const SPECIAL_PROC_0x4: special_process_id = special_process_id(4);
}
impl special_process_id {
    pub const SPECIAL_PROC_NEXT_DAY: special_process_id = special_process_id(5);
}
impl special_process_id {
    pub const SPECIAL_PROC_0x6: special_process_id = special_process_id(6);
}
impl special_process_id {
    pub const SPECIAL_PROC_DUNGEON_HAD_REQUEST_DONE: special_process_id = special_process_id(7);
}
impl special_process_id {
    pub const SPECIAL_PROC_0x8: special_process_id = special_process_id(8);
}
impl special_process_id {
    pub const SPECIAL_PROC_0x9: special_process_id = special_process_id(9);
}
impl special_process_id {
    pub const SPECIAL_PROC_GET_SOS_MAIL_COUNT: special_process_id = special_process_id(10);
}
impl special_process_id {
    pub const SPECIAL_PROC_GET_SOS_MISSION_RETRIES_LEFT: special_process_id =
        special_process_id(11);
}
impl special_process_id {
    pub const SPECIAL_PROC_INIT_RANDOM_NPC_JOBS: special_process_id = special_process_id(12);
}
impl special_process_id {
    pub const SPECIAL_PROC_GET_RANDOM_NPC_JOB_TYPE: special_process_id = special_process_id(13);
}
impl special_process_id {
    pub const SPECIAL_PROC_GET_RANDOM_NPC_JOB_SUBTYPE: special_process_id = special_process_id(14);
}
impl special_process_id {
    pub const SPECIAL_PROC_GET_RANDOM_NPC_JOB_STILL_AVAILABLE: special_process_id =
        special_process_id(15);
}
impl special_process_id {
    pub const SPECIAL_PROC_ACCEPT_RANDOM_NPC_JOB: special_process_id = special_process_id(16);
}
impl special_process_id {
    pub const SPECIAL_PROC_0x11: special_process_id = special_process_id(17);
}
impl special_process_id {
    pub const SPECIAL_PROC_0x12: special_process_id = special_process_id(18);
}
impl special_process_id {
    pub const SPECIAL_PROC_KEY_WAIT_PRESS: special_process_id = special_process_id(19);
}
impl special_process_id {
    pub const SPECIAL_PROC_KEY_WAIT_INIT: special_process_id = special_process_id(20);
}
impl special_process_id {
    pub const SPECIAL_PROC_KEY_WAIT_CHECK: special_process_id = special_process_id(21);
}
impl special_process_id {
    pub const SPECIAL_PROC_0x16: special_process_id = special_process_id(22);
}
impl special_process_id {
    pub const SPECIAL_PROC_0x17: special_process_id = special_process_id(23);
}
impl special_process_id {
    pub const SPECIAL_PROC_0x18: special_process_id = special_process_id(24);
}
impl special_process_id {
    pub const SPECIAL_PROC_JUMP_TO_TITLE_SCREEN: special_process_id = special_process_id(25);
}
impl special_process_id {
    pub const SPECIAL_PROC_0x1A: special_process_id = special_process_id(26);
}
impl special_process_id {
    pub const SPECIAL_PROC_RETURN_TO_TITLE_SCREEN: special_process_id = special_process_id(27);
}
impl special_process_id {
    pub const SPECIAL_PROC_IS_RECRUITABLE_IN_TEAM: special_process_id = special_process_id(28);
}
impl special_process_id {
    pub const SPECIAL_PROC_GET_RECRUITABLE_CURRENT_LEVEL: special_process_id =
        special_process_id(29);
}
impl special_process_id {
    pub const SPECIAL_PROC_RECRUITABLE_CAN_ADD: special_process_id = special_process_id(30);
}
impl special_process_id {
    pub const SPECIAL_PROC_ADD_RECRUITABLE_TO_TEAM: special_process_id = special_process_id(31);
}
impl special_process_id {
    pub const SPECIAL_PROC_COUNT_ITEM_TYPE_IN_BAG: special_process_id = special_process_id(32);
}
impl special_process_id {
    pub const SPECIAL_PROC_COUNT_TABLE_ITEM_TYPE_IN_BAG: special_process_id =
        special_process_id(33);
}
impl special_process_id {
    pub const SPECIAL_PROC_COUNT_ITEM_TYPE_IN_STORAGE: special_process_id = special_process_id(34);
}
impl special_process_id {
    pub const SPECIAL_PROC_COUNT_TABLE_ITEM_TYPE_IN_STORAGE: special_process_id =
        special_process_id(35);
}
impl special_process_id {
    pub const SPECIAL_PROC_ADD_ITEM_TO_BAG: special_process_id = special_process_id(36);
}
impl special_process_id {
    pub const SPECIAL_PROC_ADD_TABLE_ITEM_TO_BAG: special_process_id = special_process_id(37);
}
impl special_process_id {
    pub const SPECIAL_PROC_ADD_ITEM_TO_STORAGE: special_process_id = special_process_id(38);
}
impl special_process_id {
    pub const SPECIAL_PROC_ADD_TABLE_ITEM_TO_STORAGE: special_process_id = special_process_id(39);
}
impl special_process_id {
    pub const SPECIAL_PROC_REMOVE_ITEMS_TYPE_IN_BAG: special_process_id = special_process_id(40);
}
impl special_process_id {
    pub const SPECIAL_PROC_REMOVE_TABLE_ITEMS_TYPE_IN_BAG: special_process_id =
        special_process_id(41);
}
impl special_process_id {
    pub const SPECIAL_PROC_0x2A: special_process_id = special_process_id(42);
}
impl special_process_id {
    pub const SPECIAL_PROC_0x2B: special_process_id = special_process_id(43);
}
impl special_process_id {
    pub const SPECIAL_PROC_PREPARE_MENU_ACCEPT_TEAM_MEMBER: special_process_id =
        special_process_id(44);
}
impl special_process_id {
    pub const SPECIAL_PROC_GET_HERO_KIND: special_process_id = special_process_id(45);
}
impl special_process_id {
    pub const SPECIAL_PROC_GET_PARTNER_KIND: special_process_id = special_process_id(46);
}
impl special_process_id {
    pub const SPECIAL_PROC_IS_TEAM_SETUP_HERO_AND_PARTNER_ONLY: special_process_id =
        special_process_id(47);
}
impl special_process_id {
    pub const SPECIAL_PROC_IS_TEAM_SETUP_PARTNER_AND_HERO_ONLY: special_process_id =
        special_process_id(48);
}
impl special_process_id {
    pub const SPECIAL_PROC_IS_TEAM_SETUP_CONTAINS_PARTNER_AND_HERO: special_process_id =
        special_process_id(49);
}
impl special_process_id {
    pub const SPECIAL_PROC_IS_TEAM_SETUP_SOLO: special_process_id = special_process_id(50);
}
impl special_process_id {
    pub const SPECIAL_PROC_SET_TEAM_SETUP_HERO_AND_PARTNER_ONLY: special_process_id =
        special_process_id(51);
}
impl special_process_id {
    pub const SPECIAL_PROC_SET_TEAM_SETUP_HERO_ONLY: special_process_id = special_process_id(52);
}
impl special_process_id {
    pub const SPECIAL_PROC_0x35: special_process_id = special_process_id(53);
}
impl special_process_id {
    pub const SPECIAL_PROC_STATUS_UPDATE: special_process_id = special_process_id(54);
}
impl special_process_id {
    pub const SPECIAL_PROC_0x37: special_process_id = special_process_id(55);
}
impl special_process_id {
    pub const SPECIAL_PROC_IS_BAG_FULL: special_process_id = special_process_id(56);
}
impl special_process_id {
    pub const SPECIAL_PROC_0x39: special_process_id = special_process_id(57);
}
impl special_process_id {
    pub const SPECIAL_PROC_0x3A: special_process_id = special_process_id(58);
}
impl special_process_id {
    pub const SPECIAL_PROC_0x3B: special_process_id = special_process_id(59);
}
impl special_process_id {
    pub const SPECIAL_PROC_SEND_SKY_GIFT_TO_GUILDMASTER: special_process_id =
        special_process_id(60);
}
impl special_process_id {
    pub const SPECIAL_PROC_0x3D: special_process_id = special_process_id(61);
}
impl special_process_id {
    pub const SPECIAL_PROC_0x3E: special_process_id = special_process_id(62);
}
#[repr(transparent)]
#[derive(Clone, Hash, PartialEq, Eq)]
pub struct special_process_id(pub(crate) crate::ctypes::c_uint);
pub mod common_routine_id {
    pub type Type = crate::ctypes::c_uint;
    pub const ROUTINE_END_TALK: Type = 0;
    pub const ROUTINE_WAIT_START_FUNC: Type = 1;
    pub const ROUTINE_NORMAL_WAIT_END_TALK: Type = 2;
    pub const ROUTINE_LIVES_REPLY_NORMAL: Type = 3;
    pub const ROUTINE_LIVES_REPLY: Type = 4;
    pub const ROUTINE_OBJECT_REPLY_NORMAL: Type = 5;
    pub const ROUTINE_LIVES_ACTING_NORMAL: Type = 6;
    pub const ROUTINE_ENTER_WAIT_FUNC: Type = 7;
    pub const ROUTINE_TALK_UNIT: Type = 8;
    pub const ROUTINE_TALK_ADVENTURE: Type = 9;
    pub const ROUTINE_TALK_ATTENDANT: Type = 10;
    pub const ROUTINE_TALK_PARTNER_MESSAGE: Type = 11;
    pub const ROUTINE_LIVES_MOVE_NORMAL: Type = 12;
    pub const ROUTINE_LIVES_MOVE_CHANGE: Type = 13;
    pub const ROUTINE_LIVES_MOVE_PARTY: Type = 14;
    pub const ROUTINE_OBJECT_MOVE_NORMAL: Type = 15;
    pub const ROUTINE_OBJECT_MOVE_CHANGE: Type = 16;
    pub const ROUTINE_PERFORMER_MOVE_NORMAL: Type = 17;
    pub const ROUTINE_PERFORMER_MOVE_CHANGE: Type = 18;
    pub const ROUTINE_MOVE_INIT: Type = 19;
    pub const ROUTINE_MOVE_PAUSE: Type = 20;
    pub const ROUTINE_MOVE_STAY: Type = 21;
    pub const ROUTINE_MOVE_SLEEP: Type = 22;
    pub const ROUTINE_MOVE_RANDOM: Type = 23;
    pub const ROUTINE_MOVE_TYPE1: Type = 24;
    pub const ROUTINE_MOVE_TYPE2: Type = 25;
    pub const ROUTINE_WAKEUP_FUNC: Type = 26;
    pub const ROUTINE_WAKEUP_FUNC_SERIES: Type = 27;
    pub const ROUTINE_LOOK_AROUND_FUNC: Type = 28;
    pub const ROUTINE_LOOK_AROUND_FUNC_SERIES: Type = 29;
    pub const ROUTINE_LOOK_AROUND_DOWN_FUNC: Type = 30;
    pub const ROUTINE_LOOK_AROUND_DOWN_FUNC_SERIES: Type = 31;
    pub const ROUTINE_LOOK_AROUND_RIGHT_FUNC: Type = 32;
    pub const ROUTINE_LOOK_AROUND_RIGHT_FUNC_SERIES: Type = 33;
    pub const ROUTINE_LOOK_AROUND_LEFT_FUNC: Type = 34;
    pub const ROUTINE_LOOK_AROUND_LEFT_FUNC_SERIES: Type = 35;
    pub const ROUTINE_JUMP_HAPPY_FUNC: Type = 36;
    pub const ROUTINE_JUMP_HAPPY_FUNC_SERIES: Type = 37;
    pub const ROUTINE_JUMP_SURPRISE_FUNC: Type = 38;
    pub const ROUTINE_JUMP_SURPRISE_FUNC_SERIES: Type = 39;
    pub const ROUTINE_JUMP_ANGRY_FUNC: Type = 40;
    pub const ROUTINE_JUMP_ANGRY_FUNC_SERIES: Type = 41;
    pub const ROUTINE_LOOK_AROUND_FAST_FUNC: Type = 42;
    pub const ROUTINE_LOOK_AROUND_FAST_FUNC_SERIES: Type = 43;
    pub const ROUTINE_HEAD_SHAKE_FUNC: Type = 44;
    pub const ROUTINE_HEAD_SHAKE_FUNC_SERIES: Type = 45;
    pub const ROUTINE_EXPLANATION_FUNC: Type = 46;
    pub const ROUTINE_EXPLANATION_FUNC_SERIES: Type = 47;
    pub const ROUTINE_INIT_SLEEP_FUNC: Type = 48;
    pub const ROUTINE_INIT_SLEEP_FUNC_SERIES: Type = 49;
    pub const ROUTINE_INIT_BASE_FUNC: Type = 50;
    pub const ROUTINE_INIT_BASE_FUNC_SERIES: Type = 51;
    pub const ROUTINE_HANYOU_SAVE_FUNC: Type = 52;
    pub const ROUTINE_NORMAL_MESSAGE: Type = 53;
    pub const ROUTINE_NORMAL_EVENT: Type = 54;
    pub const ROUTINE_NORMAL_CAMERA: Type = 55;
    pub const ROUTINE_EVENT_FORMATION: Type = 56;
    pub const ROUTINE_EVENT_EVOLUTION: Type = 57;
    pub const ROUTINE_EFFECT_MOVE_DIVE: Type = 58;
    pub const ROUTINE_EFFECT_MOVE_WAVE: Type = 59;
    pub const ROUTINE_EVENT_DIVIDE: Type = 60;
    pub const ROUTINE_EVENT_DIVIDE_NEXT: Type = 61;
    pub const ROUTINE_EVENT_DIVIDE_INIT_FUNC: Type = 62;
    pub const ROUTINE_EVENT_DIVIDE_NEXT_DAY_FUNC: Type = 63;
    pub const ROUTINE_EVENT_DIVIDE_NEXT_DAY2_FUNC: Type = 64;
    pub const ROUTINE_EVENT_DIVIDE_FIRST: Type = 65;
    pub const ROUTINE_EVENT_DIVIDE_SECOND: Type = 66;
    pub const ROUTINE_EVENT_DIVIDE_AFTER: Type = 67;
    pub const ROUTINE_EVENT_DIVIDE_RESUME: Type = 68;
    pub const ROUTINE_EVENT_DIVIDE_SPECIAL_EPISODE: Type = 69;
    pub const ROUTINE_DEBUG_SCRIPT: Type = 70;
    pub const ROUTINE_DEBUG_SCENE: Type = 71;
    pub const ROUTINE_DEMO_CANCEL: Type = 72;
    pub const ROUTINE_DEBUG_FLAG_SETTING_BIPPA: Type = 73;
    pub const ROUTINE_DEBUG_FLAG_SETTING_PUPURIN: Type = 74;
    pub const ROUTINE_DEBUG_FLAG_SETTING_FUTURE: Type = 75;
    pub const ROUTINE_DEBUG_FLAG_SETTING_CHARMS: Type = 76;
    pub const ROUTINE_DEBUG_FLAG_SETTING_KIMAWARI: Type = 77;
    pub const ROUTINE_DEMO_01: Type = 78;
    pub const ROUTINE_DEMO_02: Type = 79;
    pub const ROUTINE_DEMO_03: Type = 80;
    pub const ROUTINE_DEMO_04: Type = 81;
    pub const ROUTINE_DEMO_05: Type = 82;
    pub const ROUTINE_DEMO_06: Type = 83;
    pub const ROUTINE_EVENT_M00A_01: Type = 84;
    pub const ROUTINE_EVENT_HA_YU_KI: Type = 85;
    pub const ROUTINE_EVENT_HA_YU_KI_DO: Type = 86;
    pub const ROUTINE_EVENT_HA_YU_SHU: Type = 87;
    pub const ROUTINE_EVENT_HA_YU_SHU_DO: Type = 88;
    pub const ROUTINE_EVENT_HA_CHO: Type = 89;
    pub const ROUTINE_EVENT_HA_CHO_DO: Type = 90;
    pub const ROUTINE_EVENT_HA_KI: Type = 91;
    pub const ROUTINE_EVENT_HA_YU_KIX: Type = 92;
    pub const ROUTINE_EVENT_HA_YU_KI_DOX: Type = 93;
    pub const ROUTINE_EVENT_HA_YU_SHUX: Type = 94;
    pub const ROUTINE_EVENT_HA_YU_SHU_DOX: Type = 95;
    pub const ROUTINE_EVENT_HA_SAME: Type = 96;
    pub const ROUTINE_HA_MIHARIBAN: Type = 97;
    pub const ROUTINE_EVENT_HA_SAMEX: Type = 98;
    pub const ROUTINE_EVENT_M00_01: Type = 99;
    pub const ROUTINE_EVENT_M00_02: Type = 100;
    pub const ROUTINE_EVENT_M00_03: Type = 101;
    pub const ROUTINE_EVENT_M00_04: Type = 102;
    pub const ROUTINE_EVENT_M00_05: Type = 103;
    pub const ROUTINE_EVENT_M00_06: Type = 104;
    pub const ROUTINE_EVENT_M00_07: Type = 105;
    pub const ROUTINE_EVENT_M00_08: Type = 106;
    pub const ROUTINE_EVENT_M00_09: Type = 107;
    pub const ROUTINE_EVENT_M00_12: Type = 108;
    pub const ROUTINE_EVENT_M00_13: Type = 109;
    pub const ROUTINE_EVENT_M00_14: Type = 110;
    pub const ROUTINE_EVENT_M01_01_02: Type = 111;
    pub const ROUTINE_EVENT_M01_03: Type = 112;
    pub const ROUTINE_EVENT_M01_04: Type = 113;
    pub const ROUTINE_EVENT_M01_05: Type = 114;
    pub const ROUTINE_EVENT_M01_06: Type = 115;
    pub const ROUTINE_EVENT_M01_07_08: Type = 116;
    pub const ROUTINE_EVENT_M02_01_02: Type = 117;
    pub const ROUTINE_EVENT_M02_03_04: Type = 118;
    pub const ROUTINE_EVENT_M02_05_07A: Type = 119;
    pub const ROUTINE_EVENT_M02_07B: Type = 120;
    pub const ROUTINE_EVENT_M02_09_10: Type = 121;
    pub const ROUTINE_EVENT_M03_01B: Type = 122;
    pub const ROUTINE_EVENT_M03_02: Type = 123;
    pub const ROUTINE_EVENT_M03_03: Type = 124;
    pub const ROUTINE_EVENT_M03_04: Type = 125;
    pub const ROUTINE_EVENT_M03_05_06: Type = 126;
    pub const ROUTINE_EVENT_M03_07A: Type = 127;
    pub const ROUTINE_EVENT_M03_07B: Type = 128;
    pub const ROUTINE_EVENT_M03_08: Type = 129;
    pub const ROUTINE_EVENT_M03_10_13: Type = 130;
    pub const ROUTINE_EVENT_M04_01: Type = 131;
    pub const ROUTINE_EVENT_M04_02_03: Type = 132;
    pub const ROUTINE_EVENT_M05_01_02: Type = 133;
    pub const ROUTINE_EVENT_M05_03: Type = 134;
    pub const ROUTINE_EVENT_M05_04: Type = 135;
    pub const ROUTINE_EVENT_M05_05: Type = 136;
    pub const ROUTINE_EVENT_M05_06_09: Type = 137;
    pub const ROUTINE_EVENT_M06_01: Type = 138;
    pub const ROUTINE_EVENT_M06_02: Type = 139;
    pub const ROUTINE_EVENT_M06_03: Type = 140;
    pub const ROUTINE_EVENT_M06_04: Type = 141;
    pub const ROUTINE_EVENT_M06_05: Type = 142;
    pub const ROUTINE_EVENT_M07_01_02: Type = 143;
    pub const ROUTINE_EVENT_M07_03: Type = 144;
    pub const ROUTINE_EVENT_M07_04: Type = 145;
    pub const ROUTINE_EVENT_M07_05: Type = 146;
    pub const ROUTINE_EVENT_M07_06: Type = 147;
    pub const ROUTINE_EVENT_M07_07_12: Type = 148;
    pub const ROUTINE_EVENT_M07_13: Type = 149;
    pub const ROUTINE_EVENT_M07_14: Type = 150;
    pub const ROUTINE_EVENT_M08_01_02: Type = 151;
    pub const ROUTINE_EVENT_M08_03: Type = 152;
    pub const ROUTINE_EVENT_M08_04: Type = 153;
    pub const ROUTINE_EVENT_M08_05_06: Type = 154;
    pub const ROUTINE_EVENT_M08_07: Type = 155;
    pub const ROUTINE_EVENT_M08_08: Type = 156;
    pub const ROUTINE_EVENT_M08_09: Type = 157;
    pub const ROUTINE_EVENT_M08_10: Type = 158;
    pub const ROUTINE_EVENT_M08_11: Type = 159;
    pub const ROUTINE_EVENT_M08_12: Type = 160;
    pub const ROUTINE_EVENT_M08_13: Type = 161;
    pub const ROUTINE_EVENT_M09_01: Type = 162;
    pub const ROUTINE_EVENT_M09_02: Type = 163;
    pub const ROUTINE_EVENT_M09_03: Type = 164;
    pub const ROUTINE_EVENT_M09_04: Type = 165;
    pub const ROUTINE_EVENT_M09_05: Type = 166;
    pub const ROUTINE_EVENT_M09_06_07: Type = 167;
    pub const ROUTINE_EVENT_M10_01: Type = 168;
    pub const ROUTINE_EVENT_M10_02: Type = 169;
    pub const ROUTINE_EVENT_M10_03: Type = 170;
    pub const ROUTINE_EVENT_M10_04: Type = 171;
    pub const ROUTINE_EVENT_M10_05: Type = 172;
    pub const ROUTINE_EVENT_M10_06: Type = 173;
    pub const ROUTINE_EVENT_M10_07: Type = 174;
    pub const ROUTINE_EVENT_M10_08: Type = 175;
    pub const ROUTINE_EVENT_M10_09: Type = 176;
    pub const ROUTINE_EVENT_M10_10: Type = 177;
    pub const ROUTINE_EVENT_M10_11_12: Type = 178;
    pub const ROUTINE_EVENT_M11_01: Type = 179;
    pub const ROUTINE_EVENT_M11_02: Type = 180;
    pub const ROUTINE_EVENT_M11_03: Type = 181;
    pub const ROUTINE_EVENT_M11_04: Type = 182;
    pub const ROUTINE_EVENT_M11_05: Type = 183;
    pub const ROUTINE_EVENT_M11_06_07: Type = 184;
    pub const ROUTINE_EVENT_M12_01: Type = 185;
    pub const ROUTINE_EVENT_M12_02: Type = 186;
    pub const ROUTINE_EVENT_M12_03A: Type = 187;
    pub const ROUTINE_EVENT_M12_03B: Type = 188;
    pub const ROUTINE_EVENT_M12_04: Type = 189;
    pub const ROUTINE_EVENT_M12_05: Type = 190;
    pub const ROUTINE_EVENT_M12_06: Type = 191;
    pub const ROUTINE_EVENT_M12_07: Type = 192;
    pub const ROUTINE_EVENT_M12_08: Type = 193;
    pub const ROUTINE_EVENT_M12_09: Type = 194;
    pub const ROUTINE_EVENT_M12_10_12: Type = 195;
    pub const ROUTINE_EVENT_M13_01: Type = 196;
    pub const ROUTINE_EVENT_M13_02: Type = 197;
    pub const ROUTINE_EVENT_M13_03: Type = 198;
    pub const ROUTINE_EVENT_M13_04: Type = 199;
    pub const ROUTINE_EVENT_M13_05A: Type = 200;
    pub const ROUTINE_EVENT_M13_05B: Type = 201;
    pub const ROUTINE_EVENT_M13_06: Type = 202;
    pub const ROUTINE_EVENT_M13_07: Type = 203;
    pub const ROUTINE_EVENT_M13_08: Type = 204;
    pub const ROUTINE_EVENT_M13_09: Type = 205;
    pub const ROUTINE_EVENT_M14_01: Type = 206;
    pub const ROUTINE_EVENT_M14_02A: Type = 207;
    pub const ROUTINE_EVENT_M14_02B: Type = 208;
    pub const ROUTINE_EVENT_M14_03: Type = 209;
    pub const ROUTINE_EVENT_M14_04: Type = 210;
    pub const ROUTINE_EVENT_M14_05: Type = 211;
    pub const ROUTINE_EVENT_M14_06: Type = 212;
    pub const ROUTINE_EVENT_M14_07: Type = 213;
    pub const ROUTINE_EVENT_M14_08_09: Type = 214;
    pub const ROUTINE_EVENT_M15_01: Type = 215;
    pub const ROUTINE_EVENT_M15_02: Type = 216;
    pub const ROUTINE_EVENT_M15_03: Type = 217;
    pub const ROUTINE_EVENT_M15_04: Type = 218;
    pub const ROUTINE_EVENT_M15_05: Type = 219;
    pub const ROUTINE_EVENT_M15_06: Type = 220;
    pub const ROUTINE_EVENT_M15_07: Type = 221;
    pub const ROUTINE_EVENT_M15_08: Type = 222;
    pub const ROUTINE_EVENT_M15_09: Type = 223;
    pub const ROUTINE_EVENT_M15_10_12: Type = 224;
    pub const ROUTINE_EVENT_M16_01: Type = 225;
    pub const ROUTINE_EVENT_M16_02: Type = 226;
    pub const ROUTINE_EVENT_M16_03: Type = 227;
    pub const ROUTINE_EVENT_M16_04: Type = 228;
    pub const ROUTINE_EVENT_M16_05: Type = 229;
    pub const ROUTINE_EVENT_M16_06_07: Type = 230;
    pub const ROUTINE_EVENT_M17_01: Type = 231;
    pub const ROUTINE_EVENT_M17_02: Type = 232;
    pub const ROUTINE_EVENT_M17_03_05: Type = 233;
    pub const ROUTINE_EVENT_M17_06: Type = 234;
    pub const ROUTINE_EVENT_M17_07: Type = 235;
    pub const ROUTINE_EVENT_M18_01: Type = 236;
    pub const ROUTINE_EVENT_M18_02: Type = 237;
    pub const ROUTINE_EVENT_M18_03: Type = 238;
    pub const ROUTINE_EVENT_M18_04_05: Type = 239;
    pub const ROUTINE_EVENT_M18_06: Type = 240;
    pub const ROUTINE_EVENT_M18_07: Type = 241;
    pub const ROUTINE_EVENT_M18_08: Type = 242;
    pub const ROUTINE_EVENT_M18_09: Type = 243;
    pub const ROUTINE_EVENT_M18_10: Type = 244;
    pub const ROUTINE_EVENT_M18_11: Type = 245;
    pub const ROUTINE_EVENT_M18_12: Type = 246;
    pub const ROUTINE_EVENT_M18_13_14: Type = 247;
    pub const ROUTINE_EVENT_M19_01_02: Type = 248;
    pub const ROUTINE_EVENT_M19_03: Type = 249;
    pub const ROUTINE_EVENT_M19_04: Type = 250;
    pub const ROUTINE_EVENT_M19_05: Type = 251;
    pub const ROUTINE_EVENT_M19_06_07: Type = 252;
    pub const ROUTINE_EVENT_M19_08: Type = 253;
    pub const ROUTINE_EVENT_M19_09: Type = 254;
    pub const ROUTINE_EVENT_M19_10: Type = 255;
    pub const ROUTINE_EVENT_M20_01_04: Type = 256;
    pub const ROUTINE_EVENT_M20_05: Type = 257;
    pub const ROUTINE_EVENT_M20_06: Type = 258;
    pub const ROUTINE_EVENT_M20_07_09: Type = 259;
    pub const ROUTINE_EVENT_M21_01_03: Type = 260;
    pub const ROUTINE_EVENT_M21_04: Type = 261;
    pub const ROUTINE_EVENT_M21_05: Type = 262;
    pub const ROUTINE_EVENT_M21_06: Type = 263;
    pub const ROUTINE_EVENT_M22_01_02: Type = 264;
    pub const ROUTINE_EVENT_M22_03: Type = 265;
    pub const ROUTINE_EVENT_M22_04: Type = 266;
    pub const ROUTINE_EVENT_M22_05: Type = 267;
    pub const ROUTINE_EVENT_M22_06: Type = 268;
    pub const ROUTINE_EVENT_M22_07: Type = 269;
    pub const ROUTINE_EVENT_M22_08: Type = 270;
    pub const ROUTINE_EVENT_M22_09_10: Type = 271;
    pub const ROUTINE_EVENT_M22_11: Type = 272;
    pub const ROUTINE_EVENT_M23_01_02: Type = 273;
    pub const ROUTINE_EVENT_M23_03: Type = 274;
    pub const ROUTINE_EVENT_M23_04A: Type = 275;
    pub const ROUTINE_EVENT_M23_04B: Type = 276;
    pub const ROUTINE_EVENT_M23_05: Type = 277;
    pub const ROUTINE_EVENT_M23_06: Type = 278;
    pub const ROUTINE_EVENT_M23_07: Type = 279;
    pub const ROUTINE_EVENT_M23_08: Type = 280;
    pub const ROUTINE_EVENT_M23_09_10: Type = 281;
    pub const ROUTINE_EVENT_M24_01_03: Type = 282;
    pub const ROUTINE_EVENT_M24_04: Type = 283;
    pub const ROUTINE_EVENT_M24_05: Type = 284;
    pub const ROUTINE_EVENT_M24_06: Type = 285;
    pub const ROUTINE_EVENT_M24_07: Type = 286;
    pub const ROUTINE_EVENT_M24_08: Type = 287;
    pub const ROUTINE_EVENT_M24_09: Type = 288;
    pub const ROUTINE_EVENT_M24_10: Type = 289;
    pub const ROUTINE_EVENT_M24_11: Type = 290;
    pub const ROUTINE_EVENT_M25_01_05: Type = 291;
    pub const ROUTINE_EVENT_M25_06: Type = 292;
    pub const ROUTINE_EVENT_M25_07: Type = 293;
    pub const ROUTINE_EVENT_M25_08: Type = 294;
    pub const ROUTINE_EVENT_M25_09: Type = 295;
    pub const ROUTINE_EVENT_M25_10: Type = 296;
    pub const ROUTINE_EVENT_M25_11: Type = 297;
    pub const ROUTINE_EVENT_M25_12: Type = 298;
    pub const ROUTINE_EVENT_M26_01_08: Type = 299;
    pub const ROUTINE_EVENT_S01_01: Type = 300;
    pub const ROUTINE_EVENT_S01_02: Type = 301;
    pub const ROUTINE_EVENT_S01_03: Type = 302;
    pub const ROUTINE_EVENT_S01_04: Type = 303;
    pub const ROUTINE_EVENT_S01_05: Type = 304;
    pub const ROUTINE_EVENT_S01_06: Type = 305;
    pub const ROUTINE_EVENT_S01_07: Type = 306;
    pub const ROUTINE_EVENT_S01_08: Type = 307;
    pub const ROUTINE_EVENT_S01_09_10: Type = 308;
    pub const ROUTINE_EVENT_S01_12: Type = 309;
    pub const ROUTINE_EVENT_S02_01: Type = 310;
    pub const ROUTINE_EVENT_S02_02: Type = 311;
    pub const ROUTINE_EVENT_S02_03: Type = 312;
    pub const ROUTINE_EVENT_S02_04: Type = 313;
    pub const ROUTINE_EVENT_S02_05: Type = 314;
    pub const ROUTINE_EVENT_S02_06: Type = 315;
    pub const ROUTINE_EVENT_S02_07: Type = 316;
    pub const ROUTINE_EVENT_S02_08: Type = 317;
    pub const ROUTINE_EVENT_S02_09: Type = 318;
    pub const ROUTINE_EVENT_S02_10: Type = 319;
    pub const ROUTINE_EVENT_S03_01: Type = 320;
    pub const ROUTINE_EVENT_S03_02: Type = 321;
    pub const ROUTINE_EVENT_S03_03: Type = 322;
    pub const ROUTINE_EVENT_S03_04: Type = 323;
    pub const ROUTINE_EVENT_S03_05: Type = 324;
    pub const ROUTINE_EVENT_S03_06: Type = 325;
    pub const ROUTINE_EVENT_S03_07: Type = 326;
    pub const ROUTINE_EVENT_S03_08: Type = 327;
    pub const ROUTINE_EVENT_S03_09: Type = 328;
    pub const ROUTINE_EVENT_S03_10: Type = 329;
    pub const ROUTINE_EVENT_S03_11: Type = 330;
    pub const ROUTINE_EVENT_S03_12: Type = 331;
    pub const ROUTINE_EVENT_S03_13: Type = 332;
    pub const ROUTINE_EVENT_S03_14: Type = 333;
    pub const ROUTINE_EVENT_S03_15: Type = 334;
    pub const ROUTINE_EVENT_S03_16: Type = 335;
    pub const ROUTINE_EVENT_S03_17_20: Type = 336;
    pub const ROUTINE_EVENT_S03_18: Type = 337;
    pub const ROUTINE_EVENT_S03_19: Type = 338;
    pub const ROUTINE_EVENT_S04_01: Type = 339;
    pub const ROUTINE_EVENT_S04_02: Type = 340;
    pub const ROUTINE_EVENT_S04_03: Type = 341;
    pub const ROUTINE_EVENT_S04_04: Type = 342;
    pub const ROUTINE_EVENT_S04_05: Type = 343;
    pub const ROUTINE_EVENT_S04_06_07: Type = 344;
    pub const ROUTINE_EVENT_S04_08: Type = 345;
    pub const ROUTINE_EVENT_S04_09: Type = 346;
    pub const ROUTINE_EVENT_S04_10: Type = 347;
    pub const ROUTINE_EVENT_S04_11: Type = 348;
    pub const ROUTINE_EVENT_S04_12: Type = 349;
    pub const ROUTINE_EVENT_S04_13: Type = 350;
    pub const ROUTINE_EVENT_S04_14: Type = 351;
    pub const ROUTINE_EVENT_S04_15: Type = 352;
    pub const ROUTINE_EVENT_S04_16: Type = 353;
    pub const ROUTINE_EVENT_S04_17: Type = 354;
    pub const ROUTINE_EVENT_S04_18: Type = 355;
    pub const ROUTINE_EVENT_S04_19: Type = 356;
    pub const ROUTINE_EVENT_S04_20: Type = 357;
    pub const ROUTINE_EVENT_S04_21: Type = 358;
    pub const ROUTINE_EVENT_S04_22: Type = 359;
    pub const ROUTINE_EVENT_S04_23: Type = 360;
    pub const ROUTINE_EVENT_S04_24: Type = 361;
    pub const ROUTINE_EVENT_S11_01: Type = 362;
    pub const ROUTINE_EVENT_S12_01: Type = 363;
    pub const ROUTINE_EVENT_S12_02: Type = 364;
    pub const ROUTINE_EVENT_S12_03: Type = 365;
    pub const ROUTINE_EVENT_S12_04: Type = 366;
    pub const ROUTINE_EVENT_S12_05: Type = 367;
    pub const ROUTINE_EVENT_S12_06: Type = 368;
    pub const ROUTINE_EVENT_S12_07: Type = 369;
    pub const ROUTINE_EVENT_S12_08: Type = 370;
    pub const ROUTINE_EVENT_S12_09: Type = 371;
    pub const ROUTINE_EVENT_S12_10: Type = 372;
    pub const ROUTINE_EVENT_S12_11: Type = 373;
    pub const ROUTINE_EVENT_S12_12: Type = 374;
    pub const ROUTINE_EVENT_S12_13: Type = 375;
    pub const ROUTINE_EVENT_S12_14: Type = 376;
    pub const ROUTINE_EVENT_S12_15: Type = 377;
    pub const ROUTINE_EVENT_S12_16: Type = 378;
    pub const ROUTINE_EVENT_S12_17: Type = 379;
    pub const ROUTINE_EVENT_S12_18: Type = 380;
    pub const ROUTINE_EVENT_S12_19: Type = 381;
    pub const ROUTINE_EVENT_S12_20: Type = 382;
    pub const ROUTINE_EVENT_S12_21: Type = 383;
    pub const ROUTINE_EVENT_S20_01: Type = 384;
    pub const ROUTINE_EVENT_S20_02: Type = 385;
    pub const ROUTINE_EVENT_S20_03: Type = 386;
    pub const ROUTINE_EVENT_S20_04_05: Type = 387;
    pub const ROUTINE_EVENT_S20_06: Type = 388;
    pub const ROUTINE_EVENT_S20_07_08: Type = 389;
    pub const ROUTINE_EVENT_S20_09: Type = 390;
    pub const ROUTINE_EVENT_S20_10: Type = 391;
    pub const ROUTINE_EVENT_S20_11: Type = 392;
    pub const ROUTINE_EVENT_S21_01: Type = 393;
    pub const ROUTINE_EVENT_S21_02: Type = 394;
    pub const ROUTINE_EVENT_S21_03: Type = 395;
    pub const ROUTINE_EVENT_S21_04_06: Type = 396;
    pub const ROUTINE_EVENT_S21_07: Type = 397;
    pub const ROUTINE_EVENT_S21_08: Type = 398;
    pub const ROUTINE_EVENT_S21_09: Type = 399;
    pub const ROUTINE_EVENT_S21_10: Type = 400;
    pub const ROUTINE_EVENT_S21_11: Type = 401;
    pub const ROUTINE_EVENT_S21_12: Type = 402;
    pub const ROUTINE_EVENT_S21_13: Type = 403;
    pub const ROUTINE_EVENT_S22_01_04: Type = 404;
    pub const ROUTINE_EVENT_S22_05: Type = 405;
    pub const ROUTINE_EVENT_S22_06: Type = 406;
    pub const ROUTINE_EVENT_S22_07: Type = 407;
    pub const ROUTINE_EVENT_S22_08: Type = 408;
    pub const ROUTINE_EVENT_S22_09: Type = 409;
    pub const ROUTINE_EVENT_S22_10: Type = 410;
    pub const ROUTINE_EVENT_S22_11: Type = 411;
    pub const ROUTINE_EVENT_S22_12: Type = 412;
    pub const ROUTINE_EVENT_S22_13: Type = 413;
    pub const ROUTINE_EVENT_S22_14_15: Type = 414;
    pub const ROUTINE_EVENT_S23_01: Type = 415;
    pub const ROUTINE_EVENT_S30_01: Type = 416;
    pub const ROUTINE_EVENT_S30_02: Type = 417;
    pub const ROUTINE_EVENT_S30_03: Type = 418;
    pub const ROUTINE_EVENT_S30_04: Type = 419;
    pub const ROUTINE_EVENT_S30_05: Type = 420;
    pub const ROUTINE_EVENT_S30_06: Type = 421;
    pub const ROUTINE_EVENT_S30_07: Type = 422;
    pub const ROUTINE_EVENT_S31_01: Type = 423;
    pub const ROUTINE_EVENT_S31_02: Type = 424;
    pub const ROUTINE_EVENT_S31_03: Type = 425;
    pub const ROUTINE_EVENT_S31_04: Type = 426;
    pub const ROUTINE_EVENT_S31_05: Type = 427;
    pub const ROUTINE_EVENT_S31_06: Type = 428;
    pub const ROUTINE_EVENT_S31_07: Type = 429;
    pub const ROUTINE_EVENT_S31_08: Type = 430;
    pub const ROUTINE_EVENT_S31_09: Type = 431;
    pub const ROUTINE_EVENT_S31_10: Type = 432;
    pub const ROUTINE_EVENT_S31_11: Type = 433;
    pub const ROUTINE_EVENT_S31_12: Type = 434;
    pub const ROUTINE_EVENT_S31_13: Type = 435;
    pub const ROUTINE_EVENT_S31_14: Type = 436;
    pub const ROUTINE_EVENT_S31_15: Type = 437;
    pub const ROUTINE_EVENT_S31_16: Type = 438;
    pub const ROUTINE_EVENT_S31_17: Type = 439;
    pub const ROUTINE_EVENT_S31_18: Type = 440;
    pub const ROUTINE_EVENT_S31_19: Type = 441;
    pub const ROUTINE_EVENT_S31_20: Type = 442;
    pub const ROUTINE_EVENT_S31_21: Type = 443;
    pub const ROUTINE_EVENT_S31_22: Type = 444;
    pub const ROUTINE_EVENT_S31_23: Type = 445;
    pub const ROUTINE_EVENT_S31_24: Type = 446;
    pub const ROUTINE_EVENT_S31_25: Type = 447;
    pub const ROUTINE_EVENT_S31_26: Type = 448;
    pub const ROUTINE_EVENT_S31_27: Type = 449;
    pub const ROUTINE_EVENT_S31_28: Type = 450;
    pub const ROUTINE_EVENT_S31_29: Type = 451;
    pub const ROUTINE_EVENT_S31_30: Type = 452;
    pub const ROUTINE_EVENT_S31_31: Type = 453;
    pub const ROUTINE_EVENT_S31_32: Type = 454;
    pub const ROUTINE_EVENT_S31_33: Type = 455;
    pub const ROUTINE_EVENT_S31_34: Type = 456;
    pub const ROUTINE_EVENT_S31_35: Type = 457;
    pub const ROUTINE_EVENT_S31_36: Type = 458;
    pub const ROUTINE_EVENT_S31_37: Type = 459;
    pub const ROUTINE_EVENT_S31_38: Type = 460;
    pub const ROUTINE_EVENT_S31_39: Type = 461;
    pub const ROUTINE_EVENT_S31_40: Type = 462;
    pub const ROUTINE_EVENT_S32_01: Type = 463;
    pub const ROUTINE_EVENT_S32_02: Type = 464;
    pub const ROUTINE_EVENT_S32_03: Type = 465;
    pub const ROUTINE_EVENT_S32_04: Type = 466;
    pub const ROUTINE_EVENT_N00_01: Type = 467;
    pub const ROUTINE_EVENT_N01_01: Type = 468;
    pub const ROUTINE_EVENT_N01_02: Type = 469;
    pub const ROUTINE_EVENT_N01_03: Type = 470;
    pub const ROUTINE_EVENT_N01_04: Type = 471;
    pub const ROUTINE_EVENT_N01_05_07: Type = 472;
    pub const ROUTINE_EVENT_N01_08: Type = 473;
    pub const ROUTINE_EVENT_N01_09: Type = 474;
    pub const ROUTINE_EVENT_N01_10YARARETA: Type = 475;
    pub const ROUTINE_EVENT_N01_10CHOUREI: Type = 476;
    pub const ROUTINE_EVENT_N01_14: Type = 477;
    pub const ROUTINE_EVENT_N01_15: Type = 478;
    pub const ROUTINE_EVENT_N01_16: Type = 479;
    pub const ROUTINE_EVENT_N01_17: Type = 480;
    pub const ROUTINE_EVENT_N01_18: Type = 481;
    pub const ROUTINE_EVENT_N01_19: Type = 482;
    pub const ROUTINE_EVENT_N01_19_2: Type = 483;
    pub const ROUTINE_EVENT_N01_20: Type = 484;
    pub const ROUTINE_EVENT_N01_21: Type = 485;
    pub const ROUTINE_EVENT_N01_22: Type = 486;
    pub const ROUTINE_EVENT_N01_23: Type = 487;
    pub const ROUTINE_EVENT_N01_24: Type = 488;
    pub const ROUTINE_EVENT_N01_25: Type = 489;
    pub const ROUTINE_EVENT_N01_27: Type = 490;
    pub const ROUTINE_EVENT_N01_28: Type = 491;
    pub const ROUTINE_EVENT_N01_30: Type = 492;
    pub const ROUTINE_EVENT_N01_31: Type = 493;
    pub const ROUTINE_EVENT_N02_01: Type = 494;
    pub const ROUTINE_EVENT_N02_02: Type = 495;
    pub const ROUTINE_EVENT_N02_03: Type = 496;
    pub const ROUTINE_EVENT_N02_04: Type = 497;
    pub const ROUTINE_EVENT_N02_05: Type = 498;
    pub const ROUTINE_EVENT_N02_06_07: Type = 499;
    pub const ROUTINE_EVENT_N02_08: Type = 500;
    pub const ROUTINE_EVENT_N02_09_10: Type = 501;
    pub const ROUTINE_EVENT_N03_01: Type = 502;
    pub const ROUTINE_EVENT_N03_02: Type = 503;
    pub const ROUTINE_EVENT_N03_03: Type = 504;
    pub const ROUTINE_EVENT_N03_04: Type = 505;
    pub const ROUTINE_EVENT_N03_05: Type = 506;
    pub const ROUTINE_EVENT_N03_06_07: Type = 507;
    pub const ROUTINE_EVENT_N03_08: Type = 508;
    pub const ROUTINE_EVENT_N03_09: Type = 509;
    pub const ROUTINE_EVENT_N03_10: Type = 510;
    pub const ROUTINE_EVENT_N03_11: Type = 511;
    pub const ROUTINE_EVENT_N03_12: Type = 512;
    pub const ROUTINE_EVENT_N03_13: Type = 513;
    pub const ROUTINE_EVENT_N03_14: Type = 514;
    pub const ROUTINE_EVENT_N03_15_16: Type = 515;
    pub const ROUTINE_EVENT_N03_17: Type = 516;
    pub const ROUTINE_EVENT_N03_18: Type = 517;
    pub const ROUTINE_EVENT_N03_19: Type = 518;
    pub const ROUTINE_EVENT_N04_01: Type = 519;
    pub const ROUTINE_EVENT_N04_02: Type = 520;
    pub const ROUTINE_EVENT_N04_03: Type = 521;
    pub const ROUTINE_EVENT_N04_04: Type = 522;
    pub const ROUTINE_EVENT_N04_05: Type = 523;
    pub const ROUTINE_EVENT_N04_06: Type = 524;
    pub const ROUTINE_EVENT_N04_07: Type = 525;
    pub const ROUTINE_EVENT_N04_08: Type = 526;
    pub const ROUTINE_EVENT_N04_09: Type = 527;
    pub const ROUTINE_EVENT_N04_10: Type = 528;
    pub const ROUTINE_EVENT_N04_11: Type = 529;
    pub const ROUTINE_EVENT_N04_12: Type = 530;
    pub const ROUTINE_EVENT_N04_13: Type = 531;
    pub const ROUTINE_EVENT_N04_14: Type = 532;
    pub const ROUTINE_EVENT_N04_15: Type = 533;
    pub const ROUTINE_EVENT_N04_16: Type = 534;
    pub const ROUTINE_EVENT_N04_17: Type = 535;
    pub const ROUTINE_EVENT_N04_18: Type = 536;
    pub const ROUTINE_EVENT_N04_19: Type = 537;
    pub const ROUTINE_EVENT_N04_20: Type = 538;
    pub const ROUTINE_EVENT_N04_21: Type = 539;
    pub const ROUTINE_EVENT_N04_22: Type = 540;
    pub const ROUTINE_EVENT_N04_23: Type = 541;
    pub const ROUTINE_EVENT_N04_24: Type = 542;
    pub const ROUTINE_EVENT_N04_25: Type = 543;
    pub const ROUTINE_EVENT_N04_26: Type = 544;
    pub const ROUTINE_EVENT_N06_01_02: Type = 545;
    pub const ROUTINE_EVENT_N06_03: Type = 546;
    pub const ROUTINE_EVENT_N06_04: Type = 547;
    pub const ROUTINE_EVENT_N06_05_07: Type = 548;
    pub const ROUTINE_EVENT_N06_08: Type = 549;
    pub const ROUTINE_EVENT_N06_09: Type = 550;
    pub const ROUTINE_EVENT_N06_10: Type = 551;
    pub const ROUTINE_EVENT_N06_11: Type = 552;
    pub const ROUTINE_EVENT_N06_12: Type = 553;
    pub const ROUTINE_EVENT_N06_13: Type = 554;
    pub const ROUTINE_EVENT_N06_14: Type = 555;
    pub const ROUTINE_EVENT_N06_15: Type = 556;
    pub const ROUTINE_EVENT_N06_16: Type = 557;
    pub const ROUTINE_EVENT_N06_17: Type = 558;
    pub const ROUTINE_EVENT_N06_18_19: Type = 559;
    pub const ROUTINE_EVENT_N06_20: Type = 560;
    pub const ROUTINE_EVENT_N06_21: Type = 561;
    pub const ROUTINE_EVENT_N06_22: Type = 562;
    pub const ROUTINE_EVENT_N06_23: Type = 563;
    pub const ROUTINE_EVENT_N06_24: Type = 564;
    pub const ROUTINE_EVENT_N06_25: Type = 565;
    pub const ROUTINE_EVENT_N06_26: Type = 566;
    pub const ROUTINE_EVENT_N06_27: Type = 567;
    pub const ROUTINE_EVENT_N06_28: Type = 568;
    pub const ROUTINE_EVENT_N06_29: Type = 569;
    pub const ROUTINE_EVENT_N06_30: Type = 570;
    pub const ROUTINE_EVENT_N06_31: Type = 571;
    pub const ROUTINE_EVENT_N06_32: Type = 572;
    pub const ROUTINE_EVENT_N06_33: Type = 573;
    pub const ROUTINE_EVENT_N06_34: Type = 574;
    pub const ROUTINE_EVENT_N06_35: Type = 575;
    pub const ROUTINE_EVENT_N06_36: Type = 576;
    pub const ROUTINE_EVENT_N06_37: Type = 577;
    pub const ROUTINE_EVENT_N06_38: Type = 578;
    pub const ROUTINE_EVENT_N06_39: Type = 579;
    pub const ROUTINE_EVENT_N08_01_02: Type = 580;
    pub const ROUTINE_EVENT_N08_03: Type = 581;
    pub const ROUTINE_EVENT_N08_04: Type = 582;
    pub const ROUTINE_EVENT_N08_05: Type = 583;
    pub const ROUTINE_EVENT_N08_06: Type = 584;
    pub const ROUTINE_EVENT_N08_07: Type = 585;
    pub const ROUTINE_EVENT_N08_08: Type = 586;
    pub const ROUTINE_EVENT_N08_09: Type = 587;
    pub const ROUTINE_EVENT_N08_10: Type = 588;
    pub const ROUTINE_EVENT_N08_11: Type = 589;
    pub const ROUTINE_EVENT_N08_12: Type = 590;
    pub const ROUTINE_EVENT_N08_13: Type = 591;
    pub const ROUTINE_EVENT_N08_14: Type = 592;
    pub const ROUTINE_EVENT_N08_15: Type = 593;
    pub const ROUTINE_EVENT_N08_16: Type = 594;
    pub const ROUTINE_EVENT_N08_17: Type = 595;
    pub const ROUTINE_EVENT_N08_18: Type = 596;
    pub const ROUTINE_EVENT_N08_19: Type = 597;
    pub const ROUTINE_EVENT_N08_20: Type = 598;
    pub const ROUTINE_EVENT_N08_21: Type = 599;
    pub const ROUTINE_EVENT_N08_22: Type = 600;
    pub const ROUTINE_EVENT_N08_23: Type = 601;
    pub const ROUTINE_EVENT_N08_24: Type = 602;
    pub const ROUTINE_EVENT_N08_25: Type = 603;
    pub const ROUTINE_EVENT_N08_26: Type = 604;
    pub const ROUTINE_EVENT_N08_27: Type = 605;
    pub const ROUTINE_EVENT_N08_28: Type = 606;
    pub const ROUTINE_EVENT_N08_29: Type = 607;
    pub const ROUTINE_EVENT_N08_30: Type = 608;
    pub const ROUTINE_EVENT_N09_01: Type = 609;
    pub const ROUTINE_EVENT_N09_02: Type = 610;
    pub const ROUTINE_EVENT_N09_03: Type = 611;
    pub const ROUTINE_EVENT_N09_04: Type = 612;
    pub const ROUTINE_EVENT_N09_05: Type = 613;
    pub const ROUTINE_EVENT_N09_06: Type = 614;
    pub const ROUTINE_EVENT_N09_07: Type = 615;
    pub const ROUTINE_EVENT_N09_08: Type = 616;
    pub const ROUTINE_EVENT_N09_09: Type = 617;
    pub const ROUTINE_EVENT_N09_10: Type = 618;
    pub const ROUTINE_EVENT_N09_11: Type = 619;
    pub const ROUTINE_EVENT_N09_12: Type = 620;
    pub const ROUTINE_EVENT_N09_13: Type = 621;
    pub const ROUTINE_EVENT_N09_14: Type = 622;
    pub const ROUTINE_EVENT_N09_15: Type = 623;
    pub const ROUTINE_EVENT_N09_16: Type = 624;
    pub const ROUTINE_EVENT_N09_17: Type = 625;
    pub const ROUTINE_EVENT_N09_18: Type = 626;
    pub const ROUTINE_EVENT_N09_19: Type = 627;
    pub const ROUTINE_EVENT_N09_20: Type = 628;
    pub const ROUTINE_EVENT_N09_21: Type = 629;
    pub const ROUTINE_EVENT_N09_22: Type = 630;
    pub const ROUTINE_EVENT_TG01: Type = 631;
    pub const ROUTINE_EVENT_TG02: Type = 632;
    pub const ROUTINE_EVENT_TG03: Type = 633;
    pub const ROUTINE_EVENT_TG04: Type = 634;
    pub const ROUTINE_EVENT_TG05: Type = 635;
    pub const ROUTINE_EVENT_TG06: Type = 636;
    pub const ROUTINE_EVENT_TG07: Type = 637;
    pub const ROUTINE_EVENT_TG08: Type = 638;
    pub const ROUTINE_EVENT_TG09: Type = 639;
    pub const ROUTINE_EVENT_TG10: Type = 640;
    pub const ROUTINE_EVENT_TG11: Type = 641;
    pub const ROUTINE_EVENT_TG12: Type = 642;
    pub const ROUTINE_EVENT_TG13: Type = 643;
    pub const ROUTINE_EVENT_TG14: Type = 644;
    pub const ROUTINE_EVENT_TG15: Type = 645;
    pub const ROUTINE_EVENT_TG16: Type = 646;
    pub const ROUTINE_EVENT_TG17: Type = 647;
    pub const ROUTINE_EVENT_TG18: Type = 648;
    pub const ROUTINE_EVENT_TG19: Type = 649;
    pub const ROUTINE_EVENT_TG20: Type = 650;
    pub const ROUTINE_EVENT_TG21: Type = 651;
    pub const ROUTINE_EVENT_TG22: Type = 652;
    pub const ROUTINE_EVENT_TG23: Type = 653;
    pub const ROUTINE_EVENT_TG24: Type = 654;
    pub const ROUTINE_EVENT_MEND_01: Type = 655;
    pub const ROUTINE_EVENT_MEND_02: Type = 656;
    pub const ROUTINE_COMMON_ENTER: Type = 657;
    pub const ROUTINE_DEBUG_ENTER: Type = 658;
    pub const ROUTINE_GETOUT_NORMAL: Type = 659;
    pub const ROUTINE_GOTO_SCENARIO_DUNGEON: Type = 660;
    pub const ROUTINE_GOTO_REQUEST_DUNGEON: Type = 661;
    pub const ROUTINE_GOTO_TRAINING_DUNGEON: Type = 662;
    pub const ROUTINE_GOTO_RESCUE_DUNGEON: Type = 663;
    pub const ROUTINE_GOTO_FREE_DUNGEON: Type = 664;
    pub const ROUTINE_GOTO_DEBUG_DUNGEON: Type = 665;
    pub const ROUTINE_ENTER_SCENARIO_DUNGEON: Type = 666;
    pub const ROUTINE_ENTER_REQUEST_DUNGEON: Type = 667;
    pub const ROUTINE_ENTER_TRAINING_DUNGEON: Type = 668;
    pub const ROUTINE_ENTER_RESCUE_DUNGEON: Type = 669;
    pub const ROUTINE_ENTER_FREE_DUNGEON: Type = 670;
    pub const ROUTINE_ENTER_DEBUG_DUNGEON: Type = 671;
    pub const ROUTINE_GETOUT_SCENARIO_DUNGEON: Type = 672;
    pub const ROUTINE_GETOUT_REQUEST_DUNGEON: Type = 673;
    pub const ROUTINE_GETOUT_REQUEST_RETURN: Type = 674;
    pub const ROUTINE_GETOUT_REQUEST_CONQUEST: Type = 675;
    pub const ROUTINE_GETOUT_TRAINING_DUNGEON: Type = 676;
    pub const ROUTINE_GETOUT_DEBUG_DUNGEON: Type = 677;
    pub const ROUTINE_MOVE_WORLD_MAP: Type = 678;
    pub const ROUTINE_EVENT_CONTROL: Type = 679;
    pub const ROUTINE_EVENT_WAKEUP: Type = 680;
    pub const ROUTINE_EVENT_STATION: Type = 681;
    pub const ROUTINE_STATION_CONTROL: Type = 682;
    pub const ROUTINE_ENTER_CONTROL: Type = 683;
    pub const ROUTINE_SETUP_DEBUG_CAMERA: Type = 684;
    pub const ROUTINE_MOVE_DEBUG_CAMERA: Type = 685;
    pub const ROUTINE_MESSAGE_CLOSE_WAIT_FUNC: Type = 686;
    pub const ROUTINE_EVENT_END_MAPIN: Type = 687;
    pub const ROUTINE_EVENT_END_FREE: Type = 688;
    pub const ROUTINE_EVENT_END_MAPIN_AE: Type = 689;
    pub const ROUTINE_EVENT_END_FREE_AE: Type = 690;
    pub const ROUTINE_BOSS_WIPE_FUNC: Type = 691;
    pub const ROUTINE_FADE_OUT_ALL_BEFORE: Type = 692;
    pub const ROUTINE_FADE_OUT_ALL_AFTER: Type = 693;
    pub const ROUTINE_SUBSCREEN_INIT: Type = 694;
    pub const ROUTINE_RESCUE_SET: Type = 695;
    pub const ROUTINE_RESCUE_DEBUG: Type = 696;
    pub const ROUTINE_SORANOITADAKI_FLAGSET: Type = 697;
    pub const ROUTINE_TITLE_TEST: Type = 698;
    pub const ROUTINE_BUBBLE_TEST: Type = 699;
    pub const ROUTINE_MAP_TEST: Type = 700;
}
#[repr(C)]
#[repr(align(2))]
pub struct common_routine_id_16 {
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 2usize]>,
}
impl common_routine_id_16 {
    #[inline]
    pub fn val(&self) -> common_routine_id::Type {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(0usize, 16u8) as u32) }
    }
    #[inline]
    pub fn set_val(&mut self, val: common_routine_id::Type) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(0usize, 16u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(val: common_routine_id::Type) -> __BindgenBitfieldUnit<[u8; 2usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 2usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 16u8, {
            let val: u32 = unsafe { ::core::mem::transmute(val) };
            val as u64
        });
        __bindgen_bitfield_unit
    }
}
pub mod script_entity_id {
    pub type Type = crate::ctypes::c_uint;
    pub const ENTITY_PLAYER: Type = 0;
    pub const ENTITY_PLAYER_HERO: Type = 1;
    pub const ENTITY_PLAYER_PARTNER: Type = 2;
    pub const ENTITY_PLAYER_PARTNER2: Type = 3;
    pub const ENTITY_PLAYER_APPOINT: Type = 4;
    pub const ENTITY_PLAYER_BIPPA: Type = 5;
    pub const ENTITY_PLAYER_PUPURIN: Type = 6;
    pub const ENTITY_PLAYER_KIMAWARI: Type = 7;
    pub const ENTITY_PLAYER_FUTURE: Type = 8;
    pub const ENTITY_PLAYER_CHARMS: Type = 9;
    pub const ENTITY_ATTENDANT1: Type = 10;
    pub const ENTITY_ATTENDANT2: Type = 11;
    pub const ENTITY_ATTENDANT_HERO: Type = 12;
    pub const ENTITY_ATTENDANT_PARTNER: Type = 13;
    pub const ENTITY_ATTENDANT_PARTNER2: Type = 14;
    pub const ENTITY_ATTENDANT_APPOINT: Type = 15;
    pub const ENTITY_ATTENDANT_BIPPA: Type = 16;
    pub const ENTITY_ATTENDANT_PUPURIN: Type = 17;
    pub const ENTITY_ATTENDANT_KIMAWARI: Type = 18;
    pub const ENTITY_ATTENDANT_FUTURE: Type = 19;
    pub const ENTITY_ATTENDANT_CHARMS: Type = 20;
    pub const ENTITY_ATTENDANT_MANAFI: Type = 21;
    pub const ENTITY_UNIT_NPC1: Type = 22;
    pub const ENTITY_UNIT_NPC2: Type = 23;
    pub const ENTITY_UNIT_NPC3: Type = 24;
    pub const ENTITY_UNIT_NPC4: Type = 25;
    pub const ENTITY_ADVENTURE_NPC1: Type = 26;
    pub const ENTITY_ADVENTURE_NPC2: Type = 27;
    pub const ENTITY_ADVENTURE_NPC3: Type = 28;
    pub const ENTITY_ADVENTURE_NPC4: Type = 29;
    pub const ENTITY_FRIEND_NPC1: Type = 30;
    pub const ENTITY_FRIEND_NPC2: Type = 31;
    pub const ENTITY_FRIEND_NPC3: Type = 32;
    pub const ENTITY_FRIEND_NPC4: Type = 33;
    pub const ENTITY_FRIEND_NPC5: Type = 34;
    pub const ENTITY_FRIEND_NPC6: Type = 35;
    pub const ENTITY_FRIEND_NPC7: Type = 36;
    pub const ENTITY_FRIEND_NPC8: Type = 37;
    pub const ENTITY_FRIEND_NPC9: Type = 38;
    pub const ENTITY_FRIEND_NPC10: Type = 39;
    pub const ENTITY_FRIEND_NPC11: Type = 40;
    pub const ENTITY_FRIEND_NPC12: Type = 41;
    pub const ENTITY_FRIEND_NPC13: Type = 42;
    pub const ENTITY_FRIEND_NPC14: Type = 43;
    pub const ENTITY_FRIEND_NPC15: Type = 44;
    pub const ENTITY_FRIEND_NPC16: Type = 45;
    pub const ENTITY_TALK_MAIN: Type = 46;
    pub const ENTITY_TALK_SUB: Type = 47;
    pub const ENTITY_EVENT_NPC_MAIN: Type = 48;
    pub const ENTITY_EVENT_NPC_SUB: Type = 49;
    pub const ENTITY_RANDOM_REQUEST_NPC01: Type = 50;
    pub const ENTITY_RANDOM_REQUEST_NPC02: Type = 51;
    pub const ENTITY_RANDOM_REQUEST_NPC03: Type = 52;
    pub const ENTITY_EVENT_NPC01: Type = 53;
    pub const ENTITY_EVENT_NPC02: Type = 54;
    pub const ENTITY_EVENT_NPC03: Type = 55;
    pub const ENTITY_EVENT_NPC04: Type = 56;
    pub const ENTITY_NPC_NEW_FRIEND: Type = 57;
    pub const ENTITY_NPC_DEMO_HERO: Type = 58;
    pub const ENTITY_NPC_DEMO_PARTNER: Type = 59;
    pub const ENTITY_NPC_HERO: Type = 60;
    pub const ENTITY_NPC_PARTNER: Type = 61;
    pub const ENTITY_NPC_PARTNER2: Type = 62;
    pub const ENTITY_NPC_APPOINT: Type = 63;
    pub const ENTITY_NPC_HERO_REAL: Type = 64;
    pub const ENTITY_NPC_PARTNER_REAL: Type = 65;
    pub const ENTITY_NPC_HERO_FIRST: Type = 66;
    pub const ENTITY_NPC_PARTNER_FIRST: Type = 67;
    pub const ENTITY_NPC_DEBUG: Type = 68;
    pub const ENTITY_NPC_TEST001: Type = 69;
    pub const ENTITY_NPC_TEST002: Type = 70;
    pub const ENTITY_NPC_TEST003: Type = 71;
    pub const ENTITY_NPC_TEST004: Type = 72;
    pub const ENTITY_NPC_TEST005: Type = 73;
    pub const ENTITY_NPC_TEST006: Type = 74;
    pub const ENTITY_NPC_TEST007: Type = 75;
    pub const ENTITY_NPC_TEST008: Type = 76;
    pub const ENTITY_NPC_TEST009: Type = 77;
    pub const ENTITY_NPC_TEST010: Type = 78;
    pub const ENTITY_NPC_PUKURIN: Type = 79;
    pub const ENTITY_NPC_ZUBATTO: Type = 80;
    pub const ENTITY_NPC_DIGUDA: Type = 81;
    pub const ENTITY_NPC_DAGUTORIO: Type = 82;
    pub const ENTITY_NPC_MANKII: Type = 83;
    pub const ENTITY_NPC_OKORIZARU: Type = 84;
    pub const ENTITY_NPC_KOIRU: Type = 85;
    pub const ENTITY_NPC_SURIIPU: Type = 86;
    pub const ENTITY_NPC_KURABU: Type = 87;
    pub const ENTITY_NPC_GARAGARA: Type = 88;
    pub const ENTITY_NPC_DOGAASU: Type = 89;
    pub const ENTITY_NPC_RAKKII: Type = 90;
    pub const ENTITY_NPC_GARUURA: Type = 91;
    pub const ENTITY_NPC_GYARADOSU: Type = 92;
    pub const ENTITY_NPC_RAPURASU: Type = 93;
    pub const ENTITY_NPC_OMUSUTAA: Type = 94;
    pub const ENTITY_NPC_OMUSUTAA2: Type = 95;
    pub const ENTITY_NPC_KABUTOPUSU: Type = 96;
    pub const ENTITY_NPC_NEITYIO: Type = 97;
    pub const ENTITY_NPC_DENRYUU: Type = 98;
    pub const ENTITY_NPC_MARIRU: Type = 99;
    pub const ENTITY_NPC_USOKKII: Type = 100;
    pub const ENTITY_NPC_KIMAWARI: Type = 101;
    pub const ENTITY_NPC_HIMEGUMA: Type = 102;
    pub const ENTITY_NPC_RINGUMA: Type = 103;
    pub const ENTITY_NPC_SEREBII: Type = 104;
    pub const ENTITY_NPC_JUPUTORU: Type = 105;
    pub const ENTITY_NPC_PERIPPAA1: Type = 106;
    pub const ENTITY_NPC_PERIPPAA2: Type = 107;
    pub const ENTITY_NPC_YARUKIMONO: Type = 108;
    pub const ENTITY_NPC_DOGOOMU: Type = 109;
    pub const ENTITY_NPC_RURIRI: Type = 110;
    pub const ENTITY_NPC_YAMIRAMI: Type = 111;
    pub const ENTITY_NPC_CHAAREMU: Type = 112;
    pub const ENTITY_NPC_KOOTASU: Type = 113;
    pub const ENTITY_NPC_BANEBUU: Type = 114;
    pub const ENTITY_NPC_HEIGANI: Type = 115;
    pub const ENTITY_NPC_KAKUREON1: Type = 116;
    pub const ENTITY_NPC_KAKUREON2: Type = 117;
    pub const ENTITY_NPC_YOMAWARU: Type = 118;
    pub const ENTITY_NPC_CHIRIIN: Type = 119;
    pub const ENTITY_NPC_REJIROKKU: Type = 120;
    pub const ENTITY_NPC_REJIAISU: Type = 121;
    pub const ENTITY_NPC_REJISUCHIRU: Type = 122;
    pub const ENTITY_NPC_GURAADON: Type = 123;
    pub const ENTITY_NPC_BIPPA: Type = 124;
    pub const ENTITY_NPC_RUKUSHIO1: Type = 125;
    pub const ENTITY_NPC_RUKUSHIO2: Type = 126;
    pub const ENTITY_NPC_RENTORAA: Type = 127;
    pub const ENTITY_NPC_MIMIROPPU: Type = 128;
    pub const ENTITY_NPC_SUKATANKU: Type = 129;
    pub const ENTITY_NPC_MANENE: Type = 130;
    pub const ENTITY_NPC_PERAPPU: Type = 131;
    pub const ENTITY_NPC_MIKARUGE: Type = 132;
    pub const ENTITY_NPC_GUREGGURU: Type = 133;
    pub const ENTITY_NPC_JIBAKOIRU: Type = 134;
    pub const ENTITY_NPC_EREKIBURU: Type = 135;
    pub const ENTITY_NPC_YONOWAARU: Type = 136;
    pub const ENTITY_NPC_YUKUSHII: Type = 137;
    pub const ENTITY_NPC_EMURITTO: Type = 138;
    pub const ENTITY_NPC_AGUNOMU: Type = 139;
    pub const ENTITY_NPC_DIARUGA: Type = 140;
    pub const ENTITY_NPC_PARUKIA: Type = 141;
    pub const ENTITY_NPC_REJIGIGASU: Type = 142;
    pub const ENTITY_NPC_GIRATYINA: Type = 143;
    pub const ENTITY_NPC_KURESERIA: Type = 144;
    pub const ENTITY_NPC_FIONE1: Type = 145;
    pub const ENTITY_NPC_FIONE2: Type = 146;
    pub const ENTITY_NPC_FIONE3: Type = 147;
    pub const ENTITY_NPC_FIONE4: Type = 148;
    pub const ENTITY_NPC_FIONE5: Type = 149;
    pub const ENTITY_NPC_FIONE6: Type = 150;
    pub const ENTITY_NPC_FIONE7: Type = 151;
    pub const ENTITY_NPC_FIONE8: Type = 152;
    pub const ENTITY_NPC_MANAFI: Type = 153;
    pub const ENTITY_NPC_DAAKURAI: Type = 154;
    pub const ENTITY_OBJECT001: Type = 155;
    pub const ENTITY_OBJECT002: Type = 156;
    pub const ENTITY_NPC_KOIRU2: Type = 157;
    pub const ENTITY_NPC_POPPO: Type = 158;
    pub const ENTITY_NPC_TANEBOO: Type = 159;
    pub const ENTITY_NPC_OOSUBAME: Type = 160;
    pub const ENTITY_NPC_KEMUSSO: Type = 161;
    pub const ENTITY_NPC_BURAKKII: Type = 162;
    pub const ENTITY_NPC_KAGEBOUZU: Type = 163;
    pub const ENTITY_NPC_YAMIKARASU: Type = 164;
    pub const ENTITY_NPC_POCHIENA_A: Type = 165;
    pub const ENTITY_NPC_POCHIENA_B: Type = 166;
    pub const ENTITY_NPC_POCHIENA_C: Type = 167;
    pub const ENTITY_NPC_ZANGUUSU: Type = 168;
    pub const ENTITY_NPC_SUTORAIKU: Type = 169;
    pub const ENTITY_NPC_SANDOPAN: Type = 170;
    pub const ENTITY_NPC_PONIITA: Type = 171;
    pub const ENTITY_NPC_BAKUUDA: Type = 172;
    pub const ENTITY_NPC_MADATSUBOMI: Type = 173;
    pub const ENTITY_NPC_TOGEPII: Type = 174;
    pub const ENTITY_NPC_NYOROTONO: Type = 175;
    pub const ENTITY_NPC_REDIBA: Type = 176;
    pub const ENTITY_NPC_YADON: Type = 177;
    pub const ENTITY_NPC_NAMAKERO: Type = 178;
    pub const ENTITY_NPC_ERUREIDO: Type = 179;
    pub const ENTITY_NPC_ROZUREIDO: Type = 180;
    pub const ENTITY_NPC_DOSAIDON: Type = 181;
    pub const ENTITY_NPC_MANYUURA: Type = 182;
    pub const ENTITY_NPC_AABOKKU: Type = 183;
    pub const ENTITY_NPC_DORAPION: Type = 184;
    pub const ENTITY_NPC_BASHAAMO: Type = 185;
    pub const ENTITY_NPC_ENPERUTO: Type = 186;
    pub const ENTITY_NPC_HERAKUROSU: Type = 187;
    pub const ENTITY_NPC_DERUBIRU_A: Type = 188;
    pub const ENTITY_NPC_DERUBIRU_B: Type = 189;
    pub const ENTITY_NPC_DERUBIRU_C: Type = 190;
    pub const ENTITY_NPC_SAANAITO: Type = 191;
    pub const ENTITY_NPC_TODOZERUGA: Type = 192;
    pub const ENTITY_NPC_HASSAMU: Type = 193;
    pub const ENTITY_NPC_BARIYAADO: Type = 194;
    pub const ENTITY_NPC_FURIIZAA: Type = 195;
    pub const ENTITY_NPC_YUKIMENOKO: Type = 196;
    pub const ENTITY_NPC_RINGUMA2: Type = 197;
    pub const ENTITY_NPC_YAMIRAMI2: Type = 198;
    pub const ENTITY_NPC_YAMIRAMI3: Type = 199;
    pub const ENTITY_NPC_YAMIRAMI4: Type = 200;
    pub const ENTITY_NPC_YAMIRAMI5: Type = 201;
    pub const ENTITY_NPC_YAMIRAMI6: Type = 202;
    pub const ENTITY_NPC_RUKUSHIO3: Type = 203;
    pub const ENTITY_NPC_RUKUSHIO4: Type = 204;
    pub const ENTITY_NPC_RUKUSHIO5: Type = 205;
    pub const ENTITY_NPC_RUKUSHIO6: Type = 206;
    pub const ENTITY_NPC_RUKUSHIO7: Type = 207;
    pub const ENTITY_NPC_RUKUSHIO8: Type = 208;
    pub const ENTITY_NPC_HIIDORAN: Type = 209;
    pub const ENTITY_NPC_RUGIA: Type = 210;
    pub const ENTITY_NPC_MYUU: Type = 211;
    pub const ENTITY_NPC_HOUOU: Type = 212;
    pub const ENTITY_NPC_S_CHIRIIN: Type = 213;
    pub const ENTITY_NPC_S_PUKURIN: Type = 214;
    pub const ENTITY_NPC_S_YUKUSHII: Type = 215;
    pub const ENTITY_NPC_S_AGUNOMU: Type = 216;
    pub const ENTITY_NPC_S_EMURITTO: Type = 217;
    pub const ENTITY_NPC_S_KIMAWARI: Type = 218;
    pub const ENTITY_NPC_S_DIGUDA: Type = 219;
    pub const ENTITY_NPC_S_DAGUTORIO: Type = 220;
    pub const ENTITY_NPC_S_HEIGANI: Type = 221;
    pub const ENTITY_NPC_S_DOGOOMU: Type = 222;
    pub const ENTITY_NPC_S_BIPPA: Type = 223;
    pub const ENTITY_NPC_S_PERAPPU: Type = 224;
    pub const ENTITY_NPC_S_JUPUTORU: Type = 225;
    pub const ENTITY_NPC_S_YONOWAARU: Type = 226;
    pub const ENTITY_NPC_S_YAMIRAMI1: Type = 227;
    pub const ENTITY_NPC_S_YAMIRAMI2: Type = 228;
    pub const ENTITY_NPC_DARK_PUKURIN: Type = 229;
    pub const ENTITY_OBJ_IMAGE_REJIGIGASU: Type = 230;
    pub const ENTITY_NPC_DOOTAKUN1: Type = 231;
    pub const ENTITY_NPC_DOOTAKUN2: Type = 232;
    pub const ENTITY_NPC_DOOTAKUN3: Type = 233;
    pub const ENTITY_NPC_DOOTAKUN4: Type = 234;
    pub const ENTITY_NPC_DOOTAKUN5: Type = 235;
    pub const ENTITY_NPC_DOOTAKUN6: Type = 236;
    pub const ENTITY_OBJ_IMAGE_DOOTAKUN: Type = 237;
    pub const ENTITY_OBJ_IMAGE_DOOTAKUN2: Type = 238;
    pub const ENTITY_OBJ_IMAGE_DOOTAKUN3: Type = 239;
    pub const ENTITY_OBJ_IMAGE_DOOTAKUN4: Type = 240;
    pub const ENTITY_OBJ_IMAGE_DOOTAKUN5: Type = 241;
    pub const ENTITY_OBJ_IMAGE_DOOTAKUN6: Type = 242;
    pub const ENTITY_NPC_SAWAMURAA1: Type = 243;
    pub const ENTITY_NPC_SAWAMURAA2: Type = 244;
    pub const ENTITY_NPC_SAWAMURAA3: Type = 245;
    pub const ENTITY_NPC_SAWAMURAA4: Type = 246;
    pub const ENTITY_NPC_SAWAMURAA5: Type = 247;
    pub const ENTITY_NPC_SAWAMURAA6: Type = 248;
    pub const ENTITY_OBJ_IMAGE_SAWAMURAA: Type = 249;
    pub const ENTITY_OBJ_IMAGE_SAWAMURAA2: Type = 250;
    pub const ENTITY_OBJ_IMAGE_SAWAMURAA3: Type = 251;
    pub const ENTITY_OBJ_IMAGE_SAWAMURAA4: Type = 252;
    pub const ENTITY_OBJ_IMAGE_SAWAMURAA5: Type = 253;
    pub const ENTITY_OBJ_IMAGE_SAWAMURAA6: Type = 254;
    pub const ENTITY_NPC_DARK_DIARUGA: Type = 255;
    pub const ENTITY_NPC_SHADOW_DAAKURAI: Type = 256;
    pub const ENTITY_NPC_KURESERIA2: Type = 257;
    pub const ENTITY_NPC_BOSUGODORA: Type = 258;
    pub const ENTITY_NPC_MAGUKARUGO: Type = 259;
    pub const ENTITY_NPC_BUUBAAN: Type = 260;
    pub const ENTITY_NPC_MUUMAAJI: Type = 261;
    pub const ENTITY_NPC_BARUBIITO1: Type = 262;
    pub const ENTITY_NPC_BARUBIITO2: Type = 263;
    pub const ENTITY_NPC_BARUBIITO3: Type = 264;
    pub const ENTITY_NPC_BARUBIITO4: Type = 265;
    pub const ENTITY_NPC_IRUMIIZE1: Type = 266;
    pub const ENTITY_NPC_IRUMIIZE2: Type = 267;
    pub const ENTITY_NPC_IRUMIIZE3: Type = 268;
    pub const ENTITY_NPC_IRUMIIZE4: Type = 269;
    pub const ENTITY_NPC_GABAITO: Type = 270;
    pub const ENTITY_NPC_REKKUUZA: Type = 271;
    pub const ENTITY_NPC_KAIOOGA: Type = 272;
    pub const ENTITY_NPC_JIRAACHI: Type = 273;
    pub const ENTITY_NPC_BIIDARU: Type = 274;
    pub const ENTITY_NPC_BIPPA_BRO: Type = 275;
    pub const ENTITY_NPC_BIPPA_SIS: Type = 276;
    pub const ENTITY_NPC_GURAIGAA: Type = 277;
    pub const ENTITY_NPC_TATSUBEI: Type = 278;
    pub const ENTITY_NPC_YUKIKABURI: Type = 279;
    pub const ENTITY_NPC_MANMUU: Type = 280;
    pub const ENTITY_NPC_ONIGOORI: Type = 281;
    pub const ENTITY_NPC_ONIGOORI2: Type = 282;
    pub const ENTITY_NPC_ONIGOORI3: Type = 283;
    pub const ENTITY_NPC_ONIGOORI4: Type = 284;
    pub const ENTITY_NPC_PORIGON: Type = 285;
    pub const ENTITY_NPC_PORIGON2: Type = 286;
    pub const ENTITY_NPC_YUKIWARASHI: Type = 287;
    pub const ENTITY_NPC_YUKIWARASHI2: Type = 288;
    pub const ENTITY_NPC_YUKIWARASHI3: Type = 289;
    pub const ENTITY_NPC_YUKIWARASHI4: Type = 290;
    pub const ENTITY_NPC_JUPETTA: Type = 291;
    pub const ENTITY_NPC_SUKORUPI: Type = 292;
    pub const ENTITY_NPC_AAMARUDO: Type = 293;
    pub const ENTITY_NPC_PUKURIN_PAPA: Type = 294;
    pub const ENTITY_NPC_PUKURIN_MAMA: Type = 295;
    pub const ENTITY_NPC_UPAA: Type = 296;
    pub const ENTITY_NPC_MUCHUURU: Type = 297;
    pub const ENTITY_NPC_SUBOMII: Type = 298;
    pub const ENTITY_NPC_NIDOKINGU: Type = 299;
    pub const ENTITY_NPC_SOONANO: Type = 300;
    pub const ENTITY_NPC_SOONANSU: Type = 301;
    pub const ENTITY_NPC_PATCHIIRU: Type = 302;
    pub const ENTITY_NPC_OKUTAN: Type = 303;
    pub const ENTITY_NPC_TSUBOTSUBO: Type = 304;
    pub const ENTITY_NPC_RUNPAPPA: Type = 305;
    pub const ENTITY_NPC_RUNPAPPA2: Type = 306;
    pub const ENTITY_NPC_RUNPAPPA3: Type = 307;
    pub const ENTITY_NPC_RUNPAPPA4: Type = 308;
    pub const ENTITY_NPC_RUNPAPPA5: Type = 309;
    pub const ENTITY_NPC_NASSHII: Type = 310;
    pub const ENTITY_NPC_SHEIMI: Type = 311;
    pub const ENTITY_NPC_SHEIMI1: Type = 312;
    pub const ENTITY_NPC_SHEIMI2: Type = 313;
    pub const ENTITY_NPC_SHEIMI3: Type = 314;
    pub const ENTITY_NPC_SHEIMI4: Type = 315;
    pub const ENTITY_NPC_SHEIMI5: Type = 316;
    pub const ENTITY_NPC_GOORIKII: Type = 317;
    pub const ENTITY_NPC_KINOGASSA: Type = 318;
    pub const ENTITY_NPC_KUCHIITO: Type = 319;
    pub const ENTITY_NPC_NYUURA: Type = 320;
    pub const ENTITY_NPC_KOIKINGU: Type = 321;
    pub const ENTITY_NPC_HINBASU: Type = 322;
    pub const ENTITY_NPC_FUWARAIDO: Type = 323;
    pub const ENTITY_NPC_TAMATAMA: Type = 324;
    pub const ENTITY_NPC_JIGUZAGUMA: Type = 325;
    pub const ENTITY_NPC_MASUKIPPA: Type = 326;
    pub const ENTITY_NPC_MASUKIPPA2: Type = 327;
    pub const ENTITY_NPC_MASUKIPPA3: Type = 328;
    pub const ENTITY_NPC_MASUKIPPA4: Type = 329;
    pub const ENTITY_NPC_MASUKIPPA5: Type = 330;
    pub const ENTITY_NPC_MASUKIPPA6: Type = 331;
    pub const ENTITY_NPC_BETOBETAA: Type = 332;
    pub const ENTITY_NPC_BETOBETAA2: Type = 333;
    pub const ENTITY_NPC_BETOBETAA3: Type = 334;
    pub const ENTITY_NPC_BETOBETAA4: Type = 335;
    pub const ENTITY_NPC_BETOBETAA5: Type = 336;
    pub const ENTITY_NPC_BETOBETON: Type = 337;
    pub const ENTITY_NPC_BETOBETON2: Type = 338;
    pub const ENTITY_NPC_BETOBETON3: Type = 339;
    pub const ENTITY_NPC_DERIBAADO: Type = 340;
    pub const ENTITY_NPC_MERIIPU: Type = 341;
    pub const ENTITY_NPC_WATAKKO: Type = 342;
    pub const ENTITY_NPC_DONMERU: Type = 343;
    pub const ENTITY_NPC_PACHIRISU: Type = 344;
    pub const ENTITY_NPC_KIREIHANA: Type = 345;
    pub const ENTITY_NPC_KIREIHANA2: Type = 346;
    pub const ENTITY_NPC_KIREIHANA3: Type = 347;
    pub const ENTITY_NPC_KIREIHANA4: Type = 348;
    pub const ENTITY_NPC_KODORA: Type = 349;
    pub const ENTITY_NPC_KODORA2: Type = 350;
    pub const ENTITY_NPC_KODORA3: Type = 351;
    pub const ENTITY_NPC_KODORA4: Type = 352;
    pub const ENTITY_NPC_KODORA5: Type = 353;
    pub const ENTITY_NPC_KODORA6: Type = 354;
    pub const ENTITY_NPC_METAMON: Type = 355;
    pub const ENTITY_NPC_GOROON: Type = 356;
    pub const ENTITY_NPC_OTACHI: Type = 357;
    pub const ENTITY_NPC_HERUGAA: Type = 358;
    pub const ENTITY_NPC_NOKUTASU: Type = 359;
    pub const ENTITY_NPC_NOKOTCHI: Type = 360;
    pub const ENTITY_NPC_GOOSUTO: Type = 361;
    pub const ENTITY_NPC_GOOSUTO2: Type = 362;
    pub const ENTITY_NPC_GOOSUTO3: Type = 363;
    pub const ENTITY_NPC_MAGUMAGGU: Type = 364;
    pub const ENTITY_NPC_MAGUMAGGU2: Type = 365;
    pub const ENTITY_NPC_SHEIMI_FC: Type = 366;
    pub const ENTITY_NPC_RAIBORUTO: Type = 367;
    pub const ENTITY_NPC_RAKURAI: Type = 368;
    pub const ENTITY_NPC_RAKURAI2: Type = 369;
    pub const ENTITY_NPC_RAKURAI3: Type = 370;
    pub const ENTITY_NPC_RAKURAI4: Type = 371;
    pub const ENTITY_NPC_RAKURAI5: Type = 372;
    pub const ENTITY_NPC_RAKURAI6: Type = 373;
    pub const ENTITY_NPC_RAKURAI7: Type = 374;
    pub const ENTITY_NPC_RAKURAI8: Type = 375;
    pub const ENTITY_NPC_YONOWAARU_N8: Type = 376;
    pub const ENTITY_NPC_YONOWAARU_N9: Type = 377;
    pub const ENTITY_NPC_METAMON_OTACHI: Type = 378;
    pub const ENTITY_NPC_METAMON_KIREIHANA: Type = 379;
    pub const ENTITY_NPC_BIIKUIN: Type = 380;
    pub const ENTITY_NPC_DAINOOZU: Type = 381;
    pub const ENTITY_NPC_BAKUONGU: Type = 382;
    pub const ENTITY_NPC_NENDOORU: Type = 383;
    pub const ENTITY_NPC_MEGAYANMA: Type = 384;
    pub const ENTITY_NPC_PINPUKU: Type = 385;
}
pub mod special_episode_type {
    pub type Type = crate::ctypes::c_uint;
    pub const EPISODE_BIDOOFS_WISH: Type = 0;
    pub const EPISODE_IGGLYBUFF_THE_PRODIGY: Type = 1;
    pub const EPISODE_TODAYS_OH_MY_GOSH: Type = 2;
    pub const EPISODE_HERE_COMES_TEAM_CHARM: Type = 3;
    pub const EPISODE_IN_THE_FUTURE_OF_DARKNESS: Type = 4;
}
#[repr(C, packed)]
pub struct special_episode_type_8 {
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 1usize]>,
}
impl special_episode_type_8 {
    #[inline]
    pub fn val(&self) -> special_episode_type::Type {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(0usize, 8u8) as u32) }
    }
    #[inline]
    pub fn set_val(&mut self, val: special_episode_type::Type) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(0usize, 8u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(val: special_episode_type::Type) -> __BindgenBitfieldUnit<[u8; 1usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 1usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 8u8, {
            let val: u32 = unsafe { ::core::mem::transmute(val) };
            val as u64
        });
        __bindgen_bitfield_unit
    }
}
pub mod mission_generation_result {
    pub type Type = crate::ctypes::c_uint;
    pub const MISSION_GENERATION_SUCCESS: Type = 0;
    pub const MISSION_GENERATION_FAILURE: Type = 1;
    pub const MISSION_GENERATION_GLOBAL_FAILURE: Type = 2;
}
pub mod script_level_id_na {
    pub type Type = crate::ctypes::c_uint;
    pub const LEVEL_NA_S00P01A: Type = 0;
    pub const LEVEL_NA_T00P01: Type = 1;
    pub const LEVEL_NA_T00P02: Type = 2;
    pub const LEVEL_NA_T00P03: Type = 3;
    pub const LEVEL_NA_T00P04A: Type = 4;
    pub const LEVEL_NA_T00P04A2: Type = 5;
    pub const LEVEL_NA_D00P01: Type = 6;
    pub const LEVEL_NA_D00P02: Type = 7;
    pub const LEVEL_NA_V00P01: Type = 8;
    pub const LEVEL_NA_V00P02: Type = 9;
    pub const LEVEL_NA_V00P03: Type = 10;
    pub const LEVEL_NA_D01P11A: Type = 11;
    pub const LEVEL_NA_D01P11B: Type = 12;
    pub const LEVEL_NA_D01P41A: Type = 13;
    pub const LEVEL_NA_D02P11A: Type = 14;
    pub const LEVEL_NA_D02P31A: Type = 15;
    pub const LEVEL_NA_D03P11A: Type = 16;
    pub const LEVEL_NA_D03P41A: Type = 17;
    pub const LEVEL_NA_D04P11A: Type = 18;
    pub const LEVEL_NA_D04P12A: Type = 19;
    pub const LEVEL_NA_D04P31A: Type = 20;
    pub const LEVEL_NA_D05P11A: Type = 21;
    pub const LEVEL_NA_D05P31A: Type = 22;
    pub const LEVEL_NA_D06P11A: Type = 23;
    pub const LEVEL_NA_D07P11A: Type = 24;
    pub const LEVEL_NA_D08P11A: Type = 25;
    pub const LEVEL_NA_D09P11A: Type = 26;
    pub const LEVEL_NA_D10P21A: Type = 27;
    pub const LEVEL_NA_D10P41A: Type = 28;
    pub const LEVEL_NA_D11P11A: Type = 29;
    pub const LEVEL_NA_D12P21A: Type = 30;
    pub const LEVEL_NA_D12P41A: Type = 31;
    pub const LEVEL_NA_D13P11A: Type = 32;
    pub const LEVEL_NA_D14P11A: Type = 33;
    pub const LEVEL_NA_D14P12A: Type = 34;
    pub const LEVEL_NA_D15P21A: Type = 35;
    pub const LEVEL_NA_D15P41A: Type = 36;
    pub const LEVEL_NA_D16P11A: Type = 37;
    pub const LEVEL_NA_D16P31A: Type = 38;
    pub const LEVEL_NA_D17P11A: Type = 39;
    pub const LEVEL_NA_D17P31A: Type = 40;
    pub const LEVEL_NA_D17P32A: Type = 41;
    pub const LEVEL_NA_D17P33A: Type = 42;
    pub const LEVEL_NA_D17P34A: Type = 43;
    pub const LEVEL_NA_D17P45A: Type = 44;
    pub const LEVEL_NA_D18P11A: Type = 45;
    pub const LEVEL_NA_D19P11A: Type = 46;
    pub const LEVEL_NA_D20P11A: Type = 47;
    pub const LEVEL_NA_D21P21A: Type = 48;
    pub const LEVEL_NA_D21P41A: Type = 49;
    pub const LEVEL_NA_D22P11A: Type = 50;
    pub const LEVEL_NA_D23P11A: Type = 51;
    pub const LEVEL_NA_D24P11A: Type = 52;
    pub const LEVEL_NA_D24P31A: Type = 53;
    pub const LEVEL_NA_D24P31B: Type = 54;
    pub const LEVEL_NA_D25P11A: Type = 55;
    pub const LEVEL_NA_D26P21A: Type = 56;
    pub const LEVEL_NA_D26P31A: Type = 57;
    pub const LEVEL_NA_D26P43A: Type = 58;
    pub const LEVEL_NA_D27P11A: Type = 59;
    pub const LEVEL_NA_D28P21A: Type = 60;
    pub const LEVEL_NA_D28P31A: Type = 61;
    pub const LEVEL_NA_D28P32A: Type = 62;
    pub const LEVEL_NA_D28P33A: Type = 63;
    pub const LEVEL_NA_D28P33C: Type = 64;
    pub const LEVEL_NA_D28P34A: Type = 65;
    pub const LEVEL_NA_D28P44A: Type = 66;
    pub const LEVEL_NA_D29P11A: Type = 67;
    pub const LEVEL_NA_D30P21A: Type = 68;
    pub const LEVEL_NA_D30P32A: Type = 69;
    pub const LEVEL_NA_D30P33A: Type = 70;
    pub const LEVEL_NA_D30P34A: Type = 71;
    pub const LEVEL_NA_D30P41A: Type = 72;
    pub const LEVEL_NA_D30P42A: Type = 73;
    pub const LEVEL_NA_D31P11A: Type = 74;
    pub const LEVEL_NA_D31P31A: Type = 75;
    pub const LEVEL_NA_D31P41A: Type = 76;
    pub const LEVEL_NA_D32P11A: Type = 77;
    pub const LEVEL_NA_D32P12A: Type = 78;
    pub const LEVEL_NA_D32P13A: Type = 79;
    pub const LEVEL_NA_D32P14A: Type = 80;
    pub const LEVEL_NA_D32P31A: Type = 81;
    pub const LEVEL_NA_D32P32A: Type = 82;
    pub const LEVEL_NA_D32P33A: Type = 83;
    pub const LEVEL_NA_D32P41A: Type = 84;
    pub const LEVEL_NA_D32P42A: Type = 85;
    pub const LEVEL_NA_D32P43A: Type = 86;
    pub const LEVEL_NA_D32P44A: Type = 87;
    pub const LEVEL_NA_D33P41A: Type = 88;
    pub const LEVEL_NA_D34P41A: Type = 89;
    pub const LEVEL_NA_D35P21A: Type = 90;
    pub const LEVEL_NA_D35P41A: Type = 91;
    pub const LEVEL_NA_D36P11A: Type = 92;
    pub const LEVEL_NA_D36P41A: Type = 93;
    pub const LEVEL_NA_D37P11A: Type = 94;
    pub const LEVEL_NA_D37P41A: Type = 95;
    pub const LEVEL_NA_D38P11A: Type = 96;
    pub const LEVEL_NA_D38P12A: Type = 97;
    pub const LEVEL_NA_D39P21A: Type = 98;
    pub const LEVEL_NA_D39P32A: Type = 99;
    pub const LEVEL_NA_D39P41A: Type = 100;
    pub const LEVEL_NA_D40P11A: Type = 101;
    pub const LEVEL_NA_D41P21A: Type = 102;
    pub const LEVEL_NA_D41P41A: Type = 103;
    pub const LEVEL_NA_D42P21A: Type = 104;
    pub const LEVEL_NA_D42P31A: Type = 105;
    pub const LEVEL_NA_D42P41A: Type = 106;
    pub const LEVEL_NA_D42P42A: Type = 107;
    pub const LEVEL_NA_D43P31A: Type = 108;
    pub const LEVEL_NA_D44P31A: Type = 109;
    pub const LEVEL_NA_D45P21A: Type = 110;
    pub const LEVEL_NA_D45P31A: Type = 111;
    pub const LEVEL_NA_D45P42A: Type = 112;
    pub const LEVEL_NA_D46P11A: Type = 113;
    pub const LEVEL_NA_D46P21A: Type = 114;
    pub const LEVEL_NA_D46P31A: Type = 115;
    pub const LEVEL_NA_D46P41A: Type = 116;
    pub const LEVEL_NA_D47P11A: Type = 117;
    pub const LEVEL_NA_D48P11A: Type = 118;
    pub const LEVEL_NA_D48P21A: Type = 119;
    pub const LEVEL_NA_D49P41A: Type = 120;
    pub const LEVEL_NA_D50P11A: Type = 121;
    pub const LEVEL_NA_D51P11A: Type = 122;
    pub const LEVEL_NA_D51P21A: Type = 123;
    pub const LEVEL_NA_D51P41A: Type = 124;
    pub const LEVEL_NA_D52P11A: Type = 125;
    pub const LEVEL_NA_D52P11C: Type = 126;
    pub const LEVEL_NA_D52P31A: Type = 127;
    pub const LEVEL_NA_D52P32A: Type = 128;
    pub const LEVEL_NA_D53P11A: Type = 129;
    pub const LEVEL_NA_D53P11B: Type = 130;
    pub const LEVEL_NA_D53P21A: Type = 131;
    pub const LEVEL_NA_D53P41A: Type = 132;
    pub const LEVEL_NA_D53P41B: Type = 133;
    pub const LEVEL_NA_D53P41C: Type = 134;
    pub const LEVEL_NA_D54P11A: Type = 135;
    pub const LEVEL_NA_D54P31A: Type = 136;
    pub const LEVEL_NA_D54P32A: Type = 137;
    pub const LEVEL_NA_D55P11A: Type = 138;
    pub const LEVEL_NA_D55P21A: Type = 139;
    pub const LEVEL_NA_D55P41A: Type = 140;
    pub const LEVEL_NA_D56P11A: Type = 141;
    pub const LEVEL_NA_D56P12A: Type = 142;
    pub const LEVEL_NA_D56P21A: Type = 143;
    pub const LEVEL_NA_D56P41A: Type = 144;
    pub const LEVEL_NA_D57P21A: Type = 145;
    pub const LEVEL_NA_D57P41A: Type = 146;
    pub const LEVEL_NA_D57P42A: Type = 147;
    pub const LEVEL_NA_D57P43A: Type = 148;
    pub const LEVEL_NA_D57P44A: Type = 149;
    pub const LEVEL_NA_D58P41A: Type = 150;
    pub const LEVEL_NA_D59P41A: Type = 151;
    pub const LEVEL_NA_D60P41A: Type = 152;
    pub const LEVEL_NA_D61P41A: Type = 153;
    pub const LEVEL_NA_D62P41A: Type = 154;
    pub const LEVEL_NA_D63P41A: Type = 155;
    pub const LEVEL_NA_D73P11A: Type = 156;
    pub const LEVEL_NA_D73P21A: Type = 157;
    pub const LEVEL_NA_D73P22A: Type = 158;
    pub const LEVEL_NA_D73P23A: Type = 159;
    pub const LEVEL_NA_D73P24A: Type = 160;
    pub const LEVEL_NA_D73P25A: Type = 161;
    pub const LEVEL_NA_D73P26A: Type = 162;
    pub const LEVEL_NA_D73P27A: Type = 163;
    pub const LEVEL_NA_D73P28A: Type = 164;
    pub const LEVEL_NA_D73P29A: Type = 165;
    pub const LEVEL_NA_D73P31A: Type = 166;
    pub const LEVEL_NA_D73P41A: Type = 167;
    pub const LEVEL_NA_D65P41A: Type = 168;
    pub const LEVEL_NA_D66P41A: Type = 169;
    pub const LEVEL_NA_D67P41A: Type = 170;
    pub const LEVEL_NA_D68P41A: Type = 171;
    pub const LEVEL_NA_D69P41A: Type = 172;
    pub const LEVEL_NA_D70P41A: Type = 173;
    pub const LEVEL_NA_D71P41A: Type = 174;
    pub const LEVEL_NA_D72P41A: Type = 175;
    pub const LEVEL_NA_D79P11A: Type = 176;
    pub const LEVEL_NA_D79P21A: Type = 177;
    pub const LEVEL_NA_D79P41A: Type = 178;
    pub const LEVEL_NA_D80P41A: Type = 179;
    pub const LEVEL_NA_D81P41A: Type = 180;
    pub const LEVEL_NA_D82P41A: Type = 181;
    pub const LEVEL_NA_D83P41A: Type = 182;
    pub const LEVEL_NA_D84P41A: Type = 183;
    pub const LEVEL_NA_D85P41A: Type = 184;
    pub const LEVEL_NA_D86P41A: Type = 185;
    pub const LEVEL_NA_D87P41A: Type = 186;
    pub const LEVEL_NA_D88P41A: Type = 187;
    pub const LEVEL_NA_D89P41A: Type = 188;
    pub const LEVEL_NA_D90P41A: Type = 189;
    pub const LEVEL_NA_D91P41A: Type = 190;
    pub const LEVEL_NA_D92P41A: Type = 191;
    pub const LEVEL_NA_D93P41A: Type = 192;
    pub const LEVEL_NA_D94P41A: Type = 193;
    pub const LEVEL_NA_D95P41A: Type = 194;
    pub const LEVEL_NA_G01P01A: Type = 195;
    pub const LEVEL_NA_G01P01A2: Type = 196;
    pub const LEVEL_NA_G01P01B: Type = 197;
    pub const LEVEL_NA_G01P01B2: Type = 198;
    pub const LEVEL_NA_G01P01C: Type = 199;
    pub const LEVEL_NA_G01P01C2: Type = 200;
    pub const LEVEL_NA_G01P02A: Type = 201;
    pub const LEVEL_NA_G01P03A: Type = 202;
    pub const LEVEL_NA_G01P04A: Type = 203;
    pub const LEVEL_NA_G01P04A2: Type = 204;
    pub const LEVEL_NA_G01P04C: Type = 205;
    pub const LEVEL_NA_G01P04C2: Type = 206;
    pub const LEVEL_NA_G01P05A: Type = 207;
    pub const LEVEL_NA_G01P05C: Type = 208;
    pub const LEVEL_NA_G01P06A: Type = 209;
    pub const LEVEL_NA_G01P06B: Type = 210;
    pub const LEVEL_NA_G01P07A: Type = 211;
    pub const LEVEL_NA_G01P07C: Type = 212;
    pub const LEVEL_NA_G01P08A: Type = 213;
    pub const LEVEL_NA_G01P09A: Type = 214;
    pub const LEVEL_NA_G01P09C: Type = 215;
    pub const LEVEL_NA_G01P10A: Type = 216;
    pub const LEVEL_NA_G01P10C: Type = 217;
    pub const LEVEL_NA_H01P99A: Type = 218;
    pub const LEVEL_NA_H01P99C: Type = 219;
    pub const LEVEL_NA_H01P99D: Type = 220;
    pub const LEVEL_NA_H01P99E: Type = 221;
    pub const LEVEL_NA_H02P99A: Type = 222;
    pub const LEVEL_NA_H02P99C: Type = 223;
    pub const LEVEL_NA_P01P01A: Type = 224;
    pub const LEVEL_NA_P01P02A: Type = 225;
    pub const LEVEL_NA_P01P03A: Type = 226;
    pub const LEVEL_NA_P01P04A: Type = 227;
    pub const LEVEL_NA_P02P01A: Type = 228;
    pub const LEVEL_NA_P03P01A: Type = 229;
    pub const LEVEL_NA_P03P02A: Type = 230;
    pub const LEVEL_NA_P04P01C: Type = 231;
    pub const LEVEL_NA_P05P01A: Type = 232;
    pub const LEVEL_NA_P05P02A: Type = 233;
    pub const LEVEL_NA_P05P02A2: Type = 234;
    pub const LEVEL_NA_P05P03A: Type = 235;
    pub const LEVEL_NA_P05P04A: Type = 236;
    pub const LEVEL_NA_P06P01A: Type = 237;
    pub const LEVEL_NA_P07P01A: Type = 238;
    pub const LEVEL_NA_P08P01A: Type = 239;
    pub const LEVEL_NA_P09P01A: Type = 240;
    pub const LEVEL_NA_P10P01A: Type = 241;
    pub const LEVEL_NA_P11P01A: Type = 242;
    pub const LEVEL_NA_P12P01A: Type = 243;
    pub const LEVEL_NA_P12P02A: Type = 244;
    pub const LEVEL_NA_P13P01A: Type = 245;
    pub const LEVEL_NA_P14P01A: Type = 246;
    pub const LEVEL_NA_P14P01A2: Type = 247;
    pub const LEVEL_NA_P15P01A: Type = 248;
    pub const LEVEL_NA_P16P01A: Type = 249;
    pub const LEVEL_NA_P17P01A: Type = 250;
    pub const LEVEL_NA_P17P02A: Type = 251;
    pub const LEVEL_NA_P17P02C: Type = 252;
    pub const LEVEL_NA_P18P01A: Type = 253;
    pub const LEVEL_NA_P19P01A: Type = 254;
    pub const LEVEL_NA_P19P02A: Type = 255;
    pub const LEVEL_NA_P20P01A: Type = 256;
    pub const LEVEL_NA_P20P02A: Type = 257;
    pub const LEVEL_NA_P20P03A: Type = 258;
    pub const LEVEL_NA_P21P02A: Type = 259;
    pub const LEVEL_NA_P22P01A: Type = 260;
    pub const LEVEL_NA_P23P01A: Type = 261;
    pub const LEVEL_NA_P23P02A: Type = 262;
    pub const LEVEL_NA_P24P01A: Type = 263;
    pub const LEVEL_NA_P25P01A: Type = 264;
    pub const LEVEL_NA_P26P01A: Type = 265;
    pub const LEVEL_NA_P27P01A: Type = 266;
    pub const LEVEL_NA_P28P01A: Type = 267;
    pub const LEVEL_NA_S01P01A: Type = 268;
    pub const LEVEL_NA_S01P01B: Type = 269;
    pub const LEVEL_NA_S01P02A: Type = 270;
    pub const LEVEL_NA_S01P03A: Type = 271;
    pub const LEVEL_NA_S01P04A: Type = 272;
    pub const LEVEL_NA_S02P01A: Type = 273;
    pub const LEVEL_NA_S03P01A: Type = 274;
    pub const LEVEL_NA_S04P01A: Type = 275;
    pub const LEVEL_NA_S05P01A: Type = 276;
    pub const LEVEL_NA_S05P02C: Type = 277;
    pub const LEVEL_NA_S05P03A: Type = 278;
    pub const LEVEL_NA_S05P04A: Type = 279;
    pub const LEVEL_NA_S06P01A: Type = 280;
    pub const LEVEL_NA_S07P01A: Type = 281;
    pub const LEVEL_NA_S07P02A: Type = 282;
    pub const LEVEL_NA_S08P01A: Type = 283;
    pub const LEVEL_NA_S11P01A: Type = 284;
    pub const LEVEL_NA_S11P02C: Type = 285;
    pub const LEVEL_NA_S13P01A: Type = 286;
    pub const LEVEL_NA_S13P01B: Type = 287;
    pub const LEVEL_NA_S13P02A: Type = 288;
    pub const LEVEL_NA_S13P03A: Type = 289;
    pub const LEVEL_NA_S13P04A: Type = 290;
    pub const LEVEL_NA_S13P04B: Type = 291;
    pub const LEVEL_NA_S13P05A: Type = 292;
    pub const LEVEL_NA_S13P06A: Type = 293;
    pub const LEVEL_NA_S13P07A: Type = 294;
    pub const LEVEL_NA_S13P08A: Type = 295;
    pub const LEVEL_NA_S13P09A: Type = 296;
    pub const LEVEL_NA_S14P01A: Type = 297;
    pub const LEVEL_NA_S15P01A: Type = 298;
    pub const LEVEL_NA_S15P02A: Type = 299;
    pub const LEVEL_NA_S15P03A: Type = 300;
    pub const LEVEL_NA_S15P04A: Type = 301;
    pub const LEVEL_NA_S15P05A: Type = 302;
    pub const LEVEL_NA_S15P05B: Type = 303;
    pub const LEVEL_NA_S17P01A: Type = 304;
    pub const LEVEL_NA_S17P02A: Type = 305;
    pub const LEVEL_NA_S20P01A: Type = 306;
    pub const LEVEL_NA_S21P01A: Type = 307;
    pub const LEVEL_NA_S99P01A: Type = 308;
    pub const LEVEL_NA_S99P02A: Type = 309;
    pub const LEVEL_NA_S99P03A: Type = 310;
    pub const LEVEL_NA_T01P01A: Type = 311;
    pub const LEVEL_NA_T01P02A: Type = 312;
    pub const LEVEL_NA_T01P03A: Type = 313;
    pub const LEVEL_NA_T01P03A2: Type = 314;
    pub const LEVEL_NA_T01P04A: Type = 315;
    pub const LEVEL_NA_V01P01A: Type = 316;
    pub const LEVEL_NA_V01P02A: Type = 317;
    pub const LEVEL_NA_V01P03A: Type = 318;
    pub const LEVEL_NA_V01P03B: Type = 319;
    pub const LEVEL_NA_V01P03C: Type = 320;
    pub const LEVEL_NA_V01P04B: Type = 321;
    pub const LEVEL_NA_V01P05B: Type = 322;
    pub const LEVEL_NA_V01P06B: Type = 323;
    pub const LEVEL_NA_V01P07B: Type = 324;
    pub const LEVEL_NA_V01P08B: Type = 325;
    pub const LEVEL_NA_V02P01A: Type = 326;
    pub const LEVEL_NA_V02P02A: Type = 327;
    pub const LEVEL_NA_V02P03A: Type = 328;
    pub const LEVEL_NA_V02P06A: Type = 329;
    pub const LEVEL_NA_V02P07A: Type = 330;
    pub const LEVEL_NA_V02P08A: Type = 331;
    pub const LEVEL_NA_V03P01A: Type = 332;
    pub const LEVEL_NA_V03P02A: Type = 333;
    pub const LEVEL_NA_V03P03A: Type = 334;
    pub const LEVEL_NA_V03P04A: Type = 335;
    pub const LEVEL_NA_V03P05C: Type = 336;
    pub const LEVEL_NA_V03P06A: Type = 337;
    pub const LEVEL_NA_V03P06B: Type = 338;
    pub const LEVEL_NA_V03P07A: Type = 339;
    pub const LEVEL_NA_V03P08A: Type = 340;
    pub const LEVEL_NA_V03P09A: Type = 341;
    pub const LEVEL_NA_V03P11A: Type = 342;
    pub const LEVEL_NA_V03P12A: Type = 343;
    pub const LEVEL_NA_V03P13A: Type = 344;
    pub const LEVEL_NA_V04P01A: Type = 345;
    pub const LEVEL_NA_V04P02A: Type = 346;
    pub const LEVEL_NA_V04P03A: Type = 347;
    pub const LEVEL_NA_V05P01A: Type = 348;
    pub const LEVEL_NA_V05P02A: Type = 349;
    pub const LEVEL_NA_V05P03A: Type = 350;
    pub const LEVEL_NA_V05P05A: Type = 351;
    pub const LEVEL_NA_V09P01A: Type = 352;
    pub const LEVEL_NA_V09P04A: Type = 353;
    pub const LEVEL_NA_V10P01C: Type = 354;
    pub const LEVEL_NA_V10P03C: Type = 355;
    pub const LEVEL_NA_V12P01A: Type = 356;
    pub const LEVEL_NA_V13P01A: Type = 357;
    pub const LEVEL_NA_V14P01A: Type = 358;
    pub const LEVEL_NA_V14P03A: Type = 359;
    pub const LEVEL_NA_V14P04A: Type = 360;
    pub const LEVEL_NA_V15P01A: Type = 361;
    pub const LEVEL_NA_V15P02A: Type = 362;
    pub const LEVEL_NA_V15P03A: Type = 363;
    pub const LEVEL_NA_V16P02A: Type = 364;
    pub const LEVEL_NA_V17P01A: Type = 365;
    pub const LEVEL_NA_V17P02A: Type = 366;
    pub const LEVEL_NA_V17P03A: Type = 367;
    pub const LEVEL_NA_V19P01A: Type = 368;
    pub const LEVEL_NA_V19P02A: Type = 369;
    pub const LEVEL_NA_V19P03A: Type = 370;
    pub const LEVEL_NA_V19P04A: Type = 371;
    pub const LEVEL_NA_V19P05A: Type = 372;
    pub const LEVEL_NA_V19P06A: Type = 373;
    pub const LEVEL_NA_V21P01A: Type = 374;
    pub const LEVEL_NA_V21P02A: Type = 375;
    pub const LEVEL_NA_V21P02B: Type = 376;
    pub const LEVEL_NA_V22P01A: Type = 377;
    pub const LEVEL_NA_V22P02A: Type = 378;
    pub const LEVEL_NA_V22P03A: Type = 379;
    pub const LEVEL_NA_V23P01A: Type = 380;
    pub const LEVEL_NA_V23P04A: Type = 381;
    pub const LEVEL_NA_V23P05A: Type = 382;
    pub const LEVEL_NA_V24P01A: Type = 383;
    pub const LEVEL_NA_V24P02A: Type = 384;
    pub const LEVEL_NA_V24P03A: Type = 385;
    pub const LEVEL_NA_V24P04A: Type = 386;
    pub const LEVEL_NA_V24P05A: Type = 387;
    pub const LEVEL_NA_V24P06A: Type = 388;
    pub const LEVEL_NA_V24P07A: Type = 389;
    pub const LEVEL_NA_V24P08A: Type = 390;
    pub const LEVEL_NA_V24P09A: Type = 391;
    pub const LEVEL_NA_V25P01A: Type = 392;
    pub const LEVEL_NA_V25P02A: Type = 393;
    pub const LEVEL_NA_V25P03A: Type = 394;
    pub const LEVEL_NA_V25P04A: Type = 395;
    pub const LEVEL_NA_V26P01A: Type = 396;
    pub const LEVEL_NA_V26P02A: Type = 397;
    pub const LEVEL_NA_V26P03A: Type = 398;
    pub const LEVEL_NA_V26P04A: Type = 399;
    pub const LEVEL_NA_V26P05A: Type = 400;
    pub const LEVEL_NA_V26P06A: Type = 401;
    pub const LEVEL_NA_V26P07A: Type = 402;
    pub const LEVEL_NA_V26P09A: Type = 403;
    pub const LEVEL_NA_V26P10A: Type = 404;
    pub const LEVEL_NA_V26P11A: Type = 405;
    pub const LEVEL_NA_V28P01A: Type = 406;
    pub const LEVEL_NA_V31P01A: Type = 407;
    pub const LEVEL_NA_V31P02A: Type = 408;
    pub const LEVEL_NA_V32P01A: Type = 409;
    pub const LEVEL_NA_V33P01A: Type = 410;
    pub const LEVEL_NA_V34P01A: Type = 411;
    pub const LEVEL_NA_V37P01A: Type = 412;
    pub const LEVEL_NA_V37P02A: Type = 413;
    pub const LEVEL_NA_V37P03A: Type = 414;
    pub const LEVEL_NA_V38P01A: Type = 415;
    pub const LEVEL_NA_V38P02A: Type = 416;
    pub const LEVEL_NA_V38P03A: Type = 417;
    pub const LEVEL_NA_V38P04A: Type = 418;
    pub const LEVEL_NA_V38P05A: Type = 419;
    pub const LEVEL_NA_V38P06A: Type = 420;
    pub const LEVEL_NA_V38P06C: Type = 421;
    pub const LEVEL_NA_V38P06D: Type = 422;
    pub const LEVEL_NA_V38P07A: Type = 423;
    pub const LEVEL_NA_V38P08A: Type = 424;
    pub const LEVEL_NA_V38P09A: Type = 425;
    pub const LEVEL_NA_V38P10A: Type = 426;
    pub const LEVEL_NA_V38P11A: Type = 427;
    pub const LEVEL_NA_V39P01A: Type = 428;
    pub const LEVEL_NA_V39P02A: Type = 429;
    pub const LEVEL_NA_V39P03A: Type = 430;
}
pub mod script_level_eu {
    pub type Type = crate::ctypes::c_uint;
    pub const LEVEL_EU_S00P01A: Type = 0;
    pub const LEVEL_EU_T00P01: Type = 1;
    pub const LEVEL_EU_T00P02: Type = 2;
    pub const LEVEL_EU_T00P03: Type = 3;
    pub const LEVEL_EU_T00P04A: Type = 4;
    pub const LEVEL_EU_T00P04A2: Type = 5;
    pub const LEVEL_EU_D00P01: Type = 6;
    pub const LEVEL_EU_D00P02: Type = 7;
    pub const LEVEL_EU_V00P01: Type = 8;
    pub const LEVEL_EU_V00P02: Type = 9;
    pub const LEVEL_EU_V00P03: Type = 10;
    pub const LEVEL_EU_D01P11A: Type = 11;
    pub const LEVEL_EU_D01P11B: Type = 12;
    pub const LEVEL_EU_D01P41A: Type = 13;
    pub const LEVEL_EU_D02P11A: Type = 14;
    pub const LEVEL_EU_D02P31A: Type = 15;
    pub const LEVEL_EU_D03P11A: Type = 16;
    pub const LEVEL_EU_D03P41A: Type = 17;
    pub const LEVEL_EU_D04P11A: Type = 18;
    pub const LEVEL_EU_D04P12A: Type = 19;
    pub const LEVEL_EU_D04P31A: Type = 20;
    pub const LEVEL_EU_D05P11A: Type = 21;
    pub const LEVEL_EU_D05P31A: Type = 22;
    pub const LEVEL_EU_D06P11A: Type = 23;
    pub const LEVEL_EU_D07P11A: Type = 24;
    pub const LEVEL_EU_D08P11A: Type = 25;
    pub const LEVEL_EU_D09P11A: Type = 26;
    pub const LEVEL_EU_D10P21A: Type = 27;
    pub const LEVEL_EU_D10P41A: Type = 28;
    pub const LEVEL_EU_D11P11A: Type = 29;
    pub const LEVEL_EU_D12P21A: Type = 30;
    pub const LEVEL_EU_D12P41A: Type = 31;
    pub const LEVEL_EU_D13P11A: Type = 32;
    pub const LEVEL_EU_D14P11A: Type = 33;
    pub const LEVEL_EU_D14P12A: Type = 34;
    pub const LEVEL_EU_D15P21A: Type = 35;
    pub const LEVEL_EU_D15P41A: Type = 36;
    pub const LEVEL_EU_D16P11A: Type = 37;
    pub const LEVEL_EU_D16P31A: Type = 38;
    pub const LEVEL_EU_D17P11A: Type = 39;
    pub const LEVEL_EU_D17P31A: Type = 40;
    pub const LEVEL_EU_D17P32A: Type = 41;
    pub const LEVEL_EU_D17P33A: Type = 42;
    pub const LEVEL_EU_D17P34A: Type = 43;
    pub const LEVEL_EU_D17P45A: Type = 44;
    pub const LEVEL_EU_D18P11A: Type = 45;
    pub const LEVEL_EU_D19P11A: Type = 46;
    pub const LEVEL_EU_D20P11A: Type = 47;
    pub const LEVEL_EU_D21P21A: Type = 48;
    pub const LEVEL_EU_D21P41A: Type = 49;
    pub const LEVEL_EU_D22P11A: Type = 50;
    pub const LEVEL_EU_D23P11A: Type = 51;
    pub const LEVEL_EU_D24P11A: Type = 52;
    pub const LEVEL_EU_D24P31A: Type = 53;
    pub const LEVEL_EU_D24P31B: Type = 54;
    pub const LEVEL_EU_D25P11A: Type = 55;
    pub const LEVEL_EU_D26P21A: Type = 56;
    pub const LEVEL_EU_D26P31A: Type = 57;
    pub const LEVEL_EU_D26P43A: Type = 58;
    pub const LEVEL_EU_D27P11A: Type = 59;
    pub const LEVEL_EU_D28P21A: Type = 60;
    pub const LEVEL_EU_D28P31A: Type = 61;
    pub const LEVEL_EU_D28P32A: Type = 62;
    pub const LEVEL_EU_D28P33A: Type = 63;
    pub const LEVEL_EU_D28P33C: Type = 64;
    pub const LEVEL_EU_D28P34A: Type = 65;
    pub const LEVEL_EU_D28P44A: Type = 66;
    pub const LEVEL_EU_D29P11A: Type = 67;
    pub const LEVEL_EU_D30P21A: Type = 68;
    pub const LEVEL_EU_D30P32A: Type = 69;
    pub const LEVEL_EU_D30P33A: Type = 70;
    pub const LEVEL_EU_D30P34A: Type = 71;
    pub const LEVEL_EU_D30P41A: Type = 72;
    pub const LEVEL_EU_D30P42A: Type = 73;
    pub const LEVEL_EU_D31P11A: Type = 74;
    pub const LEVEL_EU_D31P31A: Type = 75;
    pub const LEVEL_EU_D31P41A: Type = 76;
    pub const LEVEL_EU_D32P11A: Type = 77;
    pub const LEVEL_EU_D32P12A: Type = 78;
    pub const LEVEL_EU_D32P13A: Type = 79;
    pub const LEVEL_EU_D32P14A: Type = 80;
    pub const LEVEL_EU_D32P31A: Type = 81;
    pub const LEVEL_EU_D32P32A: Type = 82;
    pub const LEVEL_EU_D32P33A: Type = 83;
    pub const LEVEL_EU_D32P41A: Type = 84;
    pub const LEVEL_EU_D32P42A: Type = 85;
    pub const LEVEL_EU_D32P43A: Type = 86;
    pub const LEVEL_EU_D32P44A: Type = 87;
    pub const LEVEL_EU_D33P41A: Type = 88;
    pub const LEVEL_EU_D34P41A: Type = 89;
    pub const LEVEL_EU_D35P21A: Type = 90;
    pub const LEVEL_EU_D35P41A: Type = 91;
    pub const LEVEL_EU_D36P11A: Type = 92;
    pub const LEVEL_EU_D36P41A: Type = 93;
    pub const LEVEL_EU_D37P11A: Type = 94;
    pub const LEVEL_EU_D37P41A: Type = 95;
    pub const LEVEL_EU_D38P11A: Type = 96;
    pub const LEVEL_EU_D38P12A: Type = 97;
    pub const LEVEL_EU_D39P21A: Type = 98;
    pub const LEVEL_EU_D39P32A: Type = 99;
    pub const LEVEL_EU_D39P41A: Type = 100;
    pub const LEVEL_EU_D40P11A: Type = 101;
    pub const LEVEL_EU_D41P21A: Type = 102;
    pub const LEVEL_EU_D41P41A: Type = 103;
    pub const LEVEL_EU_D42P21A: Type = 104;
    pub const LEVEL_EU_D42P31A: Type = 105;
    pub const LEVEL_EU_D42P41A: Type = 106;
    pub const LEVEL_EU_D42P42A: Type = 107;
    pub const LEVEL_EU_D43P31A: Type = 108;
    pub const LEVEL_EU_D44P31A: Type = 109;
    pub const LEVEL_EU_D45P21A: Type = 110;
    pub const LEVEL_EU_D45P31A: Type = 111;
    pub const LEVEL_EU_D45P42A: Type = 112;
    pub const LEVEL_EU_D46P11A: Type = 113;
    pub const LEVEL_EU_D46P21A: Type = 114;
    pub const LEVEL_EU_D46P31A: Type = 115;
    pub const LEVEL_EU_D46P41A: Type = 116;
    pub const LEVEL_EU_D47P11A: Type = 117;
    pub const LEVEL_EU_D48P11A: Type = 118;
    pub const LEVEL_EU_D48P21A: Type = 119;
    pub const LEVEL_EU_D49P41A: Type = 120;
    pub const LEVEL_EU_D50P11A: Type = 121;
    pub const LEVEL_EU_D51P11A: Type = 122;
    pub const LEVEL_EU_D51P21A: Type = 123;
    pub const LEVEL_EU_D51P41A: Type = 124;
    pub const LEVEL_EU_D52P11A: Type = 125;
    pub const LEVEL_EU_D52P11C: Type = 126;
    pub const LEVEL_EU_D52P31A: Type = 127;
    pub const LEVEL_EU_D52P32A: Type = 128;
    pub const LEVEL_EU_D53P11A: Type = 129;
    pub const LEVEL_EU_D53P11B: Type = 130;
    pub const LEVEL_EU_D53P21A: Type = 131;
    pub const LEVEL_EU_D53P41A: Type = 132;
    pub const LEVEL_EU_D53P41B: Type = 133;
    pub const LEVEL_EU_D53P41C: Type = 134;
    pub const LEVEL_EU_D54P11A: Type = 135;
    pub const LEVEL_EU_D54P31A: Type = 136;
    pub const LEVEL_EU_D54P32A: Type = 137;
    pub const LEVEL_EU_D55P11A: Type = 138;
    pub const LEVEL_EU_D55P21A: Type = 139;
    pub const LEVEL_EU_D55P41A: Type = 140;
    pub const LEVEL_EU_D56P11A: Type = 141;
    pub const LEVEL_EU_D56P12A: Type = 142;
    pub const LEVEL_EU_D56P21A: Type = 143;
    pub const LEVEL_EU_D56P41A: Type = 144;
    pub const LEVEL_EU_D57P21A: Type = 145;
    pub const LEVEL_EU_D57P41A: Type = 146;
    pub const LEVEL_EU_D57P42A: Type = 147;
    pub const LEVEL_EU_D57P43A: Type = 148;
    pub const LEVEL_EU_D57P44A: Type = 149;
    pub const LEVEL_EU_D58P41A: Type = 150;
    pub const LEVEL_EU_D59P41A: Type = 151;
    pub const LEVEL_EU_D60P41A: Type = 152;
    pub const LEVEL_EU_D61P41A: Type = 153;
    pub const LEVEL_EU_D62P41A: Type = 154;
    pub const LEVEL_EU_D63P41A: Type = 155;
    pub const LEVEL_EU_D73P11A: Type = 156;
    pub const LEVEL_EU_D73P21A: Type = 157;
    pub const LEVEL_EU_D73P22A: Type = 158;
    pub const LEVEL_EU_D73P23A: Type = 159;
    pub const LEVEL_EU_D73P24A: Type = 160;
    pub const LEVEL_EU_D73P25A: Type = 161;
    pub const LEVEL_EU_D73P26A: Type = 162;
    pub const LEVEL_EU_D73P27A: Type = 163;
    pub const LEVEL_EU_D73P28A: Type = 164;
    pub const LEVEL_EU_D73P29A: Type = 165;
    pub const LEVEL_EU_D73P31A: Type = 166;
    pub const LEVEL_EU_D73P41A: Type = 167;
    pub const LEVEL_EU_D65P41A: Type = 168;
    pub const LEVEL_EU_D66P41A: Type = 169;
    pub const LEVEL_EU_D67P41A: Type = 170;
    pub const LEVEL_EU_D68P41A: Type = 171;
    pub const LEVEL_EU_D69P41A: Type = 172;
    pub const LEVEL_EU_D70P41A: Type = 173;
    pub const LEVEL_EU_D71P41A: Type = 174;
    pub const LEVEL_EU_D72P41A: Type = 175;
    pub const LEVEL_EU_D79P11A: Type = 176;
    pub const LEVEL_EU_D79P21A: Type = 177;
    pub const LEVEL_EU_D79P41A: Type = 178;
    pub const LEVEL_EU_D80P41A: Type = 179;
    pub const LEVEL_EU_D81P41A: Type = 180;
    pub const LEVEL_EU_D82P41A: Type = 181;
    pub const LEVEL_EU_D83P41A: Type = 182;
    pub const LEVEL_EU_D84P41A: Type = 183;
    pub const LEVEL_EU_D85P41A: Type = 184;
    pub const LEVEL_EU_D86P41A: Type = 185;
    pub const LEVEL_EU_D87P41A: Type = 186;
    pub const LEVEL_EU_D88P41A: Type = 187;
    pub const LEVEL_EU_D89P41A: Type = 188;
    pub const LEVEL_EU_D90P41A: Type = 189;
    pub const LEVEL_EU_D91P41A: Type = 190;
    pub const LEVEL_EU_D92P41A: Type = 191;
    pub const LEVEL_EU_D93P41A: Type = 192;
    pub const LEVEL_EU_D94P41A: Type = 193;
    pub const LEVEL_EU_D95P41A: Type = 194;
    pub const LEVEL_EU_G01P01A: Type = 195;
    pub const LEVEL_EU_G01P01A2: Type = 196;
    pub const LEVEL_EU_G01P01B: Type = 197;
    pub const LEVEL_EU_G01P01B2: Type = 198;
    pub const LEVEL_EU_G01P01C: Type = 199;
    pub const LEVEL_EU_G01P01C2: Type = 200;
    pub const LEVEL_EU_G01P02A: Type = 201;
    pub const LEVEL_EU_G01P03A: Type = 202;
    pub const LEVEL_EU_G01P04A: Type = 203;
    pub const LEVEL_EU_G01P04A2: Type = 204;
    pub const LEVEL_EU_G01P04C: Type = 205;
    pub const LEVEL_EU_G01P04C2: Type = 206;
    pub const LEVEL_EU_G01P05A: Type = 207;
    pub const LEVEL_EU_G01P05C: Type = 208;
    pub const LEVEL_EU_G01P06A: Type = 209;
    pub const LEVEL_EU_G01P06B: Type = 210;
    pub const LEVEL_EU_G01P07A: Type = 211;
    pub const LEVEL_EU_G01P07C: Type = 212;
    pub const LEVEL_EU_G01P08A: Type = 213;
    pub const LEVEL_EU_G01P09A: Type = 214;
    pub const LEVEL_EU_G01P09C: Type = 215;
    pub const LEVEL_EU_G01P10A: Type = 216;
    pub const LEVEL_EU_G01P10C: Type = 217;
    pub const LEVEL_EU_H01P99A: Type = 218;
    pub const LEVEL_EU_H01P99C: Type = 219;
    pub const LEVEL_EU_H01P99D: Type = 220;
    pub const LEVEL_EU_H01P99E: Type = 221;
    pub const LEVEL_EU_H02P99A: Type = 222;
    pub const LEVEL_EU_H02P99C: Type = 223;
    pub const LEVEL_EU_P01P01A: Type = 224;
    pub const LEVEL_EU_P01P02A: Type = 225;
    pub const LEVEL_EU_P01P03A: Type = 226;
    pub const LEVEL_EU_P01P04A: Type = 227;
    pub const LEVEL_EU_P02P01A: Type = 228;
    pub const LEVEL_EU_P03P01A: Type = 229;
    pub const LEVEL_EU_P03P02A: Type = 230;
    pub const LEVEL_EU_P04P01C: Type = 231;
    pub const LEVEL_EU_P05P01A: Type = 232;
    pub const LEVEL_EU_P05P02A: Type = 233;
    pub const LEVEL_EU_P05P02A2: Type = 234;
    pub const LEVEL_EU_P05P03A: Type = 235;
    pub const LEVEL_EU_P05P04A: Type = 236;
    pub const LEVEL_EU_P06P01A: Type = 237;
    pub const LEVEL_EU_P07P01A: Type = 238;
    pub const LEVEL_EU_P08P01A: Type = 239;
    pub const LEVEL_EU_P09P01A: Type = 240;
    pub const LEVEL_EU_P10P01A: Type = 241;
    pub const LEVEL_EU_P11P01A: Type = 242;
    pub const LEVEL_EU_P12P01A: Type = 243;
    pub const LEVEL_EU_P12P02A: Type = 244;
    pub const LEVEL_EU_P13P01A: Type = 245;
    pub const LEVEL_EU_P14P01A: Type = 246;
    pub const LEVEL_EU_P14P01A2: Type = 247;
    pub const LEVEL_EU_P15P01A: Type = 248;
    pub const LEVEL_EU_P16P01A: Type = 249;
    pub const LEVEL_EU_P17P01A: Type = 250;
    pub const LEVEL_EU_P17P02A: Type = 251;
    pub const LEVEL_EU_P17P02C: Type = 252;
    pub const LEVEL_EU_P18P01A: Type = 253;
    pub const LEVEL_EU_P19P01A: Type = 254;
    pub const LEVEL_EU_P19P02A: Type = 255;
    pub const LEVEL_EU_P20P01A: Type = 256;
    pub const LEVEL_EU_P20P02A: Type = 257;
    pub const LEVEL_EU_P20P03A: Type = 258;
    pub const LEVEL_EU_P21P02A: Type = 259;
    pub const LEVEL_EU_P22P01A: Type = 260;
    pub const LEVEL_EU_P23P01A: Type = 261;
    pub const LEVEL_EU_P23P02A: Type = 262;
    pub const LEVEL_EU_P24P01A: Type = 263;
    pub const LEVEL_EU_P25P01A: Type = 264;
    pub const LEVEL_EU_P26P01A: Type = 265;
    pub const LEVEL_EU_P27P01A: Type = 266;
    pub const LEVEL_EU_P28P01A: Type = 267;
    pub const LEVEL_EU_S01P01A: Type = 268;
    pub const LEVEL_EU_S01P01B: Type = 269;
    pub const LEVEL_EU_S01P02A: Type = 270;
    pub const LEVEL_EU_S01P03A: Type = 271;
    pub const LEVEL_EU_S01P04A: Type = 272;
    pub const LEVEL_EU_S02P01A: Type = 273;
    pub const LEVEL_EU_S03P01A: Type = 274;
    pub const LEVEL_EU_S04P01A: Type = 275;
    pub const LEVEL_EU_S05P01A: Type = 276;
    pub const LEVEL_EU_S05P02C: Type = 277;
    pub const LEVEL_EU_S05P03A: Type = 278;
    pub const LEVEL_EU_S05P04A: Type = 279;
    pub const LEVEL_EU_S06P01A: Type = 280;
    pub const LEVEL_EU_S07P01A: Type = 281;
    pub const LEVEL_EU_S07P02A: Type = 282;
    pub const LEVEL_EU_S08P01A: Type = 283;
    pub const LEVEL_EU_S11P01A: Type = 284;
    pub const LEVEL_EU_S11P02C: Type = 285;
    pub const LEVEL_EU_S11P02C2: Type = 286;
    pub const LEVEL_EU_S11P02C3: Type = 287;
    pub const LEVEL_EU_S11P02C4: Type = 288;
    pub const LEVEL_EU_S11P02C5: Type = 289;
    pub const LEVEL_EU_S13P01A: Type = 290;
    pub const LEVEL_EU_S13P01A2: Type = 291;
    pub const LEVEL_EU_S13P01A3: Type = 292;
    pub const LEVEL_EU_S13P01A4: Type = 293;
    pub const LEVEL_EU_S13P01A5: Type = 294;
    pub const LEVEL_EU_S13P01B: Type = 295;
    pub const LEVEL_EU_S13P01B2: Type = 296;
    pub const LEVEL_EU_S13P01B3: Type = 297;
    pub const LEVEL_EU_S13P01B4: Type = 298;
    pub const LEVEL_EU_S13P01B5: Type = 299;
    pub const LEVEL_EU_S13P02A: Type = 300;
    pub const LEVEL_EU_S13P03A: Type = 301;
    pub const LEVEL_EU_S13P04A: Type = 302;
    pub const LEVEL_EU_S13P04B: Type = 303;
    pub const LEVEL_EU_S13P05A: Type = 304;
    pub const LEVEL_EU_S13P06A: Type = 305;
    pub const LEVEL_EU_S13P07A: Type = 306;
    pub const LEVEL_EU_S13P08A: Type = 307;
    pub const LEVEL_EU_S13P09A: Type = 308;
    pub const LEVEL_EU_S14P01A: Type = 309;
    pub const LEVEL_EU_S15P01A: Type = 310;
    pub const LEVEL_EU_S15P02A: Type = 311;
    pub const LEVEL_EU_S15P03A: Type = 312;
    pub const LEVEL_EU_S15P04A: Type = 313;
    pub const LEVEL_EU_S15P05A: Type = 314;
    pub const LEVEL_EU_S15P05B: Type = 315;
    pub const LEVEL_EU_S17P01A: Type = 316;
    pub const LEVEL_EU_S17P02A: Type = 317;
    pub const LEVEL_EU_S20P01A: Type = 318;
    pub const LEVEL_EU_S21P01A: Type = 319;
    pub const LEVEL_EU_S99P01A: Type = 320;
    pub const LEVEL_EU_S99P02A: Type = 321;
    pub const LEVEL_EU_S99P03A: Type = 322;
    pub const LEVEL_EU_T01P01A: Type = 323;
    pub const LEVEL_EU_T01P02A: Type = 324;
    pub const LEVEL_EU_T01P03A: Type = 325;
    pub const LEVEL_EU_T01P03A2: Type = 326;
    pub const LEVEL_EU_T01P04A: Type = 327;
    pub const LEVEL_EU_V01P01A: Type = 328;
    pub const LEVEL_EU_V01P02A: Type = 329;
    pub const LEVEL_EU_V01P03A: Type = 330;
    pub const LEVEL_EU_V01P03B: Type = 331;
    pub const LEVEL_EU_V01P03C: Type = 332;
    pub const LEVEL_EU_V01P04B: Type = 333;
    pub const LEVEL_EU_V01P05B: Type = 334;
    pub const LEVEL_EU_V01P06B: Type = 335;
    pub const LEVEL_EU_V01P07B: Type = 336;
    pub const LEVEL_EU_V01P08B: Type = 337;
    pub const LEVEL_EU_V02P01A: Type = 338;
    pub const LEVEL_EU_V02P02A: Type = 339;
    pub const LEVEL_EU_V02P03A: Type = 340;
    pub const LEVEL_EU_V02P06A: Type = 341;
    pub const LEVEL_EU_V02P07A: Type = 342;
    pub const LEVEL_EU_V02P08A: Type = 343;
    pub const LEVEL_EU_V03P01A: Type = 344;
    pub const LEVEL_EU_V03P02A: Type = 345;
    pub const LEVEL_EU_V03P03A: Type = 346;
    pub const LEVEL_EU_V03P04A: Type = 347;
    pub const LEVEL_EU_V03P05C: Type = 348;
    pub const LEVEL_EU_V03P06A: Type = 349;
    pub const LEVEL_EU_V03P06B: Type = 350;
    pub const LEVEL_EU_V03P07A: Type = 351;
    pub const LEVEL_EU_V03P08A: Type = 352;
    pub const LEVEL_EU_V03P09A: Type = 353;
    pub const LEVEL_EU_V03P11A: Type = 354;
    pub const LEVEL_EU_V03P12A: Type = 355;
    pub const LEVEL_EU_V03P13A: Type = 356;
    pub const LEVEL_EU_V04P01A: Type = 357;
    pub const LEVEL_EU_V04P02A: Type = 358;
    pub const LEVEL_EU_V04P03A: Type = 359;
    pub const LEVEL_EU_V05P01A: Type = 360;
    pub const LEVEL_EU_V05P02A: Type = 361;
    pub const LEVEL_EU_V05P03A: Type = 362;
    pub const LEVEL_EU_V05P05A: Type = 363;
    pub const LEVEL_EU_V09P01A: Type = 364;
    pub const LEVEL_EU_V09P04A: Type = 365;
    pub const LEVEL_EU_V10P01C: Type = 366;
    pub const LEVEL_EU_V10P03C: Type = 367;
    pub const LEVEL_EU_V12P01A: Type = 368;
    pub const LEVEL_EU_V13P01A: Type = 369;
    pub const LEVEL_EU_V14P01A: Type = 370;
    pub const LEVEL_EU_V14P03A: Type = 371;
    pub const LEVEL_EU_V14P04A: Type = 372;
    pub const LEVEL_EU_V15P01A: Type = 373;
    pub const LEVEL_EU_V15P02A: Type = 374;
    pub const LEVEL_EU_V15P03A: Type = 375;
    pub const LEVEL_EU_V16P02A: Type = 376;
    pub const LEVEL_EU_V17P01A: Type = 377;
    pub const LEVEL_EU_V17P02A: Type = 378;
    pub const LEVEL_EU_V17P03A: Type = 379;
    pub const LEVEL_EU_V19P01A: Type = 380;
    pub const LEVEL_EU_V19P02A: Type = 381;
    pub const LEVEL_EU_V19P03A: Type = 382;
    pub const LEVEL_EU_V19P04A: Type = 383;
    pub const LEVEL_EU_V19P05A: Type = 384;
    pub const LEVEL_EU_V19P06A: Type = 385;
    pub const LEVEL_EU_V21P01A: Type = 386;
    pub const LEVEL_EU_V21P02A: Type = 387;
    pub const LEVEL_EU_V21P02B: Type = 388;
    pub const LEVEL_EU_V22P01A: Type = 389;
    pub const LEVEL_EU_V22P02A: Type = 390;
    pub const LEVEL_EU_V22P03A: Type = 391;
    pub const LEVEL_EU_V23P01A: Type = 392;
    pub const LEVEL_EU_V23P04A: Type = 393;
    pub const LEVEL_EU_V23P05A: Type = 394;
    pub const LEVEL_EU_V24P01A: Type = 395;
    pub const LEVEL_EU_V24P02A: Type = 396;
    pub const LEVEL_EU_V24P03A: Type = 397;
    pub const LEVEL_EU_V24P04A: Type = 398;
    pub const LEVEL_EU_V24P05A: Type = 399;
    pub const LEVEL_EU_V24P06A: Type = 400;
    pub const LEVEL_EU_V24P07A: Type = 401;
    pub const LEVEL_EU_V24P08A: Type = 402;
    pub const LEVEL_EU_V24P09A: Type = 403;
    pub const LEVEL_EU_V25P01A: Type = 404;
    pub const LEVEL_EU_V25P02A: Type = 405;
    pub const LEVEL_EU_V25P03A: Type = 406;
    pub const LEVEL_EU_V25P04A: Type = 407;
    pub const LEVEL_EU_V26P01A: Type = 408;
    pub const LEVEL_EU_V26P02A: Type = 409;
    pub const LEVEL_EU_V26P03A: Type = 410;
    pub const LEVEL_EU_V26P04A: Type = 411;
    pub const LEVEL_EU_V26P05A: Type = 412;
    pub const LEVEL_EU_V26P06A: Type = 413;
    pub const LEVEL_EU_V26P07A: Type = 414;
    pub const LEVEL_EU_V26P09A: Type = 415;
    pub const LEVEL_EU_V26P10A: Type = 416;
    pub const LEVEL_EU_V26P11A: Type = 417;
    pub const LEVEL_EU_V26P11A2: Type = 418;
    pub const LEVEL_EU_V26P11A3: Type = 419;
    pub const LEVEL_EU_V26P11A4: Type = 420;
    pub const LEVEL_EU_V26P11A5: Type = 421;
    pub const LEVEL_EU_V28P01A: Type = 422;
    pub const LEVEL_EU_V31P01A: Type = 423;
    pub const LEVEL_EU_V31P02A: Type = 424;
    pub const LEVEL_EU_V32P01A: Type = 425;
    pub const LEVEL_EU_V33P01A: Type = 426;
    pub const LEVEL_EU_V34P01A: Type = 427;
    pub const LEVEL_EU_V37P01A: Type = 428;
    pub const LEVEL_EU_V37P02A: Type = 429;
    pub const LEVEL_EU_V37P03A: Type = 430;
    pub const LEVEL_EU_V38P01A: Type = 431;
    pub const LEVEL_EU_V38P02A: Type = 432;
    pub const LEVEL_EU_V38P03A: Type = 433;
    pub const LEVEL_EU_V38P04A: Type = 434;
    pub const LEVEL_EU_V38P05A: Type = 435;
    pub const LEVEL_EU_V38P06A: Type = 436;
    pub const LEVEL_EU_V38P06C: Type = 437;
    pub const LEVEL_EU_V38P06D: Type = 438;
    pub const LEVEL_EU_V38P07A: Type = 439;
    pub const LEVEL_EU_V38P08A: Type = 440;
    pub const LEVEL_EU_V38P09A: Type = 441;
    pub const LEVEL_EU_V38P10A: Type = 442;
    pub const LEVEL_EU_V38P11A: Type = 443;
    pub const LEVEL_EU_V39P01A: Type = 444;
    pub const LEVEL_EU_V39P02A: Type = 445;
    pub const LEVEL_EU_V39P03A: Type = 446;
    pub const LEVEL_EU_S99P01A2: Type = 447;
    pub const LEVEL_EU_S99P01A3: Type = 448;
    pub const LEVEL_EU_S99P01A4: Type = 449;
    pub const LEVEL_EU_S99P01A5: Type = 450;
    pub const LEVEL_EU_S99P03A2: Type = 451;
    pub const LEVEL_EU_S99P03A3: Type = 452;
    pub const LEVEL_EU_S99P03A4: Type = 453;
    pub const LEVEL_EU_S99P03A5: Type = 454;
    pub const LEVEL_EU_S05P02C2: Type = 455;
    pub const LEVEL_EU_S05P02C3: Type = 456;
    pub const LEVEL_EU_S05P02C4: Type = 457;
    pub const LEVEL_EU_S05P02C5: Type = 458;
}
pub mod script_level_id_jp {
    pub type Type = crate::ctypes::c_uint;
    pub const LEVEL_JP_S00P01A: Type = 0;
    pub const LEVEL_JP_T00P01: Type = 1;
    pub const LEVEL_JP_T00P02: Type = 2;
    pub const LEVEL_JP_T00P03: Type = 3;
    pub const LEVEL_JP_T00P04A: Type = 4;
    pub const LEVEL_JP_T00P04A2: Type = 5;
    pub const LEVEL_JP_D00P01: Type = 6;
    pub const LEVEL_JP_D00P02: Type = 7;
    pub const LEVEL_JP_V00P01: Type = 8;
    pub const LEVEL_JP_V00P02: Type = 9;
    pub const LEVEL_JP_V00P03: Type = 10;
    pub const LEVEL_JP_D01P11A: Type = 11;
    pub const LEVEL_JP_D01P11B: Type = 12;
    pub const LEVEL_JP_D01P41A: Type = 13;
    pub const LEVEL_JP_D02P11A: Type = 14;
    pub const LEVEL_JP_D02P31A: Type = 15;
    pub const LEVEL_JP_D03P11A: Type = 16;
    pub const LEVEL_JP_D03P41A: Type = 17;
    pub const LEVEL_JP_D04P11A: Type = 18;
    pub const LEVEL_JP_D04P12A: Type = 19;
    pub const LEVEL_JP_D04P31A: Type = 20;
    pub const LEVEL_JP_D05P11A: Type = 21;
    pub const LEVEL_JP_D05P31A: Type = 22;
    pub const LEVEL_JP_D06P11A: Type = 23;
    pub const LEVEL_JP_D07P11A: Type = 24;
    pub const LEVEL_JP_D08P11A: Type = 25;
    pub const LEVEL_JP_D09P11A: Type = 26;
    pub const LEVEL_JP_D10P21A: Type = 27;
    pub const LEVEL_JP_D10P41A: Type = 28;
    pub const LEVEL_JP_D11P11A: Type = 29;
    pub const LEVEL_JP_D12P21A: Type = 30;
    pub const LEVEL_JP_D12P41A: Type = 31;
    pub const LEVEL_JP_D13P11A: Type = 32;
    pub const LEVEL_JP_D14P11A: Type = 33;
    pub const LEVEL_JP_D14P12A: Type = 34;
    pub const LEVEL_JP_D15P21A: Type = 35;
    pub const LEVEL_JP_D15P41A: Type = 36;
    pub const LEVEL_JP_D16P11A: Type = 37;
    pub const LEVEL_JP_D16P31A: Type = 38;
    pub const LEVEL_JP_D17P11A: Type = 39;
    pub const LEVEL_JP_D17P31A: Type = 40;
    pub const LEVEL_JP_D17P32A: Type = 41;
    pub const LEVEL_JP_D17P33A: Type = 42;
    pub const LEVEL_JP_D17P34A: Type = 43;
    pub const LEVEL_JP_D17P45A: Type = 44;
    pub const LEVEL_JP_D18P11A: Type = 45;
    pub const LEVEL_JP_D19P11A: Type = 46;
    pub const LEVEL_JP_D20P11A: Type = 47;
    pub const LEVEL_JP_D21P21A: Type = 48;
    pub const LEVEL_JP_D21P41A: Type = 49;
    pub const LEVEL_JP_D22P11A: Type = 50;
    pub const LEVEL_JP_D23P11A: Type = 51;
    pub const LEVEL_JP_D24P11A: Type = 52;
    pub const LEVEL_JP_D24P31A: Type = 53;
    pub const LEVEL_JP_D24P31B: Type = 54;
    pub const LEVEL_JP_D25P11A: Type = 55;
    pub const LEVEL_JP_D26P21A: Type = 56;
    pub const LEVEL_JP_D26P31A: Type = 57;
    pub const LEVEL_JP_D26P43A: Type = 58;
    pub const LEVEL_JP_D27P11A: Type = 59;
    pub const LEVEL_JP_D28P21A: Type = 60;
    pub const LEVEL_JP_D28P31A: Type = 61;
    pub const LEVEL_JP_D28P32A: Type = 62;
    pub const LEVEL_JP_D28P33A: Type = 63;
    pub const LEVEL_JP_D28P33C: Type = 64;
    pub const LEVEL_JP_D28P34A: Type = 65;
    pub const LEVEL_JP_D28P44A: Type = 66;
    pub const LEVEL_JP_D29P11A: Type = 67;
    pub const LEVEL_JP_D30P21A: Type = 68;
    pub const LEVEL_JP_D30P32A: Type = 69;
    pub const LEVEL_JP_D30P33A: Type = 70;
    pub const LEVEL_JP_D30P34A: Type = 71;
    pub const LEVEL_JP_D30P41A: Type = 72;
    pub const LEVEL_JP_D30P42A: Type = 73;
    pub const LEVEL_JP_D31P11A: Type = 74;
    pub const LEVEL_JP_D31P31A: Type = 75;
    pub const LEVEL_JP_D31P41A: Type = 76;
    pub const LEVEL_JP_D32P11A: Type = 77;
    pub const LEVEL_JP_D32P12A: Type = 78;
    pub const LEVEL_JP_D32P13A: Type = 79;
    pub const LEVEL_JP_D32P14A: Type = 80;
    pub const LEVEL_JP_D32P31A: Type = 81;
    pub const LEVEL_JP_D32P32A: Type = 82;
    pub const LEVEL_JP_D32P33A: Type = 83;
    pub const LEVEL_JP_D32P41A: Type = 84;
    pub const LEVEL_JP_D32P42A: Type = 85;
    pub const LEVEL_JP_D32P43A: Type = 86;
    pub const LEVEL_JP_D32P44A: Type = 87;
    pub const LEVEL_JP_D33P41A: Type = 88;
    pub const LEVEL_JP_D34P41A: Type = 89;
    pub const LEVEL_JP_D35P21A: Type = 90;
    pub const LEVEL_JP_D35P41A: Type = 91;
    pub const LEVEL_JP_D36P11A: Type = 92;
    pub const LEVEL_JP_D36P41A: Type = 93;
    pub const LEVEL_JP_D37P11A: Type = 94;
    pub const LEVEL_JP_D37P41A: Type = 95;
    pub const LEVEL_JP_D38P11A: Type = 96;
    pub const LEVEL_JP_D38P12A: Type = 97;
    pub const LEVEL_JP_D39P21A: Type = 98;
    pub const LEVEL_JP_D39P32A: Type = 99;
    pub const LEVEL_JP_D39P41A: Type = 100;
    pub const LEVEL_JP_D40P11A: Type = 101;
    pub const LEVEL_JP_D41P21A: Type = 102;
    pub const LEVEL_JP_D41P41A: Type = 103;
    pub const LEVEL_JP_D42P21A: Type = 104;
    pub const LEVEL_JP_D42P31A: Type = 105;
    pub const LEVEL_JP_D42P41A: Type = 106;
    pub const LEVEL_JP_D42P42A: Type = 107;
    pub const LEVEL_JP_D43P31A: Type = 108;
    pub const LEVEL_JP_D44P31A: Type = 109;
    pub const LEVEL_JP_D45P21A: Type = 110;
    pub const LEVEL_JP_D45P31A: Type = 111;
    pub const LEVEL_JP_D45P42A: Type = 112;
    pub const LEVEL_JP_D46P11A: Type = 113;
    pub const LEVEL_JP_D46P21A: Type = 114;
    pub const LEVEL_JP_D46P31A: Type = 115;
    pub const LEVEL_JP_D46P41A: Type = 116;
    pub const LEVEL_JP_D47P11A: Type = 117;
    pub const LEVEL_JP_D48P11A: Type = 118;
    pub const LEVEL_JP_D48P21A: Type = 119;
    pub const LEVEL_JP_D49P41A: Type = 120;
    pub const LEVEL_JP_D50P11A: Type = 121;
    pub const LEVEL_JP_D51P11A: Type = 122;
    pub const LEVEL_JP_D51P21A: Type = 123;
    pub const LEVEL_JP_D51P41A: Type = 124;
    pub const LEVEL_JP_D52P11A: Type = 125;
    pub const LEVEL_JP_D52P11C: Type = 126;
    pub const LEVEL_JP_D52P31A: Type = 127;
    pub const LEVEL_JP_D52P32A: Type = 128;
    pub const LEVEL_JP_D53P11A: Type = 129;
    pub const LEVEL_JP_D53P11B: Type = 130;
    pub const LEVEL_JP_D53P21A: Type = 131;
    pub const LEVEL_JP_D53P41A: Type = 132;
    pub const LEVEL_JP_D53P41B: Type = 133;
    pub const LEVEL_JP_D53P41C: Type = 134;
    pub const LEVEL_JP_D54P11A: Type = 135;
    pub const LEVEL_JP_D54P31A: Type = 136;
    pub const LEVEL_JP_D54P32A: Type = 137;
    pub const LEVEL_JP_D55P11A: Type = 138;
    pub const LEVEL_JP_D55P21A: Type = 139;
    pub const LEVEL_JP_D55P41A: Type = 140;
    pub const LEVEL_JP_D56P11A: Type = 141;
    pub const LEVEL_JP_D56P12A: Type = 142;
    pub const LEVEL_JP_D56P21A: Type = 143;
    pub const LEVEL_JP_D56P41A: Type = 144;
    pub const LEVEL_JP_D57P21A: Type = 145;
    pub const LEVEL_JP_D57P41A: Type = 146;
    pub const LEVEL_JP_D57P42A: Type = 147;
    pub const LEVEL_JP_D57P43A: Type = 148;
    pub const LEVEL_JP_D57P44A: Type = 149;
    pub const LEVEL_JP_D58P41A: Type = 150;
    pub const LEVEL_JP_D59P41A: Type = 151;
    pub const LEVEL_JP_D60P41A: Type = 152;
    pub const LEVEL_JP_D61P41A: Type = 153;
    pub const LEVEL_JP_D62P41A: Type = 154;
    pub const LEVEL_JP_D63P41A: Type = 155;
    pub const LEVEL_JP_D73P11A: Type = 156;
    pub const LEVEL_JP_D73P21A: Type = 157;
    pub const LEVEL_JP_D73P22A: Type = 158;
    pub const LEVEL_JP_D73P23A: Type = 159;
    pub const LEVEL_JP_D73P24A: Type = 160;
    pub const LEVEL_JP_D73P25A: Type = 161;
    pub const LEVEL_JP_D73P26A: Type = 162;
    pub const LEVEL_JP_D73P27A: Type = 163;
    pub const LEVEL_JP_D73P28A: Type = 164;
    pub const LEVEL_JP_D73P29A: Type = 165;
    pub const LEVEL_JP_D73P31A: Type = 166;
    pub const LEVEL_JP_D73P41A: Type = 167;
    pub const LEVEL_JP_D65P41A: Type = 168;
    pub const LEVEL_JP_D66P41A: Type = 169;
    pub const LEVEL_JP_D67P41A: Type = 170;
    pub const LEVEL_JP_D68P41A: Type = 171;
    pub const LEVEL_JP_D69P41A: Type = 172;
    pub const LEVEL_JP_D70P41A: Type = 173;
    pub const LEVEL_JP_D71P41A: Type = 174;
    pub const LEVEL_JP_D72P41A: Type = 175;
    pub const LEVEL_JP_D79P11A: Type = 176;
    pub const LEVEL_JP_D79P21A: Type = 177;
    pub const LEVEL_JP_D79P41A: Type = 178;
    pub const LEVEL_JP_D80P41A: Type = 179;
    pub const LEVEL_JP_D81P41A: Type = 180;
    pub const LEVEL_JP_D82P41A: Type = 181;
    pub const LEVEL_JP_D83P41A: Type = 182;
    pub const LEVEL_JP_D84P41A: Type = 183;
    pub const LEVEL_JP_D85P41A: Type = 184;
    pub const LEVEL_JP_D86P41A: Type = 185;
    pub const LEVEL_JP_D87P41A: Type = 186;
    pub const LEVEL_JP_D88P41A: Type = 187;
    pub const LEVEL_JP_D89P41A: Type = 188;
    pub const LEVEL_JP_D90P41A: Type = 189;
    pub const LEVEL_JP_D91P41A: Type = 190;
    pub const LEVEL_JP_D92P41A: Type = 191;
    pub const LEVEL_JP_D93P41A: Type = 192;
    pub const LEVEL_JP_D94P41A: Type = 193;
    pub const LEVEL_JP_D95P41A: Type = 194;
    pub const LEVEL_JP_G01P01A: Type = 195;
    pub const LEVEL_JP_G01P01A2: Type = 196;
    pub const LEVEL_JP_G01P01B: Type = 197;
    pub const LEVEL_JP_G01P01B2: Type = 198;
    pub const LEVEL_JP_G01P01C: Type = 199;
    pub const LEVEL_JP_G01P01C2: Type = 200;
    pub const LEVEL_JP_G01P02A: Type = 201;
    pub const LEVEL_JP_G01P03A: Type = 202;
    pub const LEVEL_JP_G01P04A: Type = 203;
    pub const LEVEL_JP_G01P04A2: Type = 204;
    pub const LEVEL_JP_G01P04C: Type = 205;
    pub const LEVEL_JP_G01P04C2: Type = 206;
    pub const LEVEL_JP_G01P05A: Type = 207;
    pub const LEVEL_JP_G01P05C: Type = 208;
    pub const LEVEL_JP_G01P06A: Type = 209;
    pub const LEVEL_JP_G01P06B: Type = 210;
    pub const LEVEL_JP_G01P07A: Type = 211;
    pub const LEVEL_JP_G01P07C: Type = 212;
    pub const LEVEL_JP_G01P08A: Type = 213;
    pub const LEVEL_JP_G01P09A: Type = 214;
    pub const LEVEL_JP_G01P09C: Type = 215;
    pub const LEVEL_JP_G01P10A: Type = 216;
    pub const LEVEL_JP_G01P10C: Type = 217;
    pub const LEVEL_JP_H01P99A: Type = 218;
    pub const LEVEL_JP_H01P99C: Type = 219;
    pub const LEVEL_JP_H01P99D: Type = 220;
    pub const LEVEL_JP_H01P99E: Type = 221;
    pub const LEVEL_JP_H02P99A: Type = 222;
    pub const LEVEL_JP_H02P99C: Type = 223;
    pub const LEVEL_JP_P01P01A: Type = 224;
    pub const LEVEL_JP_P01P02A: Type = 225;
    pub const LEVEL_JP_P01P03A: Type = 226;
    pub const LEVEL_JP_P01P04A: Type = 227;
    pub const LEVEL_JP_P02P01A: Type = 228;
    pub const LEVEL_JP_P03P01A: Type = 229;
    pub const LEVEL_JP_P03P02A: Type = 230;
    pub const LEVEL_JP_P04P01C: Type = 231;
    pub const LEVEL_JP_P05P01A: Type = 232;
    pub const LEVEL_JP_P05P02A: Type = 233;
    pub const LEVEL_JP_P05P02A2: Type = 234;
    pub const LEVEL_JP_P05P03A: Type = 235;
    pub const LEVEL_JP_P05P04A: Type = 236;
    pub const LEVEL_JP_P06P01A: Type = 237;
    pub const LEVEL_JP_P07P01A: Type = 238;
    pub const LEVEL_JP_P08P01A: Type = 239;
    pub const LEVEL_JP_P09P01A: Type = 240;
    pub const LEVEL_JP_P10P01A: Type = 241;
    pub const LEVEL_JP_P11P01A: Type = 242;
    pub const LEVEL_JP_P12P01A: Type = 243;
    pub const LEVEL_JP_P12P02A: Type = 244;
    pub const LEVEL_JP_P13P01A: Type = 245;
    pub const LEVEL_JP_P14P01A: Type = 246;
    pub const LEVEL_JP_P14P01A2: Type = 247;
    pub const LEVEL_JP_P15P01A: Type = 248;
    pub const LEVEL_JP_P16P01A: Type = 249;
    pub const LEVEL_JP_P17P01A: Type = 250;
    pub const LEVEL_JP_P17P02A: Type = 251;
    pub const LEVEL_JP_P17P02C: Type = 252;
    pub const LEVEL_JP_P18P01A: Type = 253;
    pub const LEVEL_JP_P19P01A: Type = 254;
    pub const LEVEL_JP_P19P02A: Type = 255;
    pub const LEVEL_JP_P20P01A: Type = 256;
    pub const LEVEL_JP_P20P02A: Type = 257;
    pub const LEVEL_JP_P20P03A: Type = 258;
    pub const LEVEL_JP_P21P02A: Type = 259;
    pub const LEVEL_JP_P22P01A: Type = 260;
    pub const LEVEL_JP_P23P01A: Type = 261;
    pub const LEVEL_JP_P23P02A: Type = 262;
    pub const LEVEL_JP_P24P01A: Type = 263;
    pub const LEVEL_JP_P25P01A: Type = 264;
    pub const LEVEL_JP_P26P01A: Type = 265;
    pub const LEVEL_JP_P27P01A: Type = 266;
    pub const LEVEL_JP_P28P01A: Type = 267;
    pub const LEVEL_JP_S01P01A: Type = 268;
    pub const LEVEL_JP_S01P01B: Type = 269;
    pub const LEVEL_JP_S01P02A: Type = 270;
    pub const LEVEL_JP_S01P03A: Type = 271;
    pub const LEVEL_JP_S01P04A: Type = 272;
    pub const LEVEL_JP_S02P01A: Type = 273;
    pub const LEVEL_JP_S03P01A: Type = 274;
    pub const LEVEL_JP_S04P01A: Type = 275;
    pub const LEVEL_JP_S05P01A: Type = 276;
    pub const LEVEL_JP_S05P02A: Type = 277;
    pub const LEVEL_JP_S05P02B: Type = 278;
    pub const LEVEL_JP_S05P03A: Type = 279;
    pub const LEVEL_JP_S05P04A: Type = 280;
    pub const LEVEL_JP_S05P05A: Type = 281;
    pub const LEVEL_JP_S05P05B: Type = 282;
    pub const LEVEL_JP_S06P01A: Type = 283;
    pub const LEVEL_JP_S07P01A: Type = 284;
    pub const LEVEL_JP_S07P02A: Type = 285;
    pub const LEVEL_JP_S08P01A: Type = 286;
    pub const LEVEL_JP_S11P01A: Type = 287;
    pub const LEVEL_JP_S11P02A: Type = 288;
    pub const LEVEL_JP_S11P02B: Type = 289;
    pub const LEVEL_JP_S11P02C: Type = 290;
    pub const LEVEL_JP_S13P01A: Type = 291;
    pub const LEVEL_JP_S13P01B: Type = 292;
    pub const LEVEL_JP_S13P02A: Type = 293;
    pub const LEVEL_JP_S13P03A: Type = 294;
    pub const LEVEL_JP_S13P04A: Type = 295;
    pub const LEVEL_JP_S13P04B: Type = 296;
    pub const LEVEL_JP_S13P05A: Type = 297;
    pub const LEVEL_JP_S13P06A: Type = 298;
    pub const LEVEL_JP_S13P07A: Type = 299;
    pub const LEVEL_JP_S13P08A: Type = 300;
    pub const LEVEL_JP_S13P09A: Type = 301;
    pub const LEVEL_JP_S14P01A: Type = 302;
    pub const LEVEL_JP_S15P01A: Type = 303;
    pub const LEVEL_JP_S15P02A: Type = 304;
    pub const LEVEL_JP_S15P03A: Type = 305;
    pub const LEVEL_JP_S15P04A: Type = 306;
    pub const LEVEL_JP_S15P05A: Type = 307;
    pub const LEVEL_JP_S15P05B: Type = 308;
    pub const LEVEL_JP_S17P01A: Type = 309;
    pub const LEVEL_JP_S17P02A: Type = 310;
    pub const LEVEL_JP_S20P01A: Type = 311;
    pub const LEVEL_JP_S21P01A: Type = 312;
    pub const LEVEL_JP_S99P01A: Type = 313;
    pub const LEVEL_JP_S99P02A: Type = 314;
    pub const LEVEL_JP_S99P03A: Type = 315;
    pub const LEVEL_JP_T01P01A: Type = 316;
    pub const LEVEL_JP_T01P02A: Type = 317;
    pub const LEVEL_JP_T01P03A: Type = 318;
    pub const LEVEL_JP_T01P03A2: Type = 319;
    pub const LEVEL_JP_T01P04A: Type = 320;
    pub const LEVEL_JP_V01P01A: Type = 321;
    pub const LEVEL_JP_V01P02A: Type = 322;
    pub const LEVEL_JP_V01P03A: Type = 323;
    pub const LEVEL_JP_V01P03B: Type = 324;
    pub const LEVEL_JP_V01P03C: Type = 325;
    pub const LEVEL_JP_V01P04B: Type = 326;
    pub const LEVEL_JP_V01P05B: Type = 327;
    pub const LEVEL_JP_V01P06B: Type = 328;
    pub const LEVEL_JP_V01P07B: Type = 329;
    pub const LEVEL_JP_V01P08B: Type = 330;
    pub const LEVEL_JP_V02P01A: Type = 331;
    pub const LEVEL_JP_V02P02A: Type = 332;
    pub const LEVEL_JP_V02P03A: Type = 333;
    pub const LEVEL_JP_V02P06A: Type = 334;
    pub const LEVEL_JP_V02P07A: Type = 335;
    pub const LEVEL_JP_V02P08A: Type = 336;
    pub const LEVEL_JP_V03P01A: Type = 337;
    pub const LEVEL_JP_V03P02A: Type = 338;
    pub const LEVEL_JP_V03P03A: Type = 339;
    pub const LEVEL_JP_V03P04A: Type = 340;
    pub const LEVEL_JP_V03P05C: Type = 341;
    pub const LEVEL_JP_V03P06A: Type = 342;
    pub const LEVEL_JP_V03P06B: Type = 343;
    pub const LEVEL_JP_V03P07A: Type = 344;
    pub const LEVEL_JP_V03P08A: Type = 345;
    pub const LEVEL_JP_V03P09A: Type = 346;
    pub const LEVEL_JP_V03P11A: Type = 347;
    pub const LEVEL_JP_V03P12A: Type = 348;
    pub const LEVEL_JP_V03P13A: Type = 349;
    pub const LEVEL_JP_V04P01A: Type = 350;
    pub const LEVEL_JP_V04P02A: Type = 351;
    pub const LEVEL_JP_V04P03A: Type = 352;
    pub const LEVEL_JP_V05P01A: Type = 353;
    pub const LEVEL_JP_V05P02A: Type = 354;
    pub const LEVEL_JP_V05P03A: Type = 355;
    pub const LEVEL_JP_V05P05A: Type = 356;
    pub const LEVEL_JP_V09P01A: Type = 357;
    pub const LEVEL_JP_V09P04A: Type = 358;
    pub const LEVEL_JP_V10P01C: Type = 359;
    pub const LEVEL_JP_V10P03C: Type = 360;
    pub const LEVEL_JP_V12P01A: Type = 361;
    pub const LEVEL_JP_V13P01A: Type = 362;
    pub const LEVEL_JP_V14P01A: Type = 363;
    pub const LEVEL_JP_V14P03A: Type = 364;
    pub const LEVEL_JP_V14P04A: Type = 365;
    pub const LEVEL_JP_V15P01A: Type = 366;
    pub const LEVEL_JP_V15P02A: Type = 367;
    pub const LEVEL_JP_V15P03A: Type = 368;
    pub const LEVEL_JP_V16P02A: Type = 369;
    pub const LEVEL_JP_V17P01A: Type = 370;
    pub const LEVEL_JP_V17P02A: Type = 371;
    pub const LEVEL_JP_V17P03A: Type = 372;
    pub const LEVEL_JP_V19P01A: Type = 373;
    pub const LEVEL_JP_V19P02A: Type = 374;
    pub const LEVEL_JP_V19P03A: Type = 375;
    pub const LEVEL_JP_V19P04A: Type = 376;
    pub const LEVEL_JP_V19P05A: Type = 377;
    pub const LEVEL_JP_V19P06A: Type = 378;
    pub const LEVEL_JP_V21P01A: Type = 379;
    pub const LEVEL_JP_V21P02A: Type = 380;
    pub const LEVEL_JP_V21P02B: Type = 381;
    pub const LEVEL_JP_V22P01A: Type = 382;
    pub const LEVEL_JP_V22P02A: Type = 383;
    pub const LEVEL_JP_V22P03A: Type = 384;
    pub const LEVEL_JP_V23P01A: Type = 385;
    pub const LEVEL_JP_V23P04A: Type = 386;
    pub const LEVEL_JP_V23P05A: Type = 387;
    pub const LEVEL_JP_V24P01A: Type = 388;
    pub const LEVEL_JP_V24P02A: Type = 389;
    pub const LEVEL_JP_V24P03A: Type = 390;
    pub const LEVEL_JP_V24P04A: Type = 391;
    pub const LEVEL_JP_V24P05A: Type = 392;
    pub const LEVEL_JP_V24P06A: Type = 393;
    pub const LEVEL_JP_V24P07A: Type = 394;
    pub const LEVEL_JP_V24P08A: Type = 395;
    pub const LEVEL_JP_V24P09A: Type = 396;
    pub const LEVEL_JP_V25P01A: Type = 397;
    pub const LEVEL_JP_V25P02A: Type = 398;
    pub const LEVEL_JP_V25P03A: Type = 399;
    pub const LEVEL_JP_V25P04A: Type = 400;
    pub const LEVEL_JP_V26P01A: Type = 401;
    pub const LEVEL_JP_V26P02A: Type = 402;
    pub const LEVEL_JP_V26P03A: Type = 403;
    pub const LEVEL_JP_V26P04A: Type = 404;
    pub const LEVEL_JP_V26P05A: Type = 405;
    pub const LEVEL_JP_V26P06A: Type = 406;
    pub const LEVEL_JP_V26P07A: Type = 407;
    pub const LEVEL_JP_V26P09A: Type = 408;
    pub const LEVEL_JP_V26P10A: Type = 409;
    pub const LEVEL_JP_V26P11A: Type = 410;
    pub const LEVEL_JP_V28P01A: Type = 411;
    pub const LEVEL_JP_V31P01A: Type = 412;
    pub const LEVEL_JP_V31P02A: Type = 413;
    pub const LEVEL_JP_V32P01A: Type = 414;
    pub const LEVEL_JP_V33P01A: Type = 415;
    pub const LEVEL_JP_V34P01A: Type = 416;
    pub const LEVEL_JP_V37P01A: Type = 417;
    pub const LEVEL_JP_V37P02A: Type = 418;
    pub const LEVEL_JP_V37P03A: Type = 419;
    pub const LEVEL_JP_V38P01A: Type = 420;
    pub const LEVEL_JP_V38P02A: Type = 421;
    pub const LEVEL_JP_V38P03A: Type = 422;
    pub const LEVEL_JP_V38P04A: Type = 423;
    pub const LEVEL_JP_V38P05A: Type = 424;
    pub const LEVEL_JP_V38P06A: Type = 425;
    pub const LEVEL_JP_V38P06C: Type = 426;
    pub const LEVEL_JP_V38P06D: Type = 427;
    pub const LEVEL_JP_V38P07A: Type = 428;
    pub const LEVEL_JP_V38P08A: Type = 429;
    pub const LEVEL_JP_V38P09A: Type = 430;
    pub const LEVEL_JP_V38P10A: Type = 431;
    pub const LEVEL_JP_V38P11A: Type = 432;
    pub const LEVEL_JP_V39P01A: Type = 433;
    pub const LEVEL_JP_V39P02A: Type = 434;
    pub const LEVEL_JP_V39P03A: Type = 435;
}
pub mod script_object_id_na {
    pub type Type = crate::ctypes::c_uint;
    pub const OBJECT_NA_NULL_0x0: Type = 0;
    pub const OBJECT_NA_NULL_0x1: Type = 1;
    pub const OBJECT_NA_NULL_0x2: Type = 2;
    pub const OBJECT_NA_NULL_0x3: Type = 3;
    pub const OBJECT_NA_NULL_0x4: Type = 4;
    pub const OBJECT_NA_NULL_0x5: Type = 5;
    pub const OBJECT_NA_NULL_0x6: Type = 6;
    pub const OBJECT_NA_NULL_0x7: Type = 7;
    pub const OBJECT_NA_NULL_0x8: Type = 8;
    pub const OBJECT_NA_NULL_0x9: Type = 9;
    pub const OBJECT_NA_NULL_0xA: Type = 10;
    pub const OBJECT_NA_D01P11B1: Type = 11;
    pub const OBJECT_NA_D01P11B2_0xC: Type = 12;
    pub const OBJECT_NA_D01P11B2_0xD: Type = 13;
    pub const OBJECT_NA_D01P11B2_0xE: Type = 14;
    pub const OBJECT_NA_D01P11B2_0xF: Type = 15;
    pub const OBJECT_NA_D01P11B3: Type = 16;
    pub const OBJECT_NA_D02P31A1: Type = 17;
    pub const OBJECT_NA_D04P11A1_0x12: Type = 18;
    pub const OBJECT_NA_D04P11A1_0x13: Type = 19;
    pub const OBJECT_NA_D05P31A1_0x14: Type = 20;
    pub const OBJECT_NA_D05P31A1_0x15: Type = 21;
    pub const OBJECT_NA_D05P31A1_0x16: Type = 22;
    pub const OBJECT_NA_D08P11A1: Type = 23;
    pub const OBJECT_NA_D09P11A1_0x18: Type = 24;
    pub const OBJECT_NA_D09P11A1_0x19: Type = 25;
    pub const OBJECT_NA_D09P11A2_0x1A: Type = 26;
    pub const OBJECT_NA_D09P11A2_0x1B: Type = 27;
    pub const OBJECT_NA_D09P11A2_0x1C: Type = 28;
    pub const OBJECT_NA_D09P11A3_0x1D: Type = 29;
    pub const OBJECT_NA_D09P11A3_0x1E: Type = 30;
    pub const OBJECT_NA_D09P11A3_0x1F: Type = 31;
    pub const OBJECT_NA_D12P41A1: Type = 32;
    pub const OBJECT_NA_D12P41A2: Type = 33;
    pub const OBJECT_NA_D16P31A1_0x22: Type = 34;
    pub const OBJECT_NA_D16P31A1_0x23: Type = 35;
    pub const OBJECT_NA_D16P31A1_0x24: Type = 36;
    pub const OBJECT_NA_D16P31A2_0x25: Type = 37;
    pub const OBJECT_NA_D16P31A2_0x26: Type = 38;
    pub const OBJECT_NA_D16P31A2_0x27: Type = 39;
    pub const OBJECT_NA_D16P31A3_0x28: Type = 40;
    pub const OBJECT_NA_D16P31A3_0x29: Type = 41;
    pub const OBJECT_NA_D16P31A3_0x2A: Type = 42;
    pub const OBJECT_NA_D16P31A4_0x2B: Type = 43;
    pub const OBJECT_NA_D16P31A4_0x2C: Type = 44;
    pub const OBJECT_NA_D16P31A4_0x2D: Type = 45;
    pub const OBJECT_NA_D16P31A5_0x2E: Type = 46;
    pub const OBJECT_NA_D16P31A5_0x2F: Type = 47;
    pub const OBJECT_NA_D16P31A5_0x30: Type = 48;
    pub const OBJECT_NA_D16P31A6_0x31: Type = 49;
    pub const OBJECT_NA_D16P31A6_0x32: Type = 50;
    pub const OBJECT_NA_D16P31A6_0x33: Type = 51;
    pub const OBJECT_NA_D16P31A7_0x34: Type = 52;
    pub const OBJECT_NA_D16P31A7_0x35: Type = 53;
    pub const OBJECT_NA_D16P31A7_0x36: Type = 54;
    pub const OBJECT_NA_D16P31A8_0x37: Type = 55;
    pub const OBJECT_NA_D16P31A8_0x38: Type = 56;
    pub const OBJECT_NA_D16P31A8_0x39: Type = 57;
    pub const OBJECT_NA_D16P31A9_0x3A: Type = 58;
    pub const OBJECT_NA_D16P31A9_0x3B: Type = 59;
    pub const OBJECT_NA_D16P31A9_0x3C: Type = 60;
    pub const OBJECT_NA_D21P41A1_0x3D: Type = 61;
    pub const OBJECT_NA_D21P41A1_0x3E: Type = 62;
    pub const OBJECT_NA_D21P41A1_0x3F: Type = 63;
    pub const OBJECT_NA_D21P41A2: Type = 64;
    pub const OBJECT_NA_D28P32A1: Type = 65;
    pub const OBJECT_NA_D28P33A1: Type = 66;
    pub const OBJECT_NA_D28P33A2: Type = 67;
    pub const OBJECT_NA_D28P33A3: Type = 68;
    pub const OBJECT_NA_D28P33A4: Type = 69;
    pub const OBJECT_NA_D28P33A5: Type = 70;
    pub const OBJECT_NA_D28P33A6: Type = 71;
    pub const OBJECT_NA_D28P33A7: Type = 72;
    pub const OBJECT_NA_D28P33A8: Type = 73;
    pub const OBJECT_NA_D28P34A1: Type = 74;
    pub const OBJECT_NA_D28P34A2_0x4B: Type = 75;
    pub const OBJECT_NA_D28P34A2_0x4C: Type = 76;
    pub const OBJECT_NA_D28P34A2_0x4D: Type = 77;
    pub const OBJECT_NA_D30P33A4_0x4E: Type = 78;
    pub const OBJECT_NA_D30P33A4_0x4F: Type = 79;
    pub const OBJECT_NA_D30P33A4_0x50: Type = 80;
    pub const OBJECT_NA_D31P31A1: Type = 81;
    pub const OBJECT_NA_D32P11A1: Type = 82;
    pub const OBJECT_NA_D32P14A1: Type = 83;
    pub const OBJECT_NA_D32P44A1: Type = 84;
    pub const OBJECT_NA_D32P44A2: Type = 85;
    pub const OBJECT_NA_D32P44A3: Type = 86;
    pub const OBJECT_NA_D32P44A4: Type = 87;
    pub const OBJECT_NA_D32P44A5: Type = 88;
    pub const OBJECT_NA_D34P41A1: Type = 89;
    pub const OBJECT_NA_D39P41A1: Type = 90;
    pub const OBJECT_NA_D79P41A1_0x5B: Type = 91;
    pub const OBJECT_NA_D79P41A1_0x5C: Type = 92;
    pub const OBJECT_NA_G01P01A1: Type = 93;
    pub const OBJECT_NA_G01P01A2: Type = 94;
    pub const OBJECT_NA_G01P01A3: Type = 95;
    pub const OBJECT_NA_G01P01C1: Type = 96;
    pub const OBJECT_NA_G01P01C2: Type = 97;
    pub const OBJECT_NA_G01P01C3: Type = 98;
    pub const OBJECT_NA_G01P01C4: Type = 99;
    pub const OBJECT_NA_G01P03A1_0x64: Type = 100;
    pub const OBJECT_NA_G01P03A1_0x65: Type = 101;
    pub const OBJECT_NA_G01P03A1_0x66: Type = 102;
    pub const OBJECT_NA_G01P03A1_0x67: Type = 103;
    pub const OBJECT_NA_G01P03A2_0x68: Type = 104;
    pub const OBJECT_NA_G01P03A2_0x69: Type = 105;
    pub const OBJECT_NA_G01P05A1: Type = 106;
    pub const OBJECT_NA_G01P06B1: Type = 107;
    pub const OBJECT_NA_G01P07A1_0x6C: Type = 108;
    pub const OBJECT_NA_G01P07A1_0x6D: Type = 109;
    pub const OBJECT_NA_G01P07A1_0x6E: Type = 110;
    pub const OBJECT_NA_H01P99D1: Type = 111;
    pub const OBJECT_NA_H02P99A1_0x70: Type = 112;
    pub const OBJECT_NA_H02P99A1_0x71: Type = 113;
    pub const OBJECT_NA_H02P99A1_0x72: Type = 114;
    pub const OBJECT_NA_H02P99C1: Type = 115;
    pub const OBJECT_NA_H02P99C2_0x74: Type = 116;
    pub const OBJECT_NA_H02P99C2_0x75: Type = 117;
    pub const OBJECT_NA_H02P99C2_0x76: Type = 118;
    pub const OBJECT_NA_H02P99C4: Type = 119;
    pub const OBJECT_NA_H02P99C5: Type = 120;
    pub const OBJECT_NA_H02P99C6: Type = 121;
    pub const OBJECT_NA_P01P01A1: Type = 122;
    pub const OBJECT_NA_P02P01A1_0x7B: Type = 123;
    pub const OBJECT_NA_P02P01A1_0x7C: Type = 124;
    pub const OBJECT_NA_P02P01A1_0x7D: Type = 125;
    pub const OBJECT_NA_P02P01A1_0x7E: Type = 126;
    pub const OBJECT_NA_P03P01A1: Type = 127;
    pub const OBJECT_NA_P03P02A1_0x80: Type = 128;
    pub const OBJECT_NA_P03P02A1_0x81: Type = 129;
    pub const OBJECT_NA_P03P02A1_0x82: Type = 130;
    pub const OBJECT_NA_P03P02A1_0x83: Type = 131;
    pub const OBJECT_NA_P03P02A1_0x84: Type = 132;
    pub const OBJECT_NA_P03P02A2: Type = 133;
    pub const OBJECT_NA_P05P01A1: Type = 134;
    pub const OBJECT_NA_P05P03A1_0x87: Type = 135;
    pub const OBJECT_NA_P05P03A1_0x88: Type = 136;
    pub const OBJECT_NA_P05P03A1_0x89: Type = 137;
    pub const OBJECT_NA_P05P03A2_0x8A: Type = 138;
    pub const OBJECT_NA_P05P03A2_0x8B: Type = 139;
    pub const OBJECT_NA_P05P03A2_0x8C: Type = 140;
    pub const OBJECT_NA_P09P01A1_0x8D: Type = 141;
    pub const OBJECT_NA_P09P01A1_0x8E: Type = 142;
    pub const OBJECT_NA_P09P01A1_0x8F: Type = 143;
    pub const OBJECT_NA_P09P01A2: Type = 144;
    pub const OBJECT_NA_P11P01A2: Type = 145;
    pub const OBJECT_NA_P11P01A3: Type = 146;
    pub const OBJECT_NA_P12P01A1_0x93: Type = 147;
    pub const OBJECT_NA_P12P01A1_0x94: Type = 148;
    pub const OBJECT_NA_P12P01A1_0x95: Type = 149;
    pub const OBJECT_NA_P12P01A1_0x96: Type = 150;
    pub const OBJECT_NA_P12P01A1_0x97: Type = 151;
    pub const OBJECT_NA_P12P01A1_0x98: Type = 152;
    pub const OBJECT_NA_P14P01A1: Type = 153;
    pub const OBJECT_NA_S01P01A1: Type = 154;
    pub const OBJECT_NA_S01P01A2: Type = 155;
    pub const OBJECT_NA_S01P04A1_0x9C: Type = 156;
    pub const OBJECT_NA_S01P04A1_0x9D: Type = 157;
    pub const OBJECT_NA_S01P04A1_0x9E: Type = 158;
    pub const OBJECT_NA_S01P04A1_0x9F: Type = 159;
    pub const OBJECT_NA_S01P04A1_0xA0: Type = 160;
    pub const OBJECT_NA_S01P04A1_0xA1: Type = 161;
    pub const OBJECT_NA_S01P04A1_0xA2: Type = 162;
    pub const OBJECT_NA_S01P04A1_0xA3: Type = 163;
    pub const OBJECT_NA_S01P04A1_0xA4: Type = 164;
    pub const OBJECT_NA_S05P02A1: Type = 165;
    pub const OBJECT_NA_S05P02A2: Type = 166;
    pub const OBJECT_NA_S05P02A3: Type = 167;
    pub const OBJECT_NA_S05P02B1: Type = 168;
    pub const OBJECT_NA_S05P03A1: Type = 169;
    pub const OBJECT_NA_S05P03A2: Type = 170;
    pub const OBJECT_NA_S05P04A1_0xAB: Type = 171;
    pub const OBJECT_NA_S05P04A1_0xAC: Type = 172;
    pub const OBJECT_NA_S08P01A1: Type = 173;
    pub const OBJECT_NA_T01P01A1: Type = 174;
    pub const OBJECT_NA_T01P01A2: Type = 175;
    pub const OBJECT_NA_T01P01A3: Type = 176;
    pub const OBJECT_NA_T01P01A4: Type = 177;
    pub const OBJECT_NA_T01P01A5: Type = 178;
    pub const OBJECT_NA_T01P01A6: Type = 179;
    pub const OBJECT_NA_T01P04A1: Type = 180;
    pub const OBJECT_NA_V01P02A1: Type = 181;
    pub const OBJECT_NA_V01P05B1_0xB6: Type = 182;
    pub const OBJECT_NA_V01P05B1_0xB7: Type = 183;
    pub const OBJECT_NA_V01P05B1_0xB8: Type = 184;
    pub const OBJECT_NA_V01P05B1_0xB9: Type = 185;
    pub const OBJECT_NA_V01P05B1_0xBA: Type = 186;
    pub const OBJECT_NA_V01P05B1_0xBB: Type = 187;
    pub const OBJECT_NA_V01P05B1_0xBC: Type = 188;
    pub const OBJECT_NA_V01P05B2: Type = 189;
    pub const OBJECT_NA_V01P05B3: Type = 190;
    pub const OBJECT_NA_V01P07B1_0xBF: Type = 191;
    pub const OBJECT_NA_V01P07B1_0xC0: Type = 192;
    pub const OBJECT_NA_V03P03A1_0xC1: Type = 193;
    pub const OBJECT_NA_V03P03A1_0xC2: Type = 194;
    pub const OBJECT_NA_V03P03A2: Type = 195;
    pub const OBJECT_NA_V03P06A1_0xC4: Type = 196;
    pub const OBJECT_NA_V03P06A1_0xC5: Type = 197;
    pub const OBJECT_NA_V03P06A1_0xC6: Type = 198;
    pub const OBJECT_NA_V03P06A1_0xC7: Type = 199;
    pub const OBJECT_NA_V03P06A2_0xC8: Type = 200;
    pub const OBJECT_NA_V03P06A2_0xC9: Type = 201;
    pub const OBJECT_NA_V03P06A2_0xCA: Type = 202;
    pub const OBJECT_NA_V03P06A2_0xCB: Type = 203;
    pub const OBJECT_NA_V03P11A1: Type = 204;
    pub const OBJECT_NA_V04P03A1: Type = 205;
    pub const OBJECT_NA_V05P02A1: Type = 206;
    pub const OBJECT_NA_V05P03A1: Type = 207;
    pub const OBJECT_NA_V05P03A2: Type = 208;
    pub const OBJECT_NA_V10P01C1_0xD1: Type = 209;
    pub const OBJECT_NA_V10P01C1_0xD2: Type = 210;
    pub const OBJECT_NA_V10P01C1_0xD3: Type = 211;
    pub const OBJECT_NA_V10P01C1_0xD4: Type = 212;
    pub const OBJECT_NA_V10P01C1_0xD5: Type = 213;
    pub const OBJECT_NA_V10P01C1_0xD6: Type = 214;
    pub const OBJECT_NA_V10P01C2_0xD7: Type = 215;
    pub const OBJECT_NA_V10P01C2_0xD8: Type = 216;
    pub const OBJECT_NA_V10P01C2_0xD9: Type = 217;
    pub const OBJECT_NA_V10P01C2_0xDA: Type = 218;
    pub const OBJECT_NA_V10P01C2_0xDB: Type = 219;
    pub const OBJECT_NA_V10P01C2_0xDC: Type = 220;
    pub const OBJECT_NA_V10P01C3_0xDD: Type = 221;
    pub const OBJECT_NA_V10P01C3_0xDE: Type = 222;
    pub const OBJECT_NA_V10P01C3_0xDF: Type = 223;
    pub const OBJECT_NA_V10P01C3_0xE0: Type = 224;
    pub const OBJECT_NA_V10P01C3_0xE1: Type = 225;
    pub const OBJECT_NA_V10P01C3_0xE2: Type = 226;
    pub const OBJECT_NA_V10P03C1: Type = 227;
    pub const OBJECT_NA_V12P01A1: Type = 228;
    pub const OBJECT_NA_V12P01A2: Type = 229;
    pub const OBJECT_NA_V12P01A3: Type = 230;
    pub const OBJECT_NA_V12P01A4: Type = 231;
    pub const OBJECT_NA_V12P01A5: Type = 232;
    pub const OBJECT_NA_V12P01A6: Type = 233;
    pub const OBJECT_NA_V12P01A7: Type = 234;
    pub const OBJECT_NA_V12P01A8: Type = 235;
    pub const OBJECT_NA_V14P03A1: Type = 236;
    pub const OBJECT_NA_V14P03A2: Type = 237;
    pub const OBJECT_NA_V14P04A1: Type = 238;
    pub const OBJECT_NA_V14P04A2: Type = 239;
    pub const OBJECT_NA_V15P01A1_0xF0: Type = 240;
    pub const OBJECT_NA_V15P01A1_0xF1: Type = 241;
    pub const OBJECT_NA_V15P01A1_0xF2: Type = 242;
    pub const OBJECT_NA_V15P01A1_0xF3: Type = 243;
    pub const OBJECT_NA_V15P01A1_0xF4: Type = 244;
    pub const OBJECT_NA_V15P01A1_0xF5: Type = 245;
    pub const OBJECT_NA_V15P01A2_0xF6: Type = 246;
    pub const OBJECT_NA_V15P01A2_0xF7: Type = 247;
    pub const OBJECT_NA_V15P01A2_0xF8: Type = 248;
    pub const OBJECT_NA_V15P01A2_0xF9: Type = 249;
    pub const OBJECT_NA_V15P01A2_0xFA: Type = 250;
    pub const OBJECT_NA_V15P01A2_0xFB: Type = 251;
    pub const OBJECT_NA_V15P01A3_0xFC: Type = 252;
    pub const OBJECT_NA_V15P01A3_0xFD: Type = 253;
    pub const OBJECT_NA_V15P01A3_0xFE: Type = 254;
    pub const OBJECT_NA_V15P01A3_0xFF: Type = 255;
    pub const OBJECT_NA_V15P01A3_0x100: Type = 256;
    pub const OBJECT_NA_V15P01A3_0x101: Type = 257;
    pub const OBJECT_NA_V15P01A3_0x102: Type = 258;
    pub const OBJECT_NA_V15P01A3_0x103: Type = 259;
    pub const OBJECT_NA_V15P01A3_0x104: Type = 260;
    pub const OBJECT_NA_V15P01A3_0x105: Type = 261;
    pub const OBJECT_NA_V15P01A3_0x106: Type = 262;
    pub const OBJECT_NA_V15P01A3_0x107: Type = 263;
    pub const OBJECT_NA_V15P01A4: Type = 264;
    pub const OBJECT_NA_V19P02A1_0x109: Type = 265;
    pub const OBJECT_NA_V19P02A1_0x10A: Type = 266;
    pub const OBJECT_NA_V19P02A1_0x10B: Type = 267;
    pub const OBJECT_NA_V19P05A1: Type = 268;
    pub const OBJECT_NA_V19P06A1_0x10D: Type = 269;
    pub const OBJECT_NA_V19P06A1_0x10E: Type = 270;
    pub const OBJECT_NA_V19P06A1_0x10F: Type = 271;
    pub const OBJECT_NA_V21P02A1: Type = 272;
    pub const OBJECT_NA_V22P01A1: Type = 273;
    pub const OBJECT_NA_V22P02A1_0x112: Type = 274;
    pub const OBJECT_NA_V22P02A1_0x113: Type = 275;
    pub const OBJECT_NA_V22P02A1_0x114: Type = 276;
    pub const OBJECT_NA_V22P02A1_0x115: Type = 277;
    pub const OBJECT_NA_V22P02A2: Type = 278;
    pub const OBJECT_NA_V22P03A1: Type = 279;
    pub const OBJECT_NA_V22P03A2: Type = 280;
    pub const OBJECT_NA_V23P04A1_0x119: Type = 281;
    pub const OBJECT_NA_V23P04A1_0x11A: Type = 282;
    pub const OBJECT_NA_V23P04A1_0x11B: Type = 283;
    pub const OBJECT_NA_V23P04A2_0x11C: Type = 284;
    pub const OBJECT_NA_V23P04A2_0x11D: Type = 285;
    pub const OBJECT_NA_V23P04A2_0x11E: Type = 286;
    pub const OBJECT_NA_V24P01A1_0x11F: Type = 287;
    pub const OBJECT_NA_V24P01A1_0x120: Type = 288;
    pub const OBJECT_NA_V24P01A1_0x121: Type = 289;
    pub const OBJECT_NA_V24P01A2: Type = 290;
    pub const OBJECT_NA_V24P01A3: Type = 291;
    pub const OBJECT_NA_V24P02A1_0x124: Type = 292;
    pub const OBJECT_NA_V24P02A1_0x125: Type = 293;
    pub const OBJECT_NA_V24P02A2: Type = 294;
    pub const OBJECT_NA_V24P03A1_0x127: Type = 295;
    pub const OBJECT_NA_V24P03A1_0x128: Type = 296;
    pub const OBJECT_NA_V24P03A2_0x129: Type = 297;
    pub const OBJECT_NA_V24P03A2_0x12A: Type = 298;
    pub const OBJECT_NA_V24P03A3: Type = 299;
    pub const OBJECT_NA_V24P04A1: Type = 300;
    pub const OBJECT_NA_V24P04A2: Type = 301;
    pub const OBJECT_NA_V24P04A3: Type = 302;
    pub const OBJECT_NA_V24P05A1: Type = 303;
    pub const OBJECT_NA_V24P05A2: Type = 304;
    pub const OBJECT_NA_V24P05A3_0x131: Type = 305;
    pub const OBJECT_NA_V24P05A3_0x132: Type = 306;
    pub const OBJECT_NA_V24P05A4_0x133: Type = 307;
    pub const OBJECT_NA_V24P05A4_0x134: Type = 308;
    pub const OBJECT_NA_V24P05A5_0x135: Type = 309;
    pub const OBJECT_NA_V24P05A5_0x136: Type = 310;
    pub const OBJECT_NA_V24P06A1: Type = 311;
    pub const OBJECT_NA_V25P03A1: Type = 312;
    pub const OBJECT_NA_V25P04A1_0x139: Type = 313;
    pub const OBJECT_NA_V25P04A1_0x13A: Type = 314;
    pub const OBJECT_NA_V25P04A1_0x13B: Type = 315;
    pub const OBJECT_NA_V25P04A1_0x13C: Type = 316;
    pub const OBJECT_NA_V25P04A1_0x13D: Type = 317;
    pub const OBJECT_NA_V25P04A2_0x13E: Type = 318;
    pub const OBJECT_NA_V25P04A2_0x13F: Type = 319;
    pub const OBJECT_NA_V25P04A2_0x140: Type = 320;
    pub const OBJECT_NA_V25P04A2_0x141: Type = 321;
    pub const OBJECT_NA_V25P04A2_0x142: Type = 322;
    pub const OBJECT_NA_V26P04A1_0x143: Type = 323;
    pub const OBJECT_NA_V26P04A1_0x144: Type = 324;
    pub const OBJECT_NA_V26P04A1_0x145: Type = 325;
    pub const OBJECT_NA_V26P04A2_0x146: Type = 326;
    pub const OBJECT_NA_V26P04A2_0x147: Type = 327;
    pub const OBJECT_NA_V26P04A2_0x148: Type = 328;
    pub const OBJECT_NA_V26P05A1_0x149: Type = 329;
    pub const OBJECT_NA_V26P05A1_0x14A: Type = 330;
    pub const OBJECT_NA_V26P05A1_0x14B: Type = 331;
    pub const OBJECT_NA_V26P07A1_0x14C: Type = 332;
    pub const OBJECT_NA_V26P07A1_0x14D: Type = 333;
    pub const OBJECT_NA_V26P07A1_0x14E: Type = 334;
    pub const OBJECT_NA_V26P10A1: Type = 335;
    pub const OBJECT_NA_S13P01A1: Type = 336;
    pub const OBJECT_NA_S13P02A1: Type = 337;
    pub const OBJECT_NA_S13P02A2: Type = 338;
    pub const OBJECT_NA_S13P03A1_0x153: Type = 339;
    pub const OBJECT_NA_S13P03A1_0x154: Type = 340;
    pub const OBJECT_NA_S13P03A1_0x155: Type = 341;
    pub const OBJECT_NA_S13P03A1_0x156: Type = 342;
    pub const OBJECT_NA_S13P03A1_0x157: Type = 343;
    pub const OBJECT_NA_S13P03A1_0x158: Type = 344;
    pub const OBJECT_NA_S13P03A1_0x159: Type = 345;
    pub const OBJECT_NA_S13P03A1_0x15A: Type = 346;
    pub const OBJECT_NA_S13P03A1_0x15B: Type = 347;
    pub const OBJECT_NA_S13P03A1_0x15C: Type = 348;
    pub const OBJECT_NA_S13P03A2_0x15D: Type = 349;
    pub const OBJECT_NA_S13P03A2_0x15E: Type = 350;
    pub const OBJECT_NA_S13P05A1: Type = 351;
    pub const OBJECT_NA_S13P05A2_0x160: Type = 352;
    pub const OBJECT_NA_S13P05A2_0x161: Type = 353;
    pub const OBJECT_NA_S13P08A1: Type = 354;
    pub const OBJECT_NA_G01P10C1: Type = 355;
    pub const OBJECT_NA_P15P01A1: Type = 356;
    pub const OBJECT_NA_P20P01A1: Type = 357;
    pub const OBJECT_NA_P20P01A2: Type = 358;
    pub const OBJECT_NA_P20P01A3: Type = 359;
    pub const OBJECT_NA_D45P31A1: Type = 360;
    pub const OBJECT_NA_D45P31A2: Type = 361;
    pub const OBJECT_NA_D45P31A3: Type = 362;
    pub const OBJECT_NA_D45P31A4: Type = 363;
    pub const OBJECT_NA_D45P31A5: Type = 364;
    pub const OBJECT_NA_P18P01A1: Type = 365;
    pub const OBJECT_NA_P18P01A2: Type = 366;
    pub const OBJECT_NA_P18P01A3: Type = 367;
    pub const OBJECT_NA_P18P01A4: Type = 368;
    pub const OBJECT_NA_P19P02A1: Type = 369;
    pub const OBJECT_NA_P19P02A2: Type = 370;
    pub const OBJECT_NA_P19P02A3: Type = 371;
    pub const OBJECT_NA_P20P02A1_0x174: Type = 372;
    pub const OBJECT_NA_P20P02A1_0x175: Type = 373;
    pub const OBJECT_NA_P21P02A1: Type = 374;
    pub const OBJECT_NA_P21P02A2: Type = 375;
    pub const OBJECT_NA_P22P01A1: Type = 376;
    pub const OBJECT_NA_S05P02C1: Type = 377;
    pub const OBJECT_NA_D73P28A1: Type = 378;
    pub const OBJECT_NA_D73P28A2: Type = 379;
    pub const OBJECT_NA_D73P28A3: Type = 380;
    pub const OBJECT_NA_D73P28A4: Type = 381;
    pub const OBJECT_NA_P17P01A1: Type = 382;
    pub const OBJECT_NA_P01P04A1: Type = 383;
    pub const OBJECT_NA_S14P01A1: Type = 384;
    pub const OBJECT_NA_S14P01A2: Type = 385;
    pub const OBJECT_NA_S14P01A3: Type = 386;
    pub const OBJECT_NA_S14P01A4_0x183: Type = 387;
    pub const OBJECT_NA_S14P01A4_0x184: Type = 388;
    pub const OBJECT_NA_S14P01A4_0x185: Type = 389;
    pub const OBJECT_NA_V37P03A1: Type = 390;
    pub const OBJECT_NA_D73P28A5: Type = 391;
    pub const OBJECT_NA_D73P28A6: Type = 392;
    pub const OBJECT_NA_D73P28A7: Type = 393;
    pub const OBJECT_NA_D73P28A8: Type = 394;
    pub const OBJECT_NA_D73P28A9: Type = 395;
    pub const OBJECT_NA_D01P11A1: Type = 396;
    pub const OBJECT_NA_D50P11A1: Type = 397;
    pub const OBJECT_NA_D73P41A1: Type = 398;
    pub const OBJECT_NA_D73P41A2: Type = 399;
    pub const OBJECT_NA_D73P41A3: Type = 400;
    pub const OBJECT_NA_D73P41A4: Type = 401;
    pub const OBJECT_NA_D73P41A5: Type = 402;
    pub const OBJECT_NA_D73P41A6: Type = 403;
    pub const OBJECT_NA_D51P11A1: Type = 404;
    pub const OBJECT_NA_P24P01A1_0x195: Type = 405;
    pub const OBJECT_NA_P24P01A1_0x196: Type = 406;
    pub const OBJECT_NA_D51P41A1: Type = 407;
    pub const OBJECT_NA_D51P41A2: Type = 408;
    pub const OBJECT_NA_D51P41A3: Type = 409;
    pub const OBJECT_NA_D52P32A1: Type = 410;
    pub const OBJECT_NA_D52P11A1_0x19B: Type = 411;
    pub const OBJECT_NA_D52P11A1_0x19C: Type = 412;
    pub const OBJECT_NA_D52P11A1_0x19D: Type = 413;
    pub const OBJECT_NA_D52P11A2_0x19E: Type = 414;
    pub const OBJECT_NA_D52P11A2_0x19F: Type = 415;
    pub const OBJECT_NA_D52P11A3_0x1A0: Type = 416;
    pub const OBJECT_NA_D52P11A3_0x1A1: Type = 417;
    pub const OBJECT_NA_S20P01A1: Type = 418;
    pub const OBJECT_NA_D52P32A2: Type = 419;
    pub const OBJECT_NA_P26P01A1: Type = 420;
    pub const OBJECT_NA_P26P01A2: Type = 421;
    pub const OBJECT_NA_P26P01A3: Type = 422;
    pub const OBJECT_NA_V39P03A1: Type = 423;
    pub const OBJECT_NA_V39P03A2: Type = 424;
    pub const OBJECT_NA_D57P41A1_0x1A9: Type = 425;
    pub const OBJECT_NA_D57P41A1_0x1AA: Type = 426;
    pub const OBJECT_NA_D57P41A1_0x1AB: Type = 427;
    pub const OBJECT_NA_D57P42A1_0x1AC: Type = 428;
    pub const OBJECT_NA_D57P42A1_0x1AD: Type = 429;
    pub const OBJECT_NA_D57P42A2_0x1AE: Type = 430;
    pub const OBJECT_NA_D57P42A2_0x1AF: Type = 431;
    pub const OBJECT_NA_D57P43A1_0x1B0: Type = 432;
    pub const OBJECT_NA_D57P43A1_0x1B1: Type = 433;
    pub const OBJECT_NA_S20P01A2: Type = 434;
    pub const OBJECT_NA_V38P06A1: Type = 435;
    pub const OBJECT_NA_V38P03A1: Type = 436;
    pub const OBJECT_NA_D56P41A1: Type = 437;
    pub const OBJECT_NA_D57P44A1: Type = 438;
    pub const OBJECT_NA_V37P01A1: Type = 439;
    pub const OBJECT_NA_V38P11A1: Type = 440;
    pub const OBJECT_NA_D52P32A3: Type = 441;
    pub const OBJECT_NA_D53P41C1: Type = 442;
    pub const OBJECT_NA_D57P42A3: Type = 443;
    pub const OBJECT_NA_P19P02A4: Type = 444;
    pub const OBJECT_NA_D52P32A4: Type = 445;
    pub const OBJECT_NA_D52P32A5: Type = 446;
    pub const OBJECT_NA_D52P32A6: Type = 447;
    pub const OBJECT_NA_D52P32A7: Type = 448;
    pub const OBJECT_NA_D53P41A1: Type = 449;
    pub const OBJECT_NA_D55P41A1_0x1C2: Type = 450;
    pub const OBJECT_NA_D55P41A1_0x1C3: Type = 451;
    pub const OBJECT_NA_S17P01A1: Type = 452;
    pub const OBJECT_NA_S17P02A1: Type = 453;
    pub const OBJECT_NA_S17P02A2: Type = 454;
    pub const OBJECT_NA_S17P02A3: Type = 455;
    pub const OBJECT_NA_S17P02A4: Type = 456;
    pub const OBJECT_NA_S17P02A5: Type = 457;
    pub const OBJECT_NA_S17P02A6: Type = 458;
    pub const OBJECT_NA_S17P02A7: Type = 459;
    pub const OBJECT_NA_S17P02A8: Type = 460;
    pub const OBJECT_NA_S17P02A9: Type = 461;
    pub const OBJECT_NA_S17P02B1: Type = 462;
    pub const OBJECT_NA_S17P02B2: Type = 463;
    pub const OBJECT_NA_S17P02B3: Type = 464;
    pub const OBJECT_NA_S17P02B4: Type = 465;
    pub const OBJECT_NA_S17P02B5: Type = 466;
    pub const OBJECT_NA_S17P02B6: Type = 467;
    pub const OBJECT_NA_S17P02B7: Type = 468;
    pub const OBJECT_NA_S18P01A1: Type = 469;
    pub const OBJECT_NA_S18P01A2: Type = 470;
    pub const OBJECT_NA_S18P01A3: Type = 471;
    pub const OBJECT_NA_S18P01A4: Type = 472;
    pub const OBJECT_NA_V38P07A1: Type = 473;
    pub const OBJECT_NA_V38P07B1: Type = 474;
    pub const OBJECT_NA_V38P07C1: Type = 475;
    pub const OBJECT_NA_V38P07C2: Type = 476;
    pub const OBJECT_NA_V38P07C3: Type = 477;
    pub const OBJECT_NA_V38P07C4: Type = 478;
    pub const OBJECT_NA_V38P07C5: Type = 479;
    pub const OBJECT_NA_V38P07D1: Type = 480;
    pub const OBJECT_NA_V38P07D2: Type = 481;
    pub const OBJECT_NA_V38P07D3: Type = 482;
    pub const OBJECT_NA_V38P07D4: Type = 483;
    pub const OBJECT_NA_V38P07D5: Type = 484;
    pub const OBJECT_NA_V38P07D6: Type = 485;
    pub const OBJECT_NA_V38P08A1: Type = 486;
    pub const OBJECT_NA_V38P08B1: Type = 487;
    pub const OBJECT_NA_V38P08B2: Type = 488;
    pub const OBJECT_NA_V38P08C1: Type = 489;
    pub const OBJECT_NA_V38P08C2: Type = 490;
    pub const OBJECT_NA_V38P08C3: Type = 491;
    pub const OBJECT_NA_V38P08C4: Type = 492;
    pub const OBJECT_NA_V38P08C5: Type = 493;
    pub const OBJECT_NA_V38P08C6: Type = 494;
    pub const OBJECT_NA_V38P08D1: Type = 495;
    pub const OBJECT_NA_V38P08D2: Type = 496;
    pub const OBJECT_NA_V38P08D3: Type = 497;
    pub const OBJECT_NA_V38P08D4: Type = 498;
    pub const OBJECT_NA_V38P08D5: Type = 499;
    pub const OBJECT_NA_V38P08D6: Type = 500;
    pub const OBJECT_NA_V38P10A1: Type = 501;
    pub const OBJECT_NA_V38P10A2: Type = 502;
    pub const OBJECT_NA_V38P10A3: Type = 503;
    pub const OBJECT_NA_V38P10A4: Type = 504;
    pub const OBJECT_NA_V38P10A5: Type = 505;
    pub const OBJECT_NA_V38P10A6: Type = 506;
    pub const OBJECT_NA_V38P10A7: Type = 507;
    pub const OBJECT_NA_V38P10A8: Type = 508;
    pub const OBJECT_NA_V38P10A9: Type = 509;
    pub const OBJECT_NA_V38P10B1: Type = 510;
    pub const OBJECT_NA_V38P10B2: Type = 511;
    pub const OBJECT_NA_V38P10B3: Type = 512;
    pub const OBJECT_NA_V38P10B4: Type = 513;
    pub const OBJECT_NA_V38P10B5: Type = 514;
    pub const OBJECT_NA_V38P10B6: Type = 515;
    pub const OBJECT_NA_V39P01A1_0x204: Type = 516;
    pub const OBJECT_NA_V39P01A1_0x205: Type = 517;
    pub const OBJECT_NA_D56P11A1: Type = 518;
    pub const OBJECT_NA_D56P11A2_0x207: Type = 519;
    pub const OBJECT_NA_D56P11A2_0x208: Type = 520;
    pub const OBJECT_NA_D56P11A3_0x209: Type = 521;
    pub const OBJECT_NA_D56P11A3_0x20A: Type = 522;
    pub const OBJECT_NA_D56P11A3_0x20B: Type = 523;
    pub const OBJECT_NA_P26P01A4_0x20C: Type = 524;
    pub const OBJECT_NA_P26P01A4_0x20D: Type = 525;
    pub const OBJECT_NA_P26P01A4_0x20E: Type = 526;
    pub const OBJECT_NA_P26P01A4_0x20F: Type = 527;
    pub const OBJECT_NA_P26P01A4_0x210: Type = 528;
    pub const OBJECT_NA_P26P01A4_0x211: Type = 529;
    pub const OBJECT_NA_P26P01A4_0x212: Type = 530;
    pub const OBJECT_NA_G01P05A2: Type = 531;
    pub const OBJECT_NA_P17P02C1: Type = 532;
    pub const OBJECT_NA_S05P02A4: Type = 533;
    pub const OBJECT_NA_D45P31A6_0x216: Type = 534;
    pub const OBJECT_NA_D45P31A6_0x217: Type = 535;
    pub const OBJECT_NA_D57P43A2_0x218: Type = 536;
    pub const OBJECT_NA_D57P43A2_0x219: Type = 537;
    pub const OBJECT_NA_D57P43A2_0x21A: Type = 538;
    pub const OBJECT_NA_D57P43A2_0x21B: Type = 539;
    pub const OBJECT_NA_D57P43A3_0x21C: Type = 540;
    pub const OBJECT_NA_D57P43A3_0x21D: Type = 541;
    pub const OBJECT_NA_D57P43A3_0x21E: Type = 542;
    pub const OBJECT_NA_D57P43A3_0x21F: Type = 543;
    pub const OBJECT_NA_D52P32A8: Type = 544;
    pub const OBJECT_NA_D52P32A9: Type = 545;
    pub const OBJECT_NA_V37P02A1_0x222: Type = 546;
    pub const OBJECT_NA_V37P02A1_0x223: Type = 547;
    pub const OBJECT_NA_G01P09A1: Type = 548;
    pub const OBJECT_NA_G01P10A1: Type = 549;
    pub const OBJECT_NA_S13P02A3: Type = 550;
    pub const OBJECT_NA_D63P41A1: Type = 551;
    pub const OBJECT_NA_D63P41A2: Type = 552;
    pub const OBJECT_NA_D28P34A3: Type = 553;
    pub const OBJECT_NA_D30P33A5: Type = 554;
}
pub mod script_object_id_eu {
    pub type Type = crate::ctypes::c_uint;
    pub const OBJECT_EU_NULL_0x0: Type = 0;
    pub const OBJECT_EU_NULL_0x1: Type = 1;
    pub const OBJECT_EU_NULL_0x2: Type = 2;
    pub const OBJECT_EU_NULL_0x3: Type = 3;
    pub const OBJECT_EU_NULL_0x4: Type = 4;
    pub const OBJECT_EU_NULL_0x5: Type = 5;
    pub const OBJECT_EU_NULL_0x6: Type = 6;
    pub const OBJECT_EU_NULL_0x7: Type = 7;
    pub const OBJECT_EU_NULL_0x8: Type = 8;
    pub const OBJECT_EU_NULL_0x9: Type = 9;
    pub const OBJECT_EU_NULL_0xA: Type = 10;
    pub const OBJECT_EU_D01P11B1: Type = 11;
    pub const OBJECT_EU_D01P11B2_0xC: Type = 12;
    pub const OBJECT_EU_D01P11B2_0xD: Type = 13;
    pub const OBJECT_EU_D01P11B2_0xE: Type = 14;
    pub const OBJECT_EU_D01P11B2_0xF: Type = 15;
    pub const OBJECT_EU_D01P11B3: Type = 16;
    pub const OBJECT_EU_D02P31A1: Type = 17;
    pub const OBJECT_EU_D04P11A1_0x12: Type = 18;
    pub const OBJECT_EU_D04P11A1_0x13: Type = 19;
    pub const OBJECT_EU_D05P31A1_0x14: Type = 20;
    pub const OBJECT_EU_D05P31A1_0x15: Type = 21;
    pub const OBJECT_EU_D05P31A1_0x16: Type = 22;
    pub const OBJECT_EU_D08P11A1: Type = 23;
    pub const OBJECT_EU_D09P11A1_0x18: Type = 24;
    pub const OBJECT_EU_D09P11A1_0x19: Type = 25;
    pub const OBJECT_EU_D09P11A2_0x1A: Type = 26;
    pub const OBJECT_EU_D09P11A2_0x1B: Type = 27;
    pub const OBJECT_EU_D09P11A2_0x1C: Type = 28;
    pub const OBJECT_EU_D09P11A3_0x1D: Type = 29;
    pub const OBJECT_EU_D09P11A3_0x1E: Type = 30;
    pub const OBJECT_EU_D09P11A3_0x1F: Type = 31;
    pub const OBJECT_EU_D12P41A1: Type = 32;
    pub const OBJECT_EU_D12P41A2: Type = 33;
    pub const OBJECT_EU_D16P31A1_0x22: Type = 34;
    pub const OBJECT_EU_D16P31A1_0x23: Type = 35;
    pub const OBJECT_EU_D16P31A1_0x24: Type = 36;
    pub const OBJECT_EU_D16P31A2_0x25: Type = 37;
    pub const OBJECT_EU_D16P31A2_0x26: Type = 38;
    pub const OBJECT_EU_D16P31A2_0x27: Type = 39;
    pub const OBJECT_EU_D16P31A3_0x28: Type = 40;
    pub const OBJECT_EU_D16P31A3_0x29: Type = 41;
    pub const OBJECT_EU_D16P31A3_0x2A: Type = 42;
    pub const OBJECT_EU_D16P31A4_0x2B: Type = 43;
    pub const OBJECT_EU_D16P31A4_0x2C: Type = 44;
    pub const OBJECT_EU_D16P31A4_0x2D: Type = 45;
    pub const OBJECT_EU_D16P31A5_0x2E: Type = 46;
    pub const OBJECT_EU_D16P31A5_0x2F: Type = 47;
    pub const OBJECT_EU_D16P31A5_0x30: Type = 48;
    pub const OBJECT_EU_D16P31A6_0x31: Type = 49;
    pub const OBJECT_EU_D16P31A6_0x32: Type = 50;
    pub const OBJECT_EU_D16P31A6_0x33: Type = 51;
    pub const OBJECT_EU_D16P31A7_0x34: Type = 52;
    pub const OBJECT_EU_D16P31A7_0x35: Type = 53;
    pub const OBJECT_EU_D16P31A7_0x36: Type = 54;
    pub const OBJECT_EU_D16P31A8_0x37: Type = 55;
    pub const OBJECT_EU_D16P31A8_0x38: Type = 56;
    pub const OBJECT_EU_D16P31A8_0x39: Type = 57;
    pub const OBJECT_EU_D16P31A9_0x3A: Type = 58;
    pub const OBJECT_EU_D16P31A9_0x3B: Type = 59;
    pub const OBJECT_EU_D16P31A9_0x3C: Type = 60;
    pub const OBJECT_EU_D21P41A1_0x3D: Type = 61;
    pub const OBJECT_EU_D21P41A1_0x3E: Type = 62;
    pub const OBJECT_EU_D21P41A1_0x3F: Type = 63;
    pub const OBJECT_EU_D21P41A2: Type = 64;
    pub const OBJECT_EU_D28P32A1: Type = 65;
    pub const OBJECT_EU_D28P33A1: Type = 66;
    pub const OBJECT_EU_D28P33A2: Type = 67;
    pub const OBJECT_EU_D28P33A3: Type = 68;
    pub const OBJECT_EU_D28P33A4: Type = 69;
    pub const OBJECT_EU_D28P33A5: Type = 70;
    pub const OBJECT_EU_D28P33A6: Type = 71;
    pub const OBJECT_EU_D28P33A7: Type = 72;
    pub const OBJECT_EU_D28P33A8: Type = 73;
    pub const OBJECT_EU_D28P34A1: Type = 74;
    pub const OBJECT_EU_D28P34A2_0x4B: Type = 75;
    pub const OBJECT_EU_D28P34A2_0x4C: Type = 76;
    pub const OBJECT_EU_D28P34A2_0x4D: Type = 77;
    pub const OBJECT_EU_D30P33A4_0x4E: Type = 78;
    pub const OBJECT_EU_D30P33A4_0x4F: Type = 79;
    pub const OBJECT_EU_D30P33A4_0x50: Type = 80;
    pub const OBJECT_EU_D31P31A1: Type = 81;
    pub const OBJECT_EU_D32P11A1: Type = 82;
    pub const OBJECT_EU_D32P14A1: Type = 83;
    pub const OBJECT_EU_D32P44A1: Type = 84;
    pub const OBJECT_EU_D32P44A2: Type = 85;
    pub const OBJECT_EU_D32P44A3: Type = 86;
    pub const OBJECT_EU_D32P44A4: Type = 87;
    pub const OBJECT_EU_D32P44A5: Type = 88;
    pub const OBJECT_EU_D34P41A1: Type = 89;
    pub const OBJECT_EU_D39P41A1: Type = 90;
    pub const OBJECT_EU_D79P41A1_0x5B: Type = 91;
    pub const OBJECT_EU_D79P41A1_0x5C: Type = 92;
    pub const OBJECT_EU_G01P01A1: Type = 93;
    pub const OBJECT_EU_G01P01A2: Type = 94;
    pub const OBJECT_EU_G01P01A3: Type = 95;
    pub const OBJECT_EU_G01P01C1: Type = 96;
    pub const OBJECT_EU_G01P01C2: Type = 97;
    pub const OBJECT_EU_G01P01C3: Type = 98;
    pub const OBJECT_EU_G01P01C4: Type = 99;
    pub const OBJECT_EU_G01P03A1_0x64: Type = 100;
    pub const OBJECT_EU_G01P03A1_0x65: Type = 101;
    pub const OBJECT_EU_G01P03A1_0x66: Type = 102;
    pub const OBJECT_EU_G01P03A1_0x67: Type = 103;
    pub const OBJECT_EU_G01P03A2_0x68: Type = 104;
    pub const OBJECT_EU_G01P03A2_0x69: Type = 105;
    pub const OBJECT_EU_G01P05A1: Type = 106;
    pub const OBJECT_EU_G01P06B1: Type = 107;
    pub const OBJECT_EU_G01P07A1_0x6C: Type = 108;
    pub const OBJECT_EU_G01P07A1_0x6D: Type = 109;
    pub const OBJECT_EU_G01P07A1_0x6E: Type = 110;
    pub const OBJECT_EU_H01P99D1: Type = 111;
    pub const OBJECT_EU_H02P99A1_0x70: Type = 112;
    pub const OBJECT_EU_H02P99A1_0x71: Type = 113;
    pub const OBJECT_EU_H02P99A1_0x72: Type = 114;
    pub const OBJECT_EU_H02P99C1: Type = 115;
    pub const OBJECT_EU_H02P99C2_0x74: Type = 116;
    pub const OBJECT_EU_H02P99C2_0x75: Type = 117;
    pub const OBJECT_EU_H02P99C2_0x76: Type = 118;
    pub const OBJECT_EU_H02P99C4: Type = 119;
    pub const OBJECT_EU_H02P99C5: Type = 120;
    pub const OBJECT_EU_H02P99C6: Type = 121;
    pub const OBJECT_EU_P01P01A1: Type = 122;
    pub const OBJECT_EU_P02P01A1_0x7B: Type = 123;
    pub const OBJECT_EU_P02P01A1_0x7C: Type = 124;
    pub const OBJECT_EU_P02P01A1_0x7D: Type = 125;
    pub const OBJECT_EU_P02P01A1_0x7E: Type = 126;
    pub const OBJECT_EU_P03P01A1: Type = 127;
    pub const OBJECT_EU_P03P02A1_0x80: Type = 128;
    pub const OBJECT_EU_P03P02A1_0x81: Type = 129;
    pub const OBJECT_EU_P03P02A1_0x82: Type = 130;
    pub const OBJECT_EU_P03P02A1_0x83: Type = 131;
    pub const OBJECT_EU_P03P02A1_0x84: Type = 132;
    pub const OBJECT_EU_P03P02A2: Type = 133;
    pub const OBJECT_EU_P05P01A1: Type = 134;
    pub const OBJECT_EU_P05P03A1_0x87: Type = 135;
    pub const OBJECT_EU_P05P03A1_0x88: Type = 136;
    pub const OBJECT_EU_P05P03A1_0x89: Type = 137;
    pub const OBJECT_EU_P05P03A2_0x8A: Type = 138;
    pub const OBJECT_EU_P05P03A2_0x8B: Type = 139;
    pub const OBJECT_EU_P05P03A2_0x8C: Type = 140;
    pub const OBJECT_EU_P09P01A1_0x8D: Type = 141;
    pub const OBJECT_EU_P09P01A1_0x8E: Type = 142;
    pub const OBJECT_EU_P09P01A1_0x8F: Type = 143;
    pub const OBJECT_EU_P09P01A2: Type = 144;
    pub const OBJECT_EU_P11P01A2: Type = 145;
    pub const OBJECT_EU_P11P01A3: Type = 146;
    pub const OBJECT_EU_P12P01A1_0x93: Type = 147;
    pub const OBJECT_EU_P12P01A1_0x94: Type = 148;
    pub const OBJECT_EU_P12P01A1_0x95: Type = 149;
    pub const OBJECT_EU_P12P01A1_0x96: Type = 150;
    pub const OBJECT_EU_P12P01A1_0x97: Type = 151;
    pub const OBJECT_EU_P12P01A1_0x98: Type = 152;
    pub const OBJECT_EU_P14P01A1: Type = 153;
    pub const OBJECT_EU_S01P01A1: Type = 154;
    pub const OBJECT_EU_S01P01A2: Type = 155;
    pub const OBJECT_EU_S01P04A1_0x9C: Type = 156;
    pub const OBJECT_EU_S01P04A1_0x9D: Type = 157;
    pub const OBJECT_EU_S01P04A1_0x9E: Type = 158;
    pub const OBJECT_EU_S01P04A1_0x9F: Type = 159;
    pub const OBJECT_EU_S01P04A1_0xA0: Type = 160;
    pub const OBJECT_EU_S01P04A1_0xA1: Type = 161;
    pub const OBJECT_EU_S01P04A1_0xA2: Type = 162;
    pub const OBJECT_EU_S01P04A1_0xA3: Type = 163;
    pub const OBJECT_EU_S01P04A1_0xA4: Type = 164;
    pub const OBJECT_EU_S05P02A1: Type = 165;
    pub const OBJECT_EU_S05P02B1: Type = 166;
    pub const OBJECT_EU_S05P02C1: Type = 167;
    pub const OBJECT_EU_S05P02D1: Type = 168;
    pub const OBJECT_EU_S05P02E1: Type = 169;
    pub const OBJECT_EU_S05P02A2: Type = 170;
    pub const OBJECT_EU_S05P02B2: Type = 171;
    pub const OBJECT_EU_S05P02C2: Type = 172;
    pub const OBJECT_EU_S05P02D2: Type = 173;
    pub const OBJECT_EU_S05P02E2: Type = 174;
    pub const OBJECT_EU_S05P02A3: Type = 175;
    pub const OBJECT_EU_S05P02B3: Type = 176;
    pub const OBJECT_EU_S05P02C3: Type = 177;
    pub const OBJECT_EU_S05P02D3: Type = 178;
    pub const OBJECT_EU_S05P02E3: Type = 179;
    pub const OBJECT_EU_S05P02A4: Type = 180;
    pub const OBJECT_EU_S05P02B4: Type = 181;
    pub const OBJECT_EU_S05P02C4: Type = 182;
    pub const OBJECT_EU_S05P02D4: Type = 183;
    pub const OBJECT_EU_S05P02E4: Type = 184;
    pub const OBJECT_EU_S05P03A1: Type = 185;
    pub const OBJECT_EU_S05P03A2: Type = 186;
    pub const OBJECT_EU_S05P04A1_0xBB: Type = 187;
    pub const OBJECT_EU_S05P04A1_0xBC: Type = 188;
    pub const OBJECT_EU_S08P01A1: Type = 189;
    pub const OBJECT_EU_T01P01A1: Type = 190;
    pub const OBJECT_EU_T01P01A2: Type = 191;
    pub const OBJECT_EU_T01P01A3: Type = 192;
    pub const OBJECT_EU_T01P01A4: Type = 193;
    pub const OBJECT_EU_T01P01A5: Type = 194;
    pub const OBJECT_EU_T01P01A6: Type = 195;
    pub const OBJECT_EU_T01P04A1: Type = 196;
    pub const OBJECT_EU_V01P02A1: Type = 197;
    pub const OBJECT_EU_V01P05B1_0xC6: Type = 198;
    pub const OBJECT_EU_V01P05B1_0xC7: Type = 199;
    pub const OBJECT_EU_V01P05B1_0xC8: Type = 200;
    pub const OBJECT_EU_V01P05B1_0xC9: Type = 201;
    pub const OBJECT_EU_V01P05B1_0xCA: Type = 202;
    pub const OBJECT_EU_V01P05B1_0xCB: Type = 203;
    pub const OBJECT_EU_V01P05B1_0xCC: Type = 204;
    pub const OBJECT_EU_V01P05B2: Type = 205;
    pub const OBJECT_EU_V01P05B3: Type = 206;
    pub const OBJECT_EU_V01P07B1_0xCF: Type = 207;
    pub const OBJECT_EU_V01P07B1_0xD0: Type = 208;
    pub const OBJECT_EU_V03P03A1_0xD1: Type = 209;
    pub const OBJECT_EU_V03P03A1_0xD2: Type = 210;
    pub const OBJECT_EU_V03P03A2: Type = 211;
    pub const OBJECT_EU_V03P06A1_0xD4: Type = 212;
    pub const OBJECT_EU_V03P06A1_0xD5: Type = 213;
    pub const OBJECT_EU_V03P06A1_0xD6: Type = 214;
    pub const OBJECT_EU_V03P06A1_0xD7: Type = 215;
    pub const OBJECT_EU_V03P06A2_0xD8: Type = 216;
    pub const OBJECT_EU_V03P06A2_0xD9: Type = 217;
    pub const OBJECT_EU_V03P06A2_0xDA: Type = 218;
    pub const OBJECT_EU_V03P06A2_0xDB: Type = 219;
    pub const OBJECT_EU_V03P11A1: Type = 220;
    pub const OBJECT_EU_V04P03A1: Type = 221;
    pub const OBJECT_EU_V05P02A1: Type = 222;
    pub const OBJECT_EU_V05P03A1: Type = 223;
    pub const OBJECT_EU_V05P03A2: Type = 224;
    pub const OBJECT_EU_V10P01C1_0xE1: Type = 225;
    pub const OBJECT_EU_V10P01C1_0xE2: Type = 226;
    pub const OBJECT_EU_V10P01C1_0xE3: Type = 227;
    pub const OBJECT_EU_V10P01C1_0xE4: Type = 228;
    pub const OBJECT_EU_V10P01C1_0xE5: Type = 229;
    pub const OBJECT_EU_V10P01C1_0xE6: Type = 230;
    pub const OBJECT_EU_V10P01C2_0xE7: Type = 231;
    pub const OBJECT_EU_V10P01C2_0xE8: Type = 232;
    pub const OBJECT_EU_V10P01C2_0xE9: Type = 233;
    pub const OBJECT_EU_V10P01C2_0xEA: Type = 234;
    pub const OBJECT_EU_V10P01C2_0xEB: Type = 235;
    pub const OBJECT_EU_V10P01C2_0xEC: Type = 236;
    pub const OBJECT_EU_V10P01C3_0xED: Type = 237;
    pub const OBJECT_EU_V10P01C3_0xEE: Type = 238;
    pub const OBJECT_EU_V10P01C3_0xEF: Type = 239;
    pub const OBJECT_EU_V10P01C3_0xF0: Type = 240;
    pub const OBJECT_EU_V10P01C3_0xF1: Type = 241;
    pub const OBJECT_EU_V10P01C3_0xF2: Type = 242;
    pub const OBJECT_EU_V10P03C1: Type = 243;
    pub const OBJECT_EU_V12P01A1: Type = 244;
    pub const OBJECT_EU_V12P01A2: Type = 245;
    pub const OBJECT_EU_V12P01A3: Type = 246;
    pub const OBJECT_EU_V12P01A4: Type = 247;
    pub const OBJECT_EU_V12P01A5: Type = 248;
    pub const OBJECT_EU_V12P01A6: Type = 249;
    pub const OBJECT_EU_V12P01A7: Type = 250;
    pub const OBJECT_EU_V12P01A8: Type = 251;
    pub const OBJECT_EU_V14P03A1: Type = 252;
    pub const OBJECT_EU_V14P03A2: Type = 253;
    pub const OBJECT_EU_V14P04A1: Type = 254;
    pub const OBJECT_EU_V14P04A2: Type = 255;
    pub const OBJECT_EU_V15P01A1_0x100: Type = 256;
    pub const OBJECT_EU_V15P01A1_0x101: Type = 257;
    pub const OBJECT_EU_V15P01A1_0x102: Type = 258;
    pub const OBJECT_EU_V15P01A1_0x103: Type = 259;
    pub const OBJECT_EU_V15P01A1_0x104: Type = 260;
    pub const OBJECT_EU_V15P01A1_0x105: Type = 261;
    pub const OBJECT_EU_V15P01A2_0x106: Type = 262;
    pub const OBJECT_EU_V15P01A2_0x107: Type = 263;
    pub const OBJECT_EU_V15P01A2_0x108: Type = 264;
    pub const OBJECT_EU_V15P01A2_0x109: Type = 265;
    pub const OBJECT_EU_V15P01A2_0x10A: Type = 266;
    pub const OBJECT_EU_V15P01A2_0x10B: Type = 267;
    pub const OBJECT_EU_V15P01A3_0x10C: Type = 268;
    pub const OBJECT_EU_V15P01A3_0x10D: Type = 269;
    pub const OBJECT_EU_V15P01A3_0x10E: Type = 270;
    pub const OBJECT_EU_V15P01A3_0x10F: Type = 271;
    pub const OBJECT_EU_V15P01A3_0x110: Type = 272;
    pub const OBJECT_EU_V15P01A3_0x111: Type = 273;
    pub const OBJECT_EU_V15P01A3_0x112: Type = 274;
    pub const OBJECT_EU_V15P01A3_0x113: Type = 275;
    pub const OBJECT_EU_V15P01A3_0x114: Type = 276;
    pub const OBJECT_EU_V15P01A3_0x115: Type = 277;
    pub const OBJECT_EU_V15P01A3_0x116: Type = 278;
    pub const OBJECT_EU_V15P01A3_0x117: Type = 279;
    pub const OBJECT_EU_V15P01A4: Type = 280;
    pub const OBJECT_EU_V19P02A1_0x119: Type = 281;
    pub const OBJECT_EU_V19P02A1_0x11A: Type = 282;
    pub const OBJECT_EU_V19P02A1_0x11B: Type = 283;
    pub const OBJECT_EU_V19P05A1: Type = 284;
    pub const OBJECT_EU_V19P06A1_0x11D: Type = 285;
    pub const OBJECT_EU_V19P06A1_0x11E: Type = 286;
    pub const OBJECT_EU_V19P06A1_0x11F: Type = 287;
    pub const OBJECT_EU_V21P02A1: Type = 288;
    pub const OBJECT_EU_V22P01A1: Type = 289;
    pub const OBJECT_EU_V22P02A1_0x122: Type = 290;
    pub const OBJECT_EU_V22P02A1_0x123: Type = 291;
    pub const OBJECT_EU_V22P02A1_0x124: Type = 292;
    pub const OBJECT_EU_V22P02A1_0x125: Type = 293;
    pub const OBJECT_EU_V22P02A2: Type = 294;
    pub const OBJECT_EU_V22P03A1: Type = 295;
    pub const OBJECT_EU_V22P03A2: Type = 296;
    pub const OBJECT_EU_V23P04A1_0x129: Type = 297;
    pub const OBJECT_EU_V23P04A1_0x12A: Type = 298;
    pub const OBJECT_EU_V23P04A1_0x12B: Type = 299;
    pub const OBJECT_EU_V23P04A2_0x12C: Type = 300;
    pub const OBJECT_EU_V23P04A2_0x12D: Type = 301;
    pub const OBJECT_EU_V23P04A2_0x12E: Type = 302;
    pub const OBJECT_EU_V24P01A1_0x12F: Type = 303;
    pub const OBJECT_EU_V24P01A1_0x130: Type = 304;
    pub const OBJECT_EU_V24P01A1_0x131: Type = 305;
    pub const OBJECT_EU_V24P01A2: Type = 306;
    pub const OBJECT_EU_V24P01A3: Type = 307;
    pub const OBJECT_EU_V24P02A1_0x134: Type = 308;
    pub const OBJECT_EU_V24P02A1_0x135: Type = 309;
    pub const OBJECT_EU_V24P02A2: Type = 310;
    pub const OBJECT_EU_V24P03A1_0x137: Type = 311;
    pub const OBJECT_EU_V24P03A1_0x138: Type = 312;
    pub const OBJECT_EU_V24P03A2_0x139: Type = 313;
    pub const OBJECT_EU_V24P03A2_0x13A: Type = 314;
    pub const OBJECT_EU_V24P03A3: Type = 315;
    pub const OBJECT_EU_V24P04A1: Type = 316;
    pub const OBJECT_EU_V24P04A2: Type = 317;
    pub const OBJECT_EU_V24P04A3: Type = 318;
    pub const OBJECT_EU_V24P05A1: Type = 319;
    pub const OBJECT_EU_V24P05A2: Type = 320;
    pub const OBJECT_EU_V24P05A3_0x141: Type = 321;
    pub const OBJECT_EU_V24P05A3_0x142: Type = 322;
    pub const OBJECT_EU_V24P05A4_0x143: Type = 323;
    pub const OBJECT_EU_V24P05A4_0x144: Type = 324;
    pub const OBJECT_EU_V24P05A5_0x145: Type = 325;
    pub const OBJECT_EU_V24P05A5_0x146: Type = 326;
    pub const OBJECT_EU_V24P06A1: Type = 327;
    pub const OBJECT_EU_V25P03A1: Type = 328;
    pub const OBJECT_EU_V25P04A1_0x149: Type = 329;
    pub const OBJECT_EU_V25P04A1_0x14A: Type = 330;
    pub const OBJECT_EU_V25P04A1_0x14B: Type = 331;
    pub const OBJECT_EU_V25P04A1_0x14C: Type = 332;
    pub const OBJECT_EU_V25P04A1_0x14D: Type = 333;
    pub const OBJECT_EU_V25P04A2_0x14E: Type = 334;
    pub const OBJECT_EU_V25P04A2_0x14F: Type = 335;
    pub const OBJECT_EU_V25P04A2_0x150: Type = 336;
    pub const OBJECT_EU_V25P04A2_0x151: Type = 337;
    pub const OBJECT_EU_V25P04A2_0x152: Type = 338;
    pub const OBJECT_EU_V26P04A1_0x153: Type = 339;
    pub const OBJECT_EU_V26P04A1_0x154: Type = 340;
    pub const OBJECT_EU_V26P04A1_0x155: Type = 341;
    pub const OBJECT_EU_V26P04A2_0x156: Type = 342;
    pub const OBJECT_EU_V26P04A2_0x157: Type = 343;
    pub const OBJECT_EU_V26P04A2_0x158: Type = 344;
    pub const OBJECT_EU_V26P05A1_0x159: Type = 345;
    pub const OBJECT_EU_V26P05A1_0x15A: Type = 346;
    pub const OBJECT_EU_V26P05A1_0x15B: Type = 347;
    pub const OBJECT_EU_V26P07A1_0x15C: Type = 348;
    pub const OBJECT_EU_V26P07A1_0x15D: Type = 349;
    pub const OBJECT_EU_V26P07A1_0x15E: Type = 350;
    pub const OBJECT_EU_V26P10A1: Type = 351;
    pub const OBJECT_EU_S13P01A1: Type = 352;
    pub const OBJECT_EU_S13P02A1: Type = 353;
    pub const OBJECT_EU_S13P02A2: Type = 354;
    pub const OBJECT_EU_S13P03A1_0x163: Type = 355;
    pub const OBJECT_EU_S13P03A1_0x164: Type = 356;
    pub const OBJECT_EU_S13P03A1_0x165: Type = 357;
    pub const OBJECT_EU_S13P03A1_0x166: Type = 358;
    pub const OBJECT_EU_S13P03A1_0x167: Type = 359;
    pub const OBJECT_EU_S13P03A1_0x168: Type = 360;
    pub const OBJECT_EU_S13P03A1_0x169: Type = 361;
    pub const OBJECT_EU_S13P03A1_0x16A: Type = 362;
    pub const OBJECT_EU_S13P03A1_0x16B: Type = 363;
    pub const OBJECT_EU_S13P03A1_0x16C: Type = 364;
    pub const OBJECT_EU_S13P03A2_0x16D: Type = 365;
    pub const OBJECT_EU_S13P03A2_0x16E: Type = 366;
    pub const OBJECT_EU_S13P05A1: Type = 367;
    pub const OBJECT_EU_S13P05A2_0x170: Type = 368;
    pub const OBJECT_EU_S13P05A2_0x171: Type = 369;
    pub const OBJECT_EU_S13P08A1: Type = 370;
    pub const OBJECT_EU_G01P10C1: Type = 371;
    pub const OBJECT_EU_P15P01A1: Type = 372;
    pub const OBJECT_EU_P20P01A1: Type = 373;
    pub const OBJECT_EU_P20P01A2: Type = 374;
    pub const OBJECT_EU_P20P01A3: Type = 375;
    pub const OBJECT_EU_D45P31A1: Type = 376;
    pub const OBJECT_EU_D45P31A2: Type = 377;
    pub const OBJECT_EU_D45P31A3: Type = 378;
    pub const OBJECT_EU_D45P31A4: Type = 379;
    pub const OBJECT_EU_D45P31A5: Type = 380;
    pub const OBJECT_EU_P18P01A1: Type = 381;
    pub const OBJECT_EU_P18P01A2: Type = 382;
    pub const OBJECT_EU_P18P01A3: Type = 383;
    pub const OBJECT_EU_P18P01A4: Type = 384;
    pub const OBJECT_EU_P19P02A1: Type = 385;
    pub const OBJECT_EU_P19P02A2: Type = 386;
    pub const OBJECT_EU_P19P02A3: Type = 387;
    pub const OBJECT_EU_P20P02A1_0x184: Type = 388;
    pub const OBJECT_EU_P20P02A1_0x185: Type = 389;
    pub const OBJECT_EU_P21P02A1: Type = 390;
    pub const OBJECT_EU_P21P02A2: Type = 391;
    pub const OBJECT_EU_P22P01A1: Type = 392;
    pub const OBJECT_EU_D73P28A1: Type = 393;
    pub const OBJECT_EU_D73P28A2: Type = 394;
    pub const OBJECT_EU_D73P28A3: Type = 395;
    pub const OBJECT_EU_D73P28A4: Type = 396;
    pub const OBJECT_EU_P17P01A1: Type = 397;
    pub const OBJECT_EU_P01P04A1: Type = 398;
    pub const OBJECT_EU_S14P01A1: Type = 399;
    pub const OBJECT_EU_S14P01A2: Type = 400;
    pub const OBJECT_EU_S14P01A3: Type = 401;
    pub const OBJECT_EU_S14P01A4_0x192: Type = 402;
    pub const OBJECT_EU_S14P01A4_0x193: Type = 403;
    pub const OBJECT_EU_S14P01A4_0x194: Type = 404;
    pub const OBJECT_EU_V37P03A1: Type = 405;
    pub const OBJECT_EU_D73P28A5: Type = 406;
    pub const OBJECT_EU_D73P28A6: Type = 407;
    pub const OBJECT_EU_D73P28A7: Type = 408;
    pub const OBJECT_EU_D73P28A8: Type = 409;
    pub const OBJECT_EU_D73P28A9: Type = 410;
    pub const OBJECT_EU_D01P11A1: Type = 411;
    pub const OBJECT_EU_D50P11A1: Type = 412;
    pub const OBJECT_EU_D73P41A1: Type = 413;
    pub const OBJECT_EU_D73P41A2: Type = 414;
    pub const OBJECT_EU_D73P41A3: Type = 415;
    pub const OBJECT_EU_D73P41A4: Type = 416;
    pub const OBJECT_EU_D73P41A5: Type = 417;
    pub const OBJECT_EU_D73P41A6: Type = 418;
    pub const OBJECT_EU_D51P11A1: Type = 419;
    pub const OBJECT_EU_P24P01A1_0x1A4: Type = 420;
    pub const OBJECT_EU_P24P01A1_0x1A5: Type = 421;
    pub const OBJECT_EU_D51P41A1: Type = 422;
    pub const OBJECT_EU_D51P41A2: Type = 423;
    pub const OBJECT_EU_D51P41A3: Type = 424;
    pub const OBJECT_EU_D52P32A1: Type = 425;
    pub const OBJECT_EU_D52P11A1_0x1AA: Type = 426;
    pub const OBJECT_EU_D52P11A1_0x1AB: Type = 427;
    pub const OBJECT_EU_D52P11A1_0x1AC: Type = 428;
    pub const OBJECT_EU_D52P11A2_0x1AD: Type = 429;
    pub const OBJECT_EU_D52P11A2_0x1AE: Type = 430;
    pub const OBJECT_EU_D52P11A3_0x1AF: Type = 431;
    pub const OBJECT_EU_D52P11A3_0x1B0: Type = 432;
    pub const OBJECT_EU_S20P01A1: Type = 433;
    pub const OBJECT_EU_D52P32A2: Type = 434;
    pub const OBJECT_EU_P26P01A1: Type = 435;
    pub const OBJECT_EU_P26P01A2: Type = 436;
    pub const OBJECT_EU_P26P01A3: Type = 437;
    pub const OBJECT_EU_V39P03A1: Type = 438;
    pub const OBJECT_EU_V39P03A2: Type = 439;
    pub const OBJECT_EU_D57P41A1_0x1B8: Type = 440;
    pub const OBJECT_EU_D57P41A1_0x1B9: Type = 441;
    pub const OBJECT_EU_D57P41A1_0x1BA: Type = 442;
    pub const OBJECT_EU_D57P42A1_0x1BB: Type = 443;
    pub const OBJECT_EU_D57P42A1_0x1BC: Type = 444;
    pub const OBJECT_EU_D57P42A2_0x1BD: Type = 445;
    pub const OBJECT_EU_D57P42A2_0x1BE: Type = 446;
    pub const OBJECT_EU_D57P43A1_0x1BF: Type = 447;
    pub const OBJECT_EU_D57P43A1_0x1C0: Type = 448;
    pub const OBJECT_EU_S20P01A2: Type = 449;
    pub const OBJECT_EU_V38P06A1: Type = 450;
    pub const OBJECT_EU_V38P03A1: Type = 451;
    pub const OBJECT_EU_D56P41A1: Type = 452;
    pub const OBJECT_EU_D57P44A1: Type = 453;
    pub const OBJECT_EU_V37P01A1: Type = 454;
    pub const OBJECT_EU_V38P11A1: Type = 455;
    pub const OBJECT_EU_D52P32A3: Type = 456;
    pub const OBJECT_EU_D53P41C1: Type = 457;
    pub const OBJECT_EU_D57P42A3: Type = 458;
    pub const OBJECT_EU_P19P02A4: Type = 459;
    pub const OBJECT_EU_D52P32A4: Type = 460;
    pub const OBJECT_EU_D52P32A5: Type = 461;
    pub const OBJECT_EU_D52P32A6: Type = 462;
    pub const OBJECT_EU_D52P32A7: Type = 463;
    pub const OBJECT_EU_D53P41A1: Type = 464;
    pub const OBJECT_EU_D55P41A1_0x1D1: Type = 465;
    pub const OBJECT_EU_D55P41A1_0x1D2: Type = 466;
    pub const OBJECT_EU_S17P01A1: Type = 467;
    pub const OBJECT_EU_S17P02A1: Type = 468;
    pub const OBJECT_EU_S17P02A2: Type = 469;
    pub const OBJECT_EU_S17P02A3: Type = 470;
    pub const OBJECT_EU_S17P02A4: Type = 471;
    pub const OBJECT_EU_S17P02A5: Type = 472;
    pub const OBJECT_EU_S17P02A6: Type = 473;
    pub const OBJECT_EU_S17P02A7: Type = 474;
    pub const OBJECT_EU_S17P02A8: Type = 475;
    pub const OBJECT_EU_S17P02A9: Type = 476;
    pub const OBJECT_EU_S17P02B1: Type = 477;
    pub const OBJECT_EU_S17P02B2: Type = 478;
    pub const OBJECT_EU_S17P02B3: Type = 479;
    pub const OBJECT_EU_S17P02B4: Type = 480;
    pub const OBJECT_EU_S17P02B5: Type = 481;
    pub const OBJECT_EU_S17P02B6: Type = 482;
    pub const OBJECT_EU_S17P02B7: Type = 483;
    pub const OBJECT_EU_S18P01A1: Type = 484;
    pub const OBJECT_EU_S18P01A2: Type = 485;
    pub const OBJECT_EU_S18P01A3: Type = 486;
    pub const OBJECT_EU_S18P01A4: Type = 487;
    pub const OBJECT_EU_V38P07A1: Type = 488;
    pub const OBJECT_EU_V38P07B1: Type = 489;
    pub const OBJECT_EU_V38P07C1: Type = 490;
    pub const OBJECT_EU_V38P07C2: Type = 491;
    pub const OBJECT_EU_V38P07C3: Type = 492;
    pub const OBJECT_EU_V38P07C4: Type = 493;
    pub const OBJECT_EU_V38P07C5: Type = 494;
    pub const OBJECT_EU_V38P07D1: Type = 495;
    pub const OBJECT_EU_V38P07D2: Type = 496;
    pub const OBJECT_EU_V38P07D3: Type = 497;
    pub const OBJECT_EU_V38P07D4: Type = 498;
    pub const OBJECT_EU_V38P07D5: Type = 499;
    pub const OBJECT_EU_V38P07D6: Type = 500;
    pub const OBJECT_EU_V38P08A1: Type = 501;
    pub const OBJECT_EU_V38P08B1: Type = 502;
    pub const OBJECT_EU_V38P08B2: Type = 503;
    pub const OBJECT_EU_V38P08C1: Type = 504;
    pub const OBJECT_EU_V38P08C2: Type = 505;
    pub const OBJECT_EU_V38P08C3: Type = 506;
    pub const OBJECT_EU_V38P08C4: Type = 507;
    pub const OBJECT_EU_V38P08C5: Type = 508;
    pub const OBJECT_EU_V38P08C6: Type = 509;
    pub const OBJECT_EU_V38P08D1: Type = 510;
    pub const OBJECT_EU_V38P08D2: Type = 511;
    pub const OBJECT_EU_V38P08D3: Type = 512;
    pub const OBJECT_EU_V38P08D4: Type = 513;
    pub const OBJECT_EU_V38P08D5: Type = 514;
    pub const OBJECT_EU_V38P08D6: Type = 515;
    pub const OBJECT_EU_V38P10A1: Type = 516;
    pub const OBJECT_EU_V38P10A2: Type = 517;
    pub const OBJECT_EU_V38P10A3: Type = 518;
    pub const OBJECT_EU_V38P10A4: Type = 519;
    pub const OBJECT_EU_V38P10A5: Type = 520;
    pub const OBJECT_EU_V38P10A6: Type = 521;
    pub const OBJECT_EU_V38P10A7: Type = 522;
    pub const OBJECT_EU_V38P10A8: Type = 523;
    pub const OBJECT_EU_V38P10A9: Type = 524;
    pub const OBJECT_EU_V38P10B1: Type = 525;
    pub const OBJECT_EU_V38P10B2: Type = 526;
    pub const OBJECT_EU_V38P10B3: Type = 527;
    pub const OBJECT_EU_V38P10B4: Type = 528;
    pub const OBJECT_EU_V38P10B5: Type = 529;
    pub const OBJECT_EU_V38P10B6: Type = 530;
    pub const OBJECT_EU_V39P01A1_0x213: Type = 531;
    pub const OBJECT_EU_V39P01A1_0x214: Type = 532;
    pub const OBJECT_EU_D56P11A1: Type = 533;
    pub const OBJECT_EU_D56P11A2_0x216: Type = 534;
    pub const OBJECT_EU_D56P11A2_0x217: Type = 535;
    pub const OBJECT_EU_D56P11A3_0x218: Type = 536;
    pub const OBJECT_EU_D56P11A3_0x219: Type = 537;
    pub const OBJECT_EU_D56P11A3_0x21A: Type = 538;
    pub const OBJECT_EU_P26P01A4_0x21B: Type = 539;
    pub const OBJECT_EU_P26P01A4_0x21C: Type = 540;
    pub const OBJECT_EU_P26P01A4_0x21D: Type = 541;
    pub const OBJECT_EU_P26P01A4_0x21E: Type = 542;
    pub const OBJECT_EU_P26P01A4_0x21F: Type = 543;
    pub const OBJECT_EU_P26P01A4_0x220: Type = 544;
    pub const OBJECT_EU_P26P01A4_0x221: Type = 545;
    pub const OBJECT_EU_G01P05A2: Type = 546;
    pub const OBJECT_EU_P17P02C1: Type = 547;
    pub const OBJECT_EU_D45P31A6_0x224: Type = 548;
    pub const OBJECT_EU_D45P31A6_0x225: Type = 549;
    pub const OBJECT_EU_D57P43A2_0x226: Type = 550;
    pub const OBJECT_EU_D57P43A2_0x227: Type = 551;
    pub const OBJECT_EU_D57P43A2_0x228: Type = 552;
    pub const OBJECT_EU_D57P43A2_0x229: Type = 553;
    pub const OBJECT_EU_D57P43A3_0x22A: Type = 554;
    pub const OBJECT_EU_D57P43A3_0x22B: Type = 555;
    pub const OBJECT_EU_D57P43A3_0x22C: Type = 556;
    pub const OBJECT_EU_D57P43A3_0x22D: Type = 557;
    pub const OBJECT_EU_D52P32A8: Type = 558;
    pub const OBJECT_EU_D52P32A9: Type = 559;
    pub const OBJECT_EU_V37P02A1_0x230: Type = 560;
    pub const OBJECT_EU_V37P02A1_0x231: Type = 561;
    pub const OBJECT_EU_G01P09A1: Type = 562;
    pub const OBJECT_EU_G01P10A1: Type = 563;
    pub const OBJECT_EU_S13P02A3: Type = 564;
    pub const OBJECT_EU_D63P41A1: Type = 565;
    pub const OBJECT_EU_D63P41A2: Type = 566;
    pub const OBJECT_EU_D28P34A3: Type = 567;
    pub const OBJECT_EU_D30P33A5: Type = 568;
}
#[repr(C)]
pub struct script_var {
    pub type_: script_var_type_16,
    pub field_0x1: undefined2,
    pub mem_offset: u16,
    pub bitshift: u16,
    pub n_values: u16,
    pub default_val: i16,
    pub name: *mut crate::ctypes::c_char,
}
#[repr(C)]
pub struct script_var_table {
    pub vars: [script_var; 115usize],
}
#[repr(C)]
pub struct script_local_var_table {
    pub vars: [script_var; 4usize],
}
#[repr(C)]
pub struct script_var_desc {
    pub desc: *mut script_var,
    pub value: *mut crate::ctypes::c_void,
}
#[repr(C)]
pub struct script_var_value_table {
    pub version: i32,
    pub condition: i32,
    pub position_x: [u32; 3usize],
    pub position_y: [u32; 3usize],
    pub position_height: [u32; 3usize],
    pub recycle_count: u32,
    pub ground_enter: i16,
    pub ground_getout: i16,
    pub ground_map: i16,
    pub ground_place: i16,
    pub ground_enter_backup: [i16; 5usize],
    pub ground_getout_backup: [i16; 5usize],
    pub ground_map_backup: [i16; 5usize],
    pub ground_place_backup: [i16; 5usize],
    pub dungeon_select: i16,
    pub dungeon_enter: i16,
    pub dungeon_enter_mode: i16,
    pub dungeon_enter_index: i16,
    pub dungeon_enter_backup: [i16; 5usize],
    pub dungeon_enter_mode_backup: [i16; 5usize],
    pub dungeon_enter_index_backup: [i16; 5usize],
    pub hero_first_kind: i16,
    pub partner_first_kind: i16,
    pub random_request_npc03_kind: i16,
    pub event_local: i16,
    pub dungeon_event_local: i16,
    pub item_backup: [i16; 2usize],
    pub item_backup_kurekure: [i16; 2usize],
    pub item_backup_take: [i16; 2usize],
    pub item_backup_get: [i16; 2usize],
    pub request_thanks_result_kind: i16,
    pub request_thanks_result_variation: i16,
    pub dungeon_enter_frequency: u16,
    pub dungeon_enter_frequency_backup: [u16; 5usize],
    pub scenario_balance_flag: i8,
    pub scenario_balance_debug: i8,
    pub hero_talk_kind: i8,
    pub partner_talk_kind: i8,
    pub config_color_kind: i8,
    pub rom_variation: i8,
    pub special_episode_type: i8,
    pub position_direction: [i8; 3usize],
    pub scenario_select: [u8; 2usize],
    pub scenario_main: [u8; 2usize],
    pub scenario_side: [u8; 2usize],
    pub scenario_sub1: [u8; 2usize],
    pub scenario_sub2: [u8; 2usize],
    pub scenario_sub3: [u8; 2usize],
    pub scenario_sub4: [u8; 2usize],
    pub scenario_sub5: [u8; 2usize],
    pub scenario_sub6: [u8; 2usize],
    pub scenario_sub7: [u8; 2usize],
    pub scenario_sub8: [u8; 2usize],
    pub crystal_color_01: u8,
    pub crystal_color_02: u8,
    pub crystal_color_03: u8,
    pub compulsory_save_point: u8,
    pub compulsory_save_point_side: u8,
    pub scenario_select_backup: [u8; 8usize],
    pub ground_enter_link: u8,
    pub ground_enter_link_backup: [u8; 5usize],
    pub dungeon_result: u8,
    pub ground_start_mode: u8,
    pub dungeon_result_backup: [u8; 5usize],
    pub ground_start_mode_backup: [u8; 5usize],
    pub request_clear_count: u8,
    pub player_kind: u8,
    pub attendant1_kind: u8,
    pub attendant2_kind: u8,
    pub player_kind_backup: [u8; 5usize],
    pub attendant1_kind_backup: [u8; 5usize],
    pub attendant2_kind_backup: [u8; 5usize],
    pub world_map_level: u8,
    pub lottery_result: u8,
    pub sub30_spot_level: u8,
    pub team_rank_event_level: u8,
    pub play_old_game: u8,
    pub hero_first_name: [crate::ctypes::c_char; 10usize],
    pub partner_first_name: [crate::ctypes::c_char; 10usize],
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 1usize]>,
    pub scenario_main_bit_flag: [u8; 16usize],
    pub scenario_talk_bit_flag: [u8; 32usize],
    pub scenario_main_bit_flag_backup: [u8; 64usize],
    pub special_episode_open: [u8; 1usize],
    pub special_episode_open_old: [u8; 1usize],
    pub special_episode_conquest: [u8; 1usize],
    pub performance_progress_list: [u8; 8usize],
    pub dungeon_open_list: [u8; 32usize],
    pub dungeon_enter_list: [u8; 32usize],
    pub dungeon_arrive_list: [u8; 32usize],
    pub dungeon_conquest_list: [u8; 32usize],
    pub dungeon_present_list: [u8; 32usize],
    pub dungeon_request_list: [u8; 32usize],
    pub world_map_mark_list_normal: [u8; 40usize],
    pub world_map_mark_list_special: [u8; 40usize],
    pub station_item_static: [u8; 4usize],
    pub station_item_temp: [u8; 4usize],
    pub deliver_item_static: [u8; 2usize],
    pub deliver_item_temp: [u8; 2usize],
    pub _bitfield_align_2: [u8; 0],
    pub _bitfield_2: __BindgenBitfieldUnit<[u8; 1usize]>,
    pub unused: [u8; 332usize],
}
impl script_var_value_table {
    #[inline]
    pub fn side02_talk(&self) -> u8 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(0usize, 3u8) as u8) }
    }
    #[inline]
    pub fn set_side02_talk(&mut self, val: u8) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(0usize, 3u8, val as u64)
        }
    }
    #[inline]
    pub fn side06_room(&self) -> u8 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(3usize, 3u8) as u8) }
    }
    #[inline]
    pub fn set_side06_room(&mut self, val: u8) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(3usize, 3u8, val as u64)
        }
    }
    #[inline]
    pub fn side08_boss2nd(&self) -> u8 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(6usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_side08_boss2nd(&mut self, val: u8) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(6usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn side01_boss2nd(&self) -> u8 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(7usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_side01_boss2nd(&mut self, val: u8) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(7usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        side02_talk: u8,
        side06_room: u8,
        side08_boss2nd: u8,
        side01_boss2nd: u8,
    ) -> __BindgenBitfieldUnit<[u8; 1usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 1usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 3u8, {
            let side02_talk: u8 = unsafe { ::core::mem::transmute(side02_talk) };
            side02_talk as u64
        });
        __bindgen_bitfield_unit.set(3usize, 3u8, {
            let side06_room: u8 = unsafe { ::core::mem::transmute(side06_room) };
            side06_room as u64
        });
        __bindgen_bitfield_unit.set(6usize, 1u8, {
            let side08_boss2nd: u8 = unsafe { ::core::mem::transmute(side08_boss2nd) };
            side08_boss2nd as u64
        });
        __bindgen_bitfield_unit.set(7usize, 1u8, {
            let side01_boss2nd: u8 = unsafe { ::core::mem::transmute(side01_boss2nd) };
            side01_boss2nd as u64
        });
        __bindgen_bitfield_unit
    }
    #[inline]
    pub fn bit_fuwarante_local(&self) -> u8 {
        unsafe { ::core::mem::transmute(self._bitfield_2.get(0usize, 5u8) as u8) }
    }
    #[inline]
    pub fn set_bit_fuwarante_local(&mut self, val: u8) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_2.set(0usize, 5u8, val as u64)
        }
    }
    #[inline]
    pub fn sub30_treasure_discover(&self) -> u8 {
        unsafe { ::core::mem::transmute(self._bitfield_2.get(5usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_sub30_treasure_discover(&mut self, val: u8) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_2.set(5usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn sub30_spot_discover(&self) -> u8 {
        unsafe { ::core::mem::transmute(self._bitfield_2.get(6usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_sub30_spot_discover(&mut self, val: u8) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_2.set(6usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn sub30_projectp(&self) -> u8 {
        unsafe { ::core::mem::transmute(self._bitfield_2.get(7usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_sub30_projectp(&mut self, val: u8) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_2.set(7usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_2(
        bit_fuwarante_local: u8,
        sub30_treasure_discover: u8,
        sub30_spot_discover: u8,
        sub30_projectp: u8,
    ) -> __BindgenBitfieldUnit<[u8; 1usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 1usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 5u8, {
            let bit_fuwarante_local: u8 = unsafe { ::core::mem::transmute(bit_fuwarante_local) };
            bit_fuwarante_local as u64
        });
        __bindgen_bitfield_unit.set(5usize, 1u8, {
            let sub30_treasure_discover: u8 =
                unsafe { ::core::mem::transmute(sub30_treasure_discover) };
            sub30_treasure_discover as u64
        });
        __bindgen_bitfield_unit.set(6usize, 1u8, {
            let sub30_spot_discover: u8 = unsafe { ::core::mem::transmute(sub30_spot_discover) };
            sub30_spot_discover as u64
        });
        __bindgen_bitfield_unit.set(7usize, 1u8, {
            let sub30_projectp: u8 = unsafe { ::core::mem::transmute(sub30_projectp) };
            sub30_projectp as u64
        });
        __bindgen_bitfield_unit
    }
}
#[repr(C)]
pub struct script_level {
    pub mapty: u16,
    pub field_0x2: undefined2,
    pub mapid: u16,
    pub field_0x6: i16,
    pub name: *mut crate::ctypes::c_char,
}
#[repr(C)]
pub struct script_entity {
    pub type_: u16,
    pub entid: u16,
    pub name: *mut crate::ctypes::c_char,
    pub field_0x8: u16,
    pub field_0xa: u8,
    pub field_0xb: u8,
}
#[repr(C)]
pub struct script_opcode {
    pub n_params: i8,
    pub string_idx: i8,
    pub field_0x2: undefined,
    pub field_0x3: undefined,
    pub name: *mut crate::ctypes::c_char,
}
#[repr(C)]
pub struct script_opcode_table {
    pub ops: [script_opcode; 383usize],
}
#[repr(C)]
pub struct common_routine {
    pub id: common_routine_id_16,
    pub field_0x2: i16,
    pub name: *mut crate::ctypes::c_char,
}
#[repr(C)]
pub struct common_routine_table {
    pub routines: [common_routine; 701usize],
}
#[repr(C)]
pub struct script_object {
    pub field_0x0: i16,
    pub field_0x2: u8,
    pub field_0x3: u8,
    pub name: *mut crate::ctypes::c_char,
    pub field_0x8: u8,
    pub unused: [u8; 3usize],
}
#[repr(C)]
pub struct live_actor {
    pub species_id: monster_id_16,
    pub entity_id: u16,
    pub is_enabled: bool_,
    pub field_0x5: undefined,
    pub hanger: u16,
    pub sector: u8,
    pub field_0x9: i8,
    pub field_0xa: i16,
    pub collision_box: uvec2,
    pub field_0x14: undefined,
    pub field_0x15: undefined,
    pub field_0x16: undefined,
    pub field_0x17: undefined,
    pub size_div2: uvec2,
    pub field_0x20: undefined,
    pub field_0x21: undefined,
    pub field_0x22: undefined,
    pub field_0x23: undefined,
    pub field_0x24: undefined,
    pub field_0x25: undefined,
    pub field_0x26: undefined,
    pub field_0x27: undefined,
    pub limit_min_pos: vec2,
    pub limit_max_pos: vec2,
    pub maybe_command_data: [undefined; 236usize],
    pub field_0x124: i16,
    pub field_0x126: undefined,
    pub field_0x127: undefined,
    pub bitfied_collision_layer: u32,
    pub field_0x12c: i32,
    pub current_direction: direction_id_8,
    pub field_0x131: undefined,
    pub field_0x132: undefined,
    pub field_0x133: undefined,
    pub field_0x134: undefined,
    pub field_0x135: undefined,
    pub field_0x136: undefined,
    pub field_0x137: undefined,
    pub field38_0x138: vec2,
    pub field_0x140: undefined,
    pub field_0x141: undefined,
    pub field_0x142: undefined,
    pub field_0x143: undefined,
    pub field_0x144: undefined,
    pub field_0x145: undefined,
    pub field_0x146: undefined,
    pub field_0x147: undefined,
    pub field_0x148: undefined,
    pub field_0x149: undefined,
    pub field_0x14a: undefined,
    pub field_0x14b: undefined,
    pub field_0x14c: u32,
    pub field_0x150: i16,
    pub field_0x152: bool_,
    pub field_0x153: undefined,
    pub field_0x154: i16,
    pub field_0x156: bool_,
    pub field_0x157: undefined,
    pub field_0x158: i16,
    pub direction: direction_id_8,
    pub field_0x15b: undefined,
    pub coord_min: vec2,
    pub coord_max: vec2,
    pub field_0x16c: undefined4,
    pub field_0x170: undefined4,
    pub field_0x174: i8,
    pub field_0x175: i8,
    pub field_0x176: i16,
    pub field_0x178: i16,
    pub field_0x17a: undefined,
    pub field_0x17b: undefined,
    pub movement_related: i32,
    pub second_bitfield: i16,
    pub field_0x182: i16,
    pub field_0x184: i16,
    pub field_0x186: undefined,
    pub field_0x187: undefined,
    pub field_0x188: undefined,
    pub field_0x189: undefined,
    pub field_0x18a: undefined,
    pub field_0x18b: undefined,
    pub animation: [undefined; 196usize],
}
#[repr(C)]
pub struct live_actor_list {
    pub actors: [live_actor; 24usize],
}
#[repr(C)]
pub struct main_ground_data {
    pub script: *mut undefined,
    pub partner_follow_data: *mut undefined,
    pub actors: *mut live_actor_list,
    pub objects: *mut undefined,
    pub performers: *mut undefined,
    pub events: *mut undefined,
}
extern "C" {
    pub fn ShouldMonsterRunAwayVariationOutlawCheck(
        monster: *mut entity,
        param_2: undefined,
    ) -> bool_;
}
extern "C" {
    pub fn AiMovement(monster: *mut entity, param_2: undefined);
}
extern "C" {
    pub fn CalculateAiTargetPos(monster: *mut entity);
}
extern "C" {
    pub fn ChooseAiMove(monster: *mut entity);
}
extern "C" {
    pub fn InitMemAllocTable();
}
extern "C" {
    pub fn SetMemAllocatorParams(
        get_alloc_arena: get_alloc_arena_fn_t,
        get_free_arena: get_free_arena_fn_t,
    );
}
extern "C" {
    pub fn GetAllocArenaDefault(arena: *mut mem_arena, flags: u32) -> *mut mem_arena;
}
extern "C" {
    pub fn GetFreeArenaDefault(arena: *mut mem_arena, flags: u32) -> *mut mem_arena;
}
extern "C" {
    pub fn InitMemArena(
        arena: *mut mem_arena,
        mem: *mut iovec,
        blocks: *mut mem_block,
        max_blocks: u32,
    );
}
extern "C" {
    pub fn MemAllocFlagsToBlockType(alloc_flags: u32) -> u32;
}
extern "C" {
    pub fn FindAvailableMemBlock(
        arena: *mut mem_arena,
        alloc_flags: u32,
        len: u32,
    ) -> crate::ctypes::c_int;
}
extern "C" {
    pub fn SplitMemBlock(
        arena: *mut mem_arena,
        idx: u32,
        alloc_flags: u32,
        len: u32,
        user_flags: u32,
    ) -> *mut mem_block;
}
extern "C" {
    pub fn MemAlloc(len: u32, flags: u32) -> *mut crate::ctypes::c_void;
}
extern "C" {
    pub fn MemFree(ptr: *mut crate::ctypes::c_void);
}
extern "C" {
    pub fn MemArenaAlloc(
        parent_arena: *mut mem_arena,
        len: u32,
        max_blocks: u32,
        flags: u32,
    ) -> *mut mem_arena;
}
extern "C" {
    pub fn CreateMemArena(mem: *mut iovec, max_blocks: u32) -> *mut mem_arena;
}
extern "C" {
    pub fn MemLocateSet(arena: *mut mem_arena, len: u32, flags: u32) -> *mut crate::ctypes::c_void;
}
extern "C" {
    pub fn MemLocateUnset(arena: *mut mem_arena, ptr: *mut crate::ctypes::c_void);
}
extern "C" {
    pub fn RoundUpDiv256(x: crate::ctypes::c_int) -> crate::ctypes::c_int;
}
extern "C" {
    pub fn MultiplyByFixedPoint(
        x: crate::ctypes::c_int,
        mult_fp: crate::ctypes::c_int,
    ) -> crate::ctypes::c_int;
}
extern "C" {
    pub fn UMultiplyByFixedPoint(x: u32, mult_fp: u32) -> u32;
}
extern "C" {
    pub fn GetRngSeed() -> u16;
}
extern "C" {
    pub fn SetRngSeed(seed: u16);
}
extern "C" {
    pub fn Rand16Bit() -> u16;
}
extern "C" {
    pub fn RandInt(n: u32) -> u32;
}
extern "C" {
    pub fn RandRange(x: crate::ctypes::c_int, y: crate::ctypes::c_int) -> crate::ctypes::c_int;
}
extern "C" {
    pub fn Rand32Bit() -> u32;
}
extern "C" {
    pub fn RandIntSafe(n: u32) -> u32;
}
extern "C" {
    pub fn RandRangeSafe(x: crate::ctypes::c_int, y: crate::ctypes::c_int) -> crate::ctypes::c_int;
}
extern "C" {
    pub fn WaitForever();
}
extern "C" {
    pub fn InitMemAllocTableVeneer();
}
extern "C" {
    pub fn MemZero(ptr: *mut crate::ctypes::c_void, len: u32);
}
extern "C" {
    pub fn MemcpySimple(dest: *mut crate::ctypes::c_void, src: *mut crate::ctypes::c_void, n: u32);
}
extern "C" {
    pub fn TaskProcBoot();
}
extern "C" {
    pub fn EnableAllInterrupts() -> bool_;
}
extern "C" {
    pub fn GetTime() -> f32;
}
extern "C" {
    pub fn DisableAllInterrupts() -> bool_;
}
extern "C" {
    pub fn SoundResume() -> bool_;
}
extern "C" {
    pub fn CardPullOutWithStatus(status: crate::ctypes::c_int);
}
extern "C" {
    pub fn CardPullOut();
}
extern "C" {
    pub fn CardBackupError();
}
extern "C" {
    pub fn HaltProcessDisp(status: crate::ctypes::c_int);
}
extern "C" {
    pub fn OverlayIsLoaded(group_id: overlay_group_id::Type) -> bool_;
}
extern "C" {
    pub fn LoadOverlay(group_id: overlay_group_id::Type);
}
extern "C" {
    pub fn UnloadOverlay(group_id: overlay_group_id::Type);
}
extern "C" {
    pub fn EuclideanNorm(vec2: *mut crate::ctypes::c_int) -> f32;
}
extern "C" {
    pub fn ClampComponentAbs(vec2: *mut crate::ctypes::c_int, max: crate::ctypes::c_int);
}
extern "C" {
    pub fn KeyWaitInit();
}
extern "C" {
    pub fn DataTransferInit();
}
extern "C" {
    pub fn DataTransferStop();
}
extern "C" {
    pub fn FileInitVeneer(file: *mut file_stream);
}
extern "C" {
    pub fn FileOpen(file: *mut file_stream, filepath: *const crate::ctypes::c_char);
}
extern "C" {
    pub fn FileGetSize(file: *mut file_stream) -> u32;
}
extern "C" {
    pub fn FileRead(file: *mut file_stream, buf: *mut crate::ctypes::c_void, size: u32) -> u32;
}
extern "C" {
    pub fn FileSeek(
        file: *mut file_stream,
        offset: crate::ctypes::c_int,
        whence: crate::ctypes::c_int,
    );
}
extern "C" {
    pub fn FileClose(file: *mut file_stream);
}
extern "C" {
    pub fn LoadFileFromRom(iov: *mut iovec, filepath: *const crate::ctypes::c_char, flags: u32);
}
extern "C" {
    pub fn GetDebugFlag1(flag_id: u32) -> u32;
}
extern "C" {
    pub fn SetDebugFlag1(flag_id: u32, val: u32);
}
extern "C" {
    pub fn AppendProgPos(
        str_: *mut crate::ctypes::c_char,
        prog_pos: *mut prog_pos_info,
        msg: *const crate::ctypes::c_char,
    ) -> crate::ctypes::c_int;
}
extern "C" {
    pub fn DebugPrintTrace(msg: *const crate::ctypes::c_char, prog_pos: *mut prog_pos_info);
}
extern "C" {
    pub fn DebugPrint0(fmt: *const crate::ctypes::c_char, ...);
}
extern "C" {
    pub fn GetDebugFlag2(flag_id: u32) -> u32;
}
extern "C" {
    pub fn SetDebugFlag2(flag_id: u32, val: u32);
}
extern "C" {
    pub fn DebugPrint(level: u8, fmt: *const crate::ctypes::c_char, ...);
}
extern "C" {
    pub fn FatalError(prog_pos: prog_pos_info, fmt: *const crate::ctypes::c_char, ...);
}
extern "C" {
    pub fn OpenAllPackFiles();
}
extern "C" {
    pub fn GetFileLengthInPackWithPackNb(pack_id: pack_file_id::Type, file_index: u32) -> u32;
}
extern "C" {
    pub fn LoadFileInPackWithPackId(
        pack_id: pack_file_id::Type,
        output_buffer: *mut crate::ctypes::c_void,
        file_index: u32,
    ) -> u32;
}
extern "C" {
    pub fn AllocAndLoadFileInPack(
        pack_id: pack_file_id::Type,
        file_index: u32,
        output: *mut pack_alloc_and_load_result,
        malloc_flags: u32,
    );
}
extern "C" {
    pub fn OpenPackFile(pack_file: *mut pack_file_opened, file_name: *const crate::ctypes::c_char);
}
extern "C" {
    pub fn GetFileLengthInPack(pack_file: *mut pack_file_opened, file_index: u32) -> u32;
}
extern "C" {
    pub fn LoadFileInPack(
        pack_file: *mut pack_file_opened,
        output_buffer: *mut crate::ctypes::c_void,
        file_index: u32,
    ) -> u32;
}
extern "C" {
    pub fn GetItemCategoryVeneer(item_id: item_id) -> item_category;
}
extern "C" {
    pub fn IsAuraBow(item_id: item_id) -> bool_;
}
extern "C" {
    pub fn SprintfStatic(
        str_: *mut crate::ctypes::c_char,
        format: *const crate::ctypes::c_char,
        ...
    ) -> crate::ctypes::c_int;
}
extern "C" {
    pub fn GetItemCategory(item_id: item_id) -> item_category;
}
extern "C" {
    pub fn SetMoneyCarried(amount: crate::ctypes::c_int);
}
extern "C" {
    pub fn IsBagFull() -> bool_;
}
extern "C" {
    pub fn CountItemTypeInBag(arg1: item_id) -> crate::ctypes::c_int;
}
extern "C" {
    pub fn AddItemToBag(item: *mut bulk_item) -> bool_;
}
extern "C" {
    pub fn ScriptSpecialProcess0x39() -> bool_;
}
extern "C" {
    pub fn CountItemTypeInStorage(item: *mut bulk_item) -> crate::ctypes::c_int;
}
extern "C" {
    pub fn RemoveItemsTypeInStorage(item: *mut bulk_item) -> bool_;
}
extern "C" {
    pub fn AddItemToStorage(item: *mut bulk_item) -> bool_;
}
extern "C" {
    pub fn SetMoneyStored(amount: crate::ctypes::c_int);
}
extern "C" {
    pub fn GetExclusiveItemOffset(item_id: item_id) -> crate::ctypes::c_int;
}
extern "C" {
    pub fn ApplyExclusiveItemStatBoosts(
        item_id: item_id,
        atk_boost: *mut u8,
        sp_atk_boost: *mut u8,
        def_boost: *mut u8,
        sp_def_boost: *mut u8,
    );
}
extern "C" {
    pub fn SetExclusiveItemEffect(effect_flags: *mut u32, effect_id: exclusive_item_effect_id);
}
extern "C" {
    pub fn ExclusiveItemEffectFlagTest(
        effect_flags: *mut u32,
        effect_id: exclusive_item_effect_id,
    ) -> bool_;
}
extern "C" {
    pub fn ApplyGummiBoostsGroundMode(
        param_1: *mut undefined2,
        param_2: *mut undefined2,
        param_3: *mut undefined,
        param_4: *mut undefined,
        param_5: undefined2,
        param_6: undefined,
        buffer: *mut crate::ctypes::c_void,
    );
}
extern "C" {
    pub fn GetMoveTargetAndRange(move_: *mut move_, is_ai: bool_) -> move_target_and_range;
}
extern "C" {
    pub fn GetMoveType(move_: *mut move_) -> type_id;
}
extern "C" {
    pub fn GetMoveAiWeight(move_: *mut move_) -> u8;
}
extern "C" {
    pub fn GetMoveBasePower(move_: *mut move_) -> crate::ctypes::c_int;
}
extern "C" {
    pub fn GetMoveAccuracyOrAiChance(move_: *mut move_, which: crate::ctypes::c_int) -> u8;
}
extern "C" {
    pub fn GetMaxPp(move_: *mut move_) -> crate::ctypes::c_int;
}
extern "C" {
    pub fn GetMoveCritChance(move_: *mut move_) -> crate::ctypes::c_int;
}
extern "C" {
    pub fn IsMoveRangeString19(move_: *mut move_) -> bool_;
}
extern "C" {
    pub fn IsRecoilMove(move_id: move_id) -> bool_;
}
extern "C" {
    pub fn IsPunchMove(move_id: move_id) -> bool_;
}
extern "C" {
    pub fn GetMoveCategory(move_id: move_id) -> move_category::Type;
}
extern "C" {
    pub fn LoadWteFromRom(handle: *mut wte_handle, path: *const crate::ctypes::c_char, flags: u32);
}
extern "C" {
    pub fn LoadWteFromFileDirectory(
        handle: *mut wte_handle,
        pack_file_id: u16,
        file_index: u16,
        malloc_flags: u32,
    );
}
extern "C" {
    pub fn UnloadWte(handle: *mut wte_handle);
}
extern "C" {
    pub fn HandleSir0Translation(dst: *mut *mut u8, src: *mut u8);
}
extern "C" {
    pub fn HandleSir0TranslationVeneer(dst: *mut *mut u8, src: *mut u8);
}
extern "C" {
    pub fn GetLanguageType() -> crate::ctypes::c_int;
}
extern "C" {
    pub fn GetLanguage() -> crate::ctypes::c_int;
}
extern "C" {
    pub fn PreprocessString(
        output: *mut crate::ctypes::c_char,
        output_size: crate::ctypes::c_int,
        format: *const crate::ctypes::c_char,
        flags: preprocessor_flags,
        args: *mut preprocessor_args,
    ) -> crate::ctypes::c_int;
}
extern "C" {
    pub fn StrcpySimple(dest: *mut crate::ctypes::c_char, src: *const crate::ctypes::c_char);
}
extern "C" {
    pub fn StrncpySimple(
        dest: *mut crate::ctypes::c_char,
        src: *const crate::ctypes::c_char,
        n: u32,
    );
}
extern "C" {
    pub fn StringFromMessageId(message_id: crate::ctypes::c_int) -> *mut crate::ctypes::c_char;
}
extern "C" {
    pub fn SetScreenWindowsColor(palette_idx: crate::ctypes::c_int, upper_screen: bool_);
}
extern "C" {
    pub fn SetBothScreensWindowsColor(palette_idx: crate::ctypes::c_int);
}
extern "C" {
    pub fn GetNotifyNote() -> bool_;
}
extern "C" {
    pub fn SetNotifyNote(flag: bool_);
}
extern "C" {
    pub fn InitMainTeamAfterQuiz();
}
extern "C" {
    pub fn ScriptSpecialProcess0x3();
}
extern "C" {
    pub fn ScriptSpecialProcess0x4();
}
extern "C" {
    pub fn NoteSaveBase(param_1: crate::ctypes::c_int) -> crate::ctypes::c_int;
}
extern "C" {
    pub fn NoteLoadBase() -> crate::ctypes::c_int;
}
extern "C" {
    pub fn GetGameMode() -> crate::ctypes::c_int;
}
extern "C" {
    pub fn InitScriptVariableValues();
}
extern "C" {
    pub fn InitEventFlagScriptVars();
}
extern "C" {
    pub fn ZinitScriptVariable(local_var_vals: *mut crate::ctypes::c_void, id: script_var_id);
}
extern "C" {
    pub fn LoadScriptVariableRaw(
        var: *mut script_var_desc,
        local_var_vals: *mut crate::ctypes::c_void,
        id: script_var_id,
    );
}
extern "C" {
    pub fn LoadScriptVariableValue(
        local_var_vals: *mut crate::ctypes::c_void,
        id: script_var_id,
    ) -> crate::ctypes::c_int;
}
extern "C" {
    pub fn LoadScriptVariableValueAtIndex(
        local_var_vals: *mut crate::ctypes::c_void,
        id: script_var_id,
        idx: crate::ctypes::c_int,
    ) -> crate::ctypes::c_int;
}
extern "C" {
    pub fn SaveScriptVariableValue(
        local_var_vals: *mut crate::ctypes::c_void,
        id: script_var_id,
        val: crate::ctypes::c_int,
    );
}
extern "C" {
    pub fn SaveScriptVariableValueAtIndex(
        local_var_vals: *mut crate::ctypes::c_void,
        id: script_var_id,
        idx: crate::ctypes::c_int,
        val: crate::ctypes::c_int,
    );
}
extern "C" {
    pub fn LoadScriptVariableValueSum(
        local_var_vals: *mut crate::ctypes::c_void,
        id: script_var_id,
    ) -> crate::ctypes::c_int;
}
extern "C" {
    pub fn LoadScriptVariableValueBytes(
        id: script_var_id,
        dest: *mut crate::ctypes::c_void,
        n: u32,
    );
}
extern "C" {
    pub fn SaveScriptVariableValueBytes(id: script_var_id, src: *mut crate::ctypes::c_void, n: u32);
}
extern "C" {
    pub fn ScriptVariablesEqual(
        local_var_vals: *mut crate::ctypes::c_void,
        id1: script_var_id,
        id2: script_var_id,
    ) -> bool_;
}
extern "C" {
    pub fn EventFlagBackup();
}
extern "C" {
    pub fn DumpScriptVariableValues(dest: *mut crate::ctypes::c_void) -> crate::ctypes::c_int;
}
extern "C" {
    pub fn RestoreScriptVariableValues(src: *mut crate::ctypes::c_void) -> bool_;
}
extern "C" {
    pub fn InitScenarioScriptVars();
}
extern "C" {
    pub fn SetScenarioScriptVar(id: script_var_id, val0: u8, val1: u8);
}
extern "C" {
    pub fn GetSpecialEpisodeType() -> crate::ctypes::c_int;
}
extern "C" {
    pub fn ScenarioFlagBackup();
}
extern "C" {
    pub fn InitWorldMapScriptVars();
}
extern "C" {
    pub fn InitDungeonListScriptVars();
}
extern "C" {
    pub fn HasMonsterBeenAttackedInDungeons(monster_id: monster_id) -> bool_;
}
extern "C" {
    pub fn SetDungeonTipShown(tip_id: crate::ctypes::c_int);
}
extern "C" {
    pub fn GetDungeonTipShown(tip_id: crate::ctypes::c_int) -> bool_;
}
extern "C" {
    pub fn MonsterSpawnsEnabled() -> bool_;
}
extern "C" {
    pub fn GetNbFloors(dungeon_id: dungeon_id) -> crate::ctypes::c_int;
}
extern "C" {
    pub fn GetNbFloorsPlusOne(dungeon_id: dungeon_id) -> crate::ctypes::c_int;
}
extern "C" {
    pub fn GetDungeonGroup(dungeon_id: dungeon_id) -> dungeon_group_id;
}
extern "C" {
    pub fn GetNbPrecedingFloors(dungeon_id: dungeon_id) -> crate::ctypes::c_int;
}
extern "C" {
    pub fn GetNbFloorsDungeonGroup(dungeon_id: dungeon_id) -> crate::ctypes::c_int;
}
extern "C" {
    pub fn DungeonFloorToGroupFloor(
        out_group_data: *mut dungeon_group_and_group_floor,
        dungeon_and_floor: *mut dungeon_floor_pair,
    );
}
extern "C" {
    pub fn SetAdventureLogStructLocation();
}
extern "C" {
    pub fn SetAdventureLogDungeonFloor(dungeon_floor: dungeon_floor_pair);
}
extern "C" {
    pub fn GetAdventureLogDungeonFloor() -> dungeon_floor_pair;
}
extern "C" {
    pub fn ClearAdventureLogStruct();
}
extern "C" {
    pub fn SetAdventureLogCompleted(entry_id: u32);
}
extern "C" {
    pub fn IsAdventureLogNotEmpty() -> bool_;
}
extern "C" {
    pub fn GetAdventureLogCompleted(entry_id: u32) -> bool_;
}
extern "C" {
    pub fn IncrementNbDungeonsCleared();
}
extern "C" {
    pub fn GetNbDungeonsCleared() -> u32;
}
extern "C" {
    pub fn IncrementNbFriendRescues();
}
extern "C" {
    pub fn GetNbFriendRescues() -> u32;
}
extern "C" {
    pub fn IncrementNbEvolutions();
}
extern "C" {
    pub fn GetNbEvolutions() -> u32;
}
extern "C" {
    pub fn IncrementNbSteals();
}
extern "C" {
    pub fn IncrementNbEggsHatched();
}
extern "C" {
    pub fn GetNbEggsHatched() -> u32;
}
extern "C" {
    pub fn GetNbPokemonJoined() -> u32;
}
extern "C" {
    pub fn GetNbMovesLearned() -> u32;
}
extern "C" {
    pub fn SetVictoriesOnOneFloor(nb_victories: u32);
}
extern "C" {
    pub fn GetVictoriesOnOneFloor() -> u32;
}
extern "C" {
    pub fn SetPokemonJoined(monster_id: monster_id);
}
extern "C" {
    pub fn SetPokemonBattled(monster_id: monster_id);
}
extern "C" {
    pub fn GetNbPokemonBattled() -> u32;
}
extern "C" {
    pub fn IncrementNbBigTreasureWins();
}
extern "C" {
    pub fn SetNbBigTreasureWins(nb_big_treasure_wins: u32);
}
extern "C" {
    pub fn GetNbBigTreasureWins() -> u32;
}
extern "C" {
    pub fn SetNbRecycled(nb_recycled: u32);
}
extern "C" {
    pub fn GetNbRecycled() -> u32;
}
extern "C" {
    pub fn IncrementNbSkyGiftsSent();
}
extern "C" {
    pub fn SetNbSkyGiftsSent(nb_sky_gifts_sent: u32);
}
extern "C" {
    pub fn GetNbSkyGiftsSent() -> u32;
}
extern "C" {
    pub fn ComputeSpecialCounters();
}
extern "C" {
    pub fn RecruitSpecialPokemonLog(monster_id: monster_id);
}
extern "C" {
    pub fn IncrementNbFainted();
}
extern "C" {
    pub fn GetNbFainted() -> u32;
}
extern "C" {
    pub fn SetItemAcquired(item_id: item_id);
}
extern "C" {
    pub fn GetNbItemAcquired() -> u32;
}
extern "C" {
    pub fn SetChallengeLetterCleared(challenge_id: u32);
}
extern "C" {
    pub fn GetSentryDutyGamePoints(rank: i32) -> u32;
}
extern "C" {
    pub fn SetSentryDutyGamePoints(points: u32) -> i32;
}
extern "C" {
    pub fn SubFixedPoint(val_fp: u32, dec_fp: u32) -> u32;
}
extern "C" {
    pub fn BinToDecFixedPoint(q16: *mut u32) -> u32;
}
extern "C" {
    pub fn CeilFixedPoint(val_fp: u32) -> crate::ctypes::c_int;
}
extern "C" {
    pub fn DungeonGoesUp(dungeon_id: dungeon_id) -> bool_;
}
extern "C" {
    pub fn GetMaxRescueAttempts(dungeon_id: dungeon_id) -> i8;
}
extern "C" {
    pub fn GetLeaderChangeFlag(dungeon_id: dungeon_id) -> bool_;
}
extern "C" {
    pub fn JoinedAtRangeCheck(joined_at: dungeon_id_8) -> bool_;
}
extern "C" {
    pub fn JoinedAtRangeCheck2(joined_at: dungeon_id_8) -> bool_;
}
extern "C" {
    pub fn GetRankUpEntry(rank: crate::ctypes::c_int) -> *mut rankup_table_entry;
}
extern "C" {
    pub fn GetMonsterGender(monster_id: monster_id) -> monster_gender::Type;
}
extern "C" {
    pub fn GetSpriteSize(monster_id: monster_id) -> u8;
}
extern "C" {
    pub fn GetSpriteFileSize(monster_id: monster_id) -> u8;
}
extern "C" {
    pub fn GetCanMoveFlag(monster_id: monster_id) -> bool_;
}
extern "C" {
    pub fn GetMonsterPreEvolution(monster_id: monster_id) -> monster_id;
}
extern "C" {
    pub fn GetEvolutions(
        monster_id: monster_id,
        output_list: *mut monster_id,
        skip_sprite_size_check: bool_,
        skip_shedinja_check: bool_,
    ) -> crate::ctypes::c_int;
}
extern "C" {
    pub fn GetBaseForm(arg1: monster_id) -> monster_id;
}
extern "C" {
    pub fn GetMonsterIdFromSpawnEntry(arg1: *mut monster_spawn_entry) -> monster_id;
}
extern "C" {
    pub fn GetMonsterGenderVeneer(monster_id: monster_id) -> monster_gender::Type;
}
extern "C" {
    pub fn GetMonsterLevelFromSpawnEntry(entry: *mut monster_spawn_entry) -> u8;
}
extern "C" {
    pub fn IsUnown(monster_id: monster_id) -> bool_;
}
extern "C" {
    pub fn IsShaymin(monster_id: monster_id) -> bool_;
}
extern "C" {
    pub fn IsCastform(monster_id: monster_id) -> bool_;
}
extern "C" {
    pub fn IsCherrim(monster_id: monster_id) -> bool_;
}
extern "C" {
    pub fn IsDeoxys(monster_id: monster_id) -> bool_;
}
extern "C" {
    pub fn FemaleToMaleForm(monster_id: monster_id) -> monster_id;
}
extern "C" {
    pub fn IsMonsterOnTeam(monster_id: monster_id, param_2: crate::ctypes::c_int) -> bool_;
}
extern "C" {
    pub fn GetHeroData() -> *mut ground_monster;
}
extern "C" {
    pub fn GetPartnerData() -> *mut ground_monster;
}
extern "C" {
    pub fn CheckTeamMemberField8(param_1: undefined2) -> bool_;
}
extern "C" {
    pub fn GetTeamMemberData(index: u8) -> *mut team_member;
}
extern "C" {
    pub fn SetTeamSetupHeroAndPartnerOnly();
}
extern "C" {
    pub fn SetTeamSetupHeroOnly();
}
extern "C" {
    pub fn GetPartyMembers(party_members: *mut u16) -> crate::ctypes::c_int;
}
extern "C" {
    pub fn IqSkillFlagTest(iq_skill_flags: *mut u32, iq_id: iq_skill_id) -> bool_;
}
extern "C" {
    pub fn GetExplorerMazeMonster(entry_number: u8) -> *mut ground_monster;
}
extern "C" {
    pub fn GetSosMailCount(param_1: crate::ctypes::c_int, param_2: bool_) -> crate::ctypes::c_int;
}
extern "C" {
    pub fn GenerateMission(
        param_1: *mut undefined,
        mission_data: *mut mission,
    ) -> mission_generation_result::Type;
}
extern "C" {
    pub fn GenerateDailyMissions();
}
extern "C" {
    pub fn DungeonRequestsDone(param_1: u8, param_2: bool_) -> crate::ctypes::c_int;
}
extern "C" {
    pub fn DungeonRequestsDoneWrapper(param_1: u8) -> crate::ctypes::c_int;
}
extern "C" {
    pub fn AnyDungeonRequestsDone(param_1: u8) -> bool_;
}
extern "C" {
    pub fn GetMissionByTypeAndDungeon(
        start_index: crate::ctypes::c_int,
        mission_type: mission_type::Type,
        subtype_struct: *mut undefined,
        dungeon_id: dungeon_id,
    ) -> crate::ctypes::c_int;
}
extern "C" {
    pub fn CheckAcceptedMissionByTypeAndDungeon(
        mission_type: mission_type::Type,
        subtype_struct: *mut undefined,
        dungeon_id: dungeon_id,
    ) -> bool_;
}
extern "C" {
    pub fn ClearMissionData(mission: *mut mission);
}
extern "C" {
    pub fn IsMonsterMissionAllowed(monster_id: monster_id) -> bool_;
}
extern "C" {
    pub fn CanMonsterBeUsedForMissionWrapper(monster_id: monster_id) -> bool_;
}
extern "C" {
    pub fn CanMonsterBeUsedForMission(monster_id: monster_id, check_story_banned: bool_) -> bool_;
}
extern "C" {
    pub fn IsMonsterMissionAllowedStory(monster_id: monster_id) -> bool_;
}
extern "C" {
    pub fn ScriptSpecialProcess0x3D();
}
extern "C" {
    pub fn ScriptSpecialProcess0x3E();
}
extern "C" {
    pub fn ScriptSpecialProcess0x17();
}
extern "C" {
    pub fn ItemAtTableIdx(idx: crate::ctypes::c_int, item: *mut bulk_item);
}
extern "C" {
    pub fn WaitForInterrupt();
}
extern "C" {
    pub fn FileInit(file: *mut file_stream);
}
extern "C" {
    pub fn Abs(x: crate::ctypes::c_int) -> crate::ctypes::c_int;
}
extern "C" {
    pub fn Mbtowc(
        pwc: *mut wchar_t,
        s: *const crate::ctypes::c_char,
        n: u32,
    ) -> crate::ctypes::c_int;
}
extern "C" {
    pub fn TryAssignByte(ptr: *mut u8, val: u8) -> bool_;
}
extern "C" {
    pub fn TryAssignByteWrapper(ptr: *mut u8, val: u8) -> bool_;
}
extern "C" {
    pub fn Wcstombs(dest: *mut crate::ctypes::c_char, src: *mut wchar_t, n: u32) -> u32;
}
extern "C" {
    pub fn Memcpy(dest: *mut crate::ctypes::c_void, src: *mut crate::ctypes::c_void, n: u32);
}
extern "C" {
    pub fn Memmove(dest: *mut crate::ctypes::c_void, src: *mut crate::ctypes::c_void, n: u32);
}
extern "C" {
    pub fn Memset(
        s: *mut crate::ctypes::c_void,
        c: crate::ctypes::c_int,
        n: u32,
    ) -> *mut crate::ctypes::c_void;
}
extern "C" {
    pub fn Memchr(
        s: *mut crate::ctypes::c_void,
        c: crate::ctypes::c_char,
        n: u32,
    ) -> *mut crate::ctypes::c_void;
}
extern "C" {
    pub fn Memcmp(
        s1: *mut crate::ctypes::c_void,
        s2: *mut crate::ctypes::c_void,
        n: u32,
    ) -> crate::ctypes::c_int;
}
extern "C" {
    pub fn MemsetInternal(s: *mut crate::ctypes::c_void, c: crate::ctypes::c_int, n: u32);
}
extern "C" {
    pub fn VsprintfInternalSlice(
        append: slice_append_fn_t,
        str_: *mut slice,
        format: *const crate::ctypes::c_char,
        ap: va_list,
    ) -> crate::ctypes::c_int;
}
extern "C" {
    pub fn TryAppendToSlice(
        slice: *mut slice,
        data: *mut crate::ctypes::c_void,
        data_len: u32,
    ) -> bool_;
}
extern "C" {
    pub fn VsprintfInternal(
        str_: *mut crate::ctypes::c_char,
        maxlen: u32,
        format: *const crate::ctypes::c_char,
        ap: va_list,
    ) -> crate::ctypes::c_int;
}
extern "C" {
    pub fn Vsprintf(
        str_: *mut crate::ctypes::c_char,
        format: *const crate::ctypes::c_char,
        ap: va_list,
    ) -> crate::ctypes::c_int;
}
extern "C" {
    pub fn Snprintf(
        str_: *mut crate::ctypes::c_char,
        n: u32,
        format: *const crate::ctypes::c_char,
        ...
    ) -> crate::ctypes::c_int;
}
extern "C" {
    pub fn Sprintf(
        str_: *mut crate::ctypes::c_char,
        format: *const crate::ctypes::c_char,
        ...
    ) -> crate::ctypes::c_int;
}
extern "C" {
    pub fn Strlen(s: *const crate::ctypes::c_char) -> u32;
}
extern "C" {
    pub fn Strcpy(dest: *mut crate::ctypes::c_char, src: *const crate::ctypes::c_char);
}
extern "C" {
    pub fn Strncpy(dest: *mut crate::ctypes::c_char, src: *const crate::ctypes::c_char, n: u32);
}
extern "C" {
    pub fn Strcat(dest: *mut crate::ctypes::c_char, src: *const crate::ctypes::c_char);
}
extern "C" {
    pub fn Strncat(dest: *mut crate::ctypes::c_char, src: *const crate::ctypes::c_char, n: u32);
}
extern "C" {
    pub fn Strcmp(
        s1: *const crate::ctypes::c_char,
        s2: *const crate::ctypes::c_char,
    ) -> crate::ctypes::c_int;
}
extern "C" {
    pub fn Strncmp(
        s1: *const crate::ctypes::c_char,
        s2: *const crate::ctypes::c_char,
        n: u32,
    ) -> crate::ctypes::c_int;
}
extern "C" {
    pub fn Strchr(
        string: *const crate::ctypes::c_char,
        c: crate::ctypes::c_char,
    ) -> *mut crate::ctypes::c_char;
}
extern "C" {
    pub fn Strcspn(
        string: *const crate::ctypes::c_char,
        stopset: *const crate::ctypes::c_char,
    ) -> u32;
}
extern "C" {
    pub fn Strstr(
        haystack: *const crate::ctypes::c_char,
        needle: *const crate::ctypes::c_char,
    ) -> *mut crate::ctypes::c_char;
}
extern "C" {
    pub fn Wcslen(ws: *mut wchar_t) -> u32;
}
extern "C" {
    pub fn AddFloat(a: f32, b: f32) -> f32;
}
extern "C" {
    pub fn DivideFloat(dividend: f32, divisor: f32) -> f32;
}
extern "C" {
    pub fn FloatToDouble(f: f32) -> f64;
}
extern "C" {
    pub fn FloatToInt(f: f32) -> crate::ctypes::c_int;
}
extern "C" {
    pub fn IntToFloat(i: crate::ctypes::c_int) -> f32;
}
extern "C" {
    pub fn UIntToFloat(u: u32) -> f32;
}
extern "C" {
    pub fn MultiplyFloat(a: f32, b: f32) -> f32;
}
extern "C" {
    pub fn Sqrtf(x: f32) -> f32;
}
extern "C" {
    pub fn SubtractFloat(a: f32, b: f32) -> f32;
}
extern "C" {
    pub fn DivideInt(
        dividend: crate::ctypes::c_int,
        divisor: crate::ctypes::c_int,
    ) -> crate::ctypes::c_ulonglong;
}
extern "C" {
    pub fn DivideUInt(dividend: u32, divisor: u32) -> crate::ctypes::c_ulonglong;
}
extern "C" {
    pub fn DivideUIntNoZeroCheck(dividend: u32, divisor: u32) -> crate::ctypes::c_ulonglong;
}
extern "C" {
    pub fn CreateMainMenus();
}
extern "C" {
    pub fn AddMainMenuOption(action_id: crate::ctypes::c_int, enabled: bool_);
}
extern "C" {
    pub fn AddSubMenuOption(action_id: crate::ctypes::c_int, enabled: bool_);
}
extern "C" {
    pub fn ScriptSpecialProcessCall(
        param_1: *mut undefined4,
        id: special_process_id,
        arg1: crate::ctypes::c_int,
        arg2: crate::ctypes::c_int,
    ) -> crate::ctypes::c_int;
}
extern "C" {
    pub fn GetSpecialRecruitmentSpecies(idx: crate::ctypes::c_int) -> monster_id;
}
extern "C" {
    pub fn PrepareMenuAcceptTeamMember(idx: crate::ctypes::c_int);
}
extern "C" {
    pub fn InitRandomNpcJobs(job_type: crate::ctypes::c_int, param_2: undefined2);
}
extern "C" {
    pub fn GetRandomNpcJobType() -> crate::ctypes::c_int;
}
extern "C" {
    pub fn GetRandomNpcJobSubtype() -> crate::ctypes::c_int;
}
extern "C" {
    pub fn GetRandomNpcJobStillAvailable() -> bool_;
}
extern "C" {
    pub fn AcceptRandomNpcJob() -> bool_;
}
extern "C" {
    pub fn GroundMainLoop(mode: crate::ctypes::c_int) -> crate::ctypes::c_int;
}
extern "C" {
    pub fn GetAllocArenaGround(arena: *mut mem_arena, flags: u32) -> *mut mem_arena;
}
extern "C" {
    pub fn GetFreeArenaGround(arena: *mut mem_arena, flags: u32) -> *mut mem_arena;
}
extern "C" {
    pub fn GroundMainReturnDungeon();
}
extern "C" {
    pub fn GroundMainNextDay();
}
extern "C" {
    pub fn JumpToTitleScreen(arg: crate::ctypes::c_int) -> bool_;
}
extern "C" {
    pub fn ReturnToTitleScreen(fade_duration: u32) -> bool_;
}
extern "C" {
    pub fn ScriptSpecialProcess0x16(param_1: bool_);
}
extern "C" {
    pub fn StatusUpdate();
}
extern "C" {
    pub fn GetPersonality() -> crate::ctypes::c_int;
}
extern "C" {
    pub fn DungeonAlloc() -> *mut dungeon;
}
extern "C" {
    pub fn GetDungeonPtrMaster() -> *mut dungeon;
}
extern "C" {
    pub fn DungeonZInit();
}
extern "C" {
    pub fn DungeonFree();
}
extern "C" {
    pub fn RunDungeon(
        dungeon_init_data: *mut dungeon_init,
        dungeon: *mut dungeon,
    ) -> crate::ctypes::c_int;
}
extern "C" {
    pub fn EntityIsValid(entity: *mut entity) -> bool_;
}
extern "C" {
    pub fn GetFloorType() -> floor_type::Type;
}
extern "C" {
    pub fn TryForcedLoss(skip_floor_end_check: bool_) -> bool_;
}
extern "C" {
    pub fn FixedRoomIsSubstituteRoom() -> bool_;
}
extern "C" {
    pub fn StoryRestrictionsEnabled() -> bool_;
}
extern "C" {
    pub fn FadeToBlack();
}
extern "C" {
    pub fn GetTileAtEntity(entity: *mut entity) -> *mut tile;
}
extern "C" {
    pub fn CanTargetEntity(user: *mut entity, target: *mut entity) -> bool_;
}
extern "C" {
    pub fn CanTargetPosition(monster: *mut entity, position: *mut position) -> bool_;
}
extern "C" {
    pub fn SubstitutePlaceholderStringTags(
        string_id: crate::ctypes::c_int,
        entity: *mut entity,
        param_3: undefined4,
    );
}
extern "C" {
    pub fn UpdateMapSurveyorFlag() -> bool_;
}
extern "C" {
    pub fn ItemIsActive(entity: *mut entity, item_id: item_id) -> bool_;
}
extern "C" {
    pub fn UpdateStatusIconFlags(entity: *mut entity);
}
extern "C" {
    pub fn IsOnMonsterSpawnList(monster_id: monster_id) -> bool_;
}
extern "C" {
    pub fn GetMonsterIdToSpawn(spawn_weight: crate::ctypes::c_int) -> monster_id;
}
extern "C" {
    pub fn GetMonsterLevelToSpawn(monster_id: monster_id) -> u8;
}
extern "C" {
    pub fn GetDirectionTowardsPosition(
        origin: *mut position,
        target: *mut position,
    ) -> direction_id::Type;
}
extern "C" {
    pub fn GetChebyshevDistance(
        position_a: *mut position,
        position_b: *mut position,
    ) -> crate::ctypes::c_int;
}
extern "C" {
    pub fn IsPositionInSight(
        origin: *mut position,
        target: *mut position,
        user_has_dropeye: bool_,
    ) -> bool_;
}
extern "C" {
    pub fn GetLeader() -> *mut entity;
}
extern "C" {
    pub fn TickStatusTurnCounter(counter: *mut u8) -> u8;
}
extern "C" {
    pub fn AdvanceFrame(param_1: undefined);
}
extern "C" {
    pub fn GenerateDungeonRngSeed() -> u32;
}
extern "C" {
    pub fn GetDungeonRngPreseed() -> u32;
}
extern "C" {
    pub fn SetDungeonRngPreseed(preseed: u32);
}
extern "C" {
    pub fn InitDungeonRng(seed: u32);
}
extern "C" {
    pub fn DungeonRand16Bit() -> u32;
}
extern "C" {
    pub fn DungeonRandInt(n: u32) -> u32;
}
extern "C" {
    pub fn DungeonRandRange(
        x: crate::ctypes::c_int,
        y: crate::ctypes::c_int,
    ) -> crate::ctypes::c_int;
}
extern "C" {
    pub fn DungeonRandOutcome(percentage: crate::ctypes::c_int) -> bool_;
}
extern "C" {
    pub fn CalcStatusDuration(
        entity: *mut entity,
        turn_range: *mut i16,
        iq_skill_effects: bool_,
    ) -> crate::ctypes::c_int;
}
extern "C" {
    pub fn DungeonRngUnsetSecondary();
}
extern "C" {
    pub fn DungeonRngSetSecondary(i: crate::ctypes::c_int);
}
extern "C" {
    pub fn DungeonRngSetPrimary();
}
extern "C" {
    pub fn TrySwitchPlace(user: *mut entity, target: *mut entity);
}
extern "C" {
    pub fn ClearMonsterActionFields(monster_action_field: *mut crate::ctypes::c_void);
}
extern "C" {
    pub fn SetMonsterActionFields(
        monster_action_field: *mut crate::ctypes::c_void,
        action_id: action_16,
    );
}
extern "C" {
    pub fn SetActionPassTurnOrWalk(
        monster_action_field: *mut crate::ctypes::c_void,
        monster_id: monster_id,
    );
}
extern "C" {
    pub fn GetItemAction(item_id: crate::ctypes::c_int) -> action::Type;
}
extern "C" {
    pub fn AddDungeonSubMenuOption(action_id: crate::ctypes::c_int, enabled: bool_);
}
extern "C" {
    pub fn SetActionRegularAttack(
        monster_action_field: *mut crate::ctypes::c_void,
        direction: direction_id::Type,
    );
}
extern "C" {
    pub fn SetActionUseMoveAi(
        monster_action_field: *mut crate::ctypes::c_void,
        move_index: u8,
        direction: direction_id::Type,
    );
}
extern "C" {
    pub fn RunFractionalTurn(is_first_loop: bool_);
}
extern "C" {
    pub fn RunLeaderTurn(param_1: undefined) -> bool_;
}
extern "C" {
    pub fn TrySpawnMonsterAndActivatePlusMinus();
}
extern "C" {
    pub fn IsFloorOver() -> bool_;
}
extern "C" {
    pub fn DecrementWindCounter();
}
extern "C" {
    pub fn SetForcedLossReason(forced_loss_reason: forced_loss_reason::Type);
}
extern "C" {
    pub fn GetForcedLossReason() -> forced_loss_reason::Type;
}
extern "C" {
    pub fn ChangeLeader();
}
extern "C" {
    pub fn ResetDamageDesc(damage_desc: *mut undefined4);
}
extern "C" {
    pub fn GetSpriteIndex(monster_id: monster_id) -> u16;
}
extern "C" {
    pub fn FloorNumberIsEven() -> bool_;
}
extern "C" {
    pub fn EuFaintCheck(non_team_member_fainted: bool_, set_unk_byte: bool_);
}
extern "C" {
    pub fn HandleFaint(
        fainted_entity: *mut entity,
        faint_reason: crate::ctypes::c_int,
        killer: *mut entity,
    );
}
extern "C" {
    pub fn UpdateAiTargetPos(monster: *mut entity);
}
extern "C" {
    pub fn GetKecleonIdToSpawnByFloor() -> monster_id;
}
extern "C" {
    pub fn LoadMonsterSprite(monster_id: monster_id, param_2: undefined);
}
extern "C" {
    pub fn TryActivateSlowStart();
}
extern "C" {
    pub fn TryActivateArtificialWeatherAbilities();
}
extern "C" {
    pub fn DefenderAbilityIsActive(
        attacker: *mut entity,
        defender: *mut entity,
        ability_id: ability_id,
        attacker_ability_enabled: bool_,
    ) -> bool_;
}
extern "C" {
    pub fn IsMonster(entity: *mut entity) -> bool_;
}
extern "C" {
    pub fn TryActivateTruant(entity: *mut entity);
}
extern "C" {
    pub fn RestorePpAllMovesSetFlags(entity: *mut entity);
}
extern "C" {
    pub fn ShouldMonsterHeadToStairs(entity: *mut entity) -> bool_;
}
extern "C" {
    pub fn MewSpawnCheck(monster_id: monster_id, fail_if_mew: bool_) -> bool_;
}
extern "C" {
    pub fn ExclusiveItemEffectIsActive(
        entity: *mut entity,
        effect_id: exclusive_item_effect_id,
    ) -> bool_;
}
extern "C" {
    pub fn GetTeamMemberWithIqSkill(iq_skill: iq_skill_id) -> *mut entity;
}
extern "C" {
    pub fn TeamMemberHasEnabledIqSkill(iq_skill: iq_skill_id) -> bool_;
}
extern "C" {
    pub fn TeamLeaderIqSkillIsEnabled(iq_skill: iq_skill_id) -> bool_;
}
extern "C" {
    pub fn HasLowHealth(entity: *mut entity) -> bool_;
}
extern "C" {
    pub fn IsSpecialStoryAlly(monster: *mut monster) -> bool_;
}
extern "C" {
    pub fn IsExperienceLocked(monster: *mut monster) -> bool_;
}
extern "C" {
    pub fn InitTeam(param_1: undefined);
}
extern "C" {
    pub fn SpawnMonster(
        monster_data: *mut spawned_monster_data,
        cannot_be_asleep: bool_,
    ) -> *mut entity;
}
extern "C" {
    pub fn InitTeamMember(
        arg1: monster_id,
        x_position: i16,
        y_position: i16,
        team_member_data: *mut team_member,
        param_5: undefined,
        param_6: undefined,
        param_7: undefined,
        param_8: undefined,
        param_9: undefined,
    );
}
extern "C" {
    pub fn ExecuteMonsterAction(monster: *mut entity);
}
extern "C" {
    pub fn HasStatusThatPreventsActing(monster: *mut entity) -> bool_;
}
extern "C" {
    pub fn CalcSpeedStage(
        entity: *mut entity,
        counter_weight: crate::ctypes::c_int,
    ) -> crate::ctypes::c_int;
}
extern "C" {
    pub fn CalcSpeedStageWrapper(entity: *mut entity) -> crate::ctypes::c_int;
}
extern "C" {
    pub fn GetNumberOfAttacks(entity: *mut entity) -> crate::ctypes::c_int;
}
extern "C" {
    pub fn IsMonsterCornered(monster: *mut entity) -> bool_;
}
extern "C" {
    pub fn CanAttackInDirection(monster: *mut entity, direction: direction_id::Type) -> bool_;
}
extern "C" {
    pub fn CanAiMonsterMoveInDirection(
        monster: *mut entity,
        direction: direction_id::Type,
        out_monster_in_target_position: *mut bool_,
    ) -> bool_;
}
extern "C" {
    pub fn ShouldMonsterRunAway(monster: *mut entity) -> bool_;
}
extern "C" {
    pub fn ShouldMonsterRunAwayVariation(monster: *mut entity, param_2: undefined) -> bool_;
}
extern "C" {
    pub fn NoGastroAcidStatus(entity: *mut entity) -> bool_;
}
extern "C" {
    pub fn AbilityIsActive(entity: *mut entity, ability_id: ability_id) -> bool_;
}
extern "C" {
    pub fn LevitateIsActive(entity: *mut entity) -> bool_;
}
extern "C" {
    pub fn MonsterIsType(entity: *mut entity, type_id: type_id) -> bool_;
}
extern "C" {
    pub fn CanSeeInvisibleMonsters(entity: *mut entity) -> bool_;
}
extern "C" {
    pub fn HasDropeyeStatus(entity: *mut entity) -> bool_;
}
extern "C" {
    pub fn IqSkillIsEnabled(entity: *mut entity, iq_id: iq_skill_id) -> bool_;
}
extern "C" {
    pub fn GetMoveTypeForMonster(entity: *mut entity, move_: *mut move_) -> type_id;
}
extern "C" {
    pub fn GetMovePower(entity: *mut entity, move_: *mut move_) -> crate::ctypes::c_int;
}
extern "C" {
    pub fn AddExpSpecial(
        attacker: *mut entity,
        defender: *mut entity,
        base_exp: crate::ctypes::c_int,
    );
}
extern "C" {
    pub fn EnemyEvolution(enemy: *mut entity);
}
extern "C" {
    pub fn EvolveMonster(
        monster: *mut entity,
        param_2: *mut undefined4,
        new_monster_id: monster_id,
    );
}
extern "C" {
    pub fn DisplayActions(param_1: *mut entity) -> bool_;
}
extern "C" {
    pub fn ApplyDamage(
        attacker: *mut entity,
        defender: *mut entity,
        damage_data: *mut damage_data,
        param_4: undefined4,
        param_5: *mut undefined4,
        param_6: *mut undefined4,
    ) -> bool_;
}
extern "C" {
    pub fn GetSleepAnimationId(entity: *mut entity) -> u8;
}
extern "C" {
    pub fn EndFrozenClassStatus(user: *mut entity, target: *mut entity, log: bool_);
}
extern "C" {
    pub fn EndCringeClassStatus(user: *mut entity, target: *mut entity);
}
extern "C" {
    pub fn RunMonsterAi(monster: *mut entity, param_2: undefined);
}
extern "C" {
    pub fn GetTypeMatchup(
        attacker: *mut entity,
        defender: *mut entity,
        target_type_idx: crate::ctypes::c_int,
        attack_type: type_id,
    ) -> type_matchup::Type;
}
extern "C" {
    pub fn CalcDamage(
        attacker: *mut entity,
        defender: *mut entity,
        attack_type: type_id,
        attack_power: crate::ctypes::c_int,
        crit_chance: crate::ctypes::c_int,
        damage_out: *mut damage_data,
        damage_mult_fp: crate::ctypes::c_int,
        move_id: move_id,
        param_9: crate::ctypes::c_int,
    );
}
extern "C" {
    pub fn CalcRecoilDamageFixed(
        attacker: *mut entity,
        fixed_damage: crate::ctypes::c_int,
        param_3: undefined4,
        damage_out: *mut damage_data,
        move_id: move_id,
        attack_type: type_id,
        param_7: i16,
        message_type: undefined4,
        param_9: undefined4,
        param_10: undefined4,
    );
}
extern "C" {
    pub fn CalcDamageFixed(
        attacker: *mut entity,
        defender: *mut entity,
        fixed_damage: crate::ctypes::c_int,
        param_4: undefined4,
        damage_out: *mut damage_data,
        attack_type: type_id,
        move_category: move_category::Type,
        param_8: i16,
        message_type: undefined4,
        param_10: undefined4,
        param_11: undefined4,
    );
}
extern "C" {
    pub fn CalcDamageFixedWrapper(
        attacker: *mut entity,
        defender: *mut entity,
        fixed_damage: crate::ctypes::c_int,
        param_4: undefined4,
        damage_out: *mut damage_data,
        attack_type: type_id,
        move_category: move_category::Type,
        param_8: i16,
        param_9: undefined4,
        param_10: undefined4,
        param_11: undefined4,
    );
}
extern "C" {
    pub fn CalcDamageFixedNoCategory(
        attacker: *mut entity,
        defender: *mut entity,
        fixed_damage: crate::ctypes::c_int,
        param_4: undefined4,
        damage_out: *mut damage_data,
        attack_type: type_id,
        param_7: i16,
        param_8: undefined4,
        param_9: undefined4,
        param_10: undefined4,
    );
}
extern "C" {
    pub fn ResetDamageCalcScratchSpace();
}
extern "C" {
    pub fn TrySpawnMonsterAndTickSpawnCounter();
}
extern "C" {
    pub fn AuraBowIsActive(entity: *mut entity) -> bool_;
}
extern "C" {
    pub fn ExclusiveItemOffenseBoost(
        entity: *mut entity,
        move_category_idx: crate::ctypes::c_int,
    ) -> crate::ctypes::c_int;
}
extern "C" {
    pub fn ExclusiveItemDefenseBoost(
        entity: *mut entity,
        move_category_idx: crate::ctypes::c_int,
    ) -> crate::ctypes::c_int;
}
extern "C" {
    pub fn TickNoSlipCap(entity: *mut entity);
}
extern "C" {
    pub fn TickStatusAndHealthRegen(entity: *mut entity);
}
extern "C" {
    pub fn InflictSleepStatusSingle(entity: *mut entity, turns: crate::ctypes::c_int);
}
extern "C" {
    pub fn TryInflictSleepStatus(
        user: *mut entity,
        target: *mut entity,
        turns: crate::ctypes::c_int,
        log_failure: bool_,
    );
}
extern "C" {
    pub fn TryInflictNightmareStatus(
        user: *mut entity,
        target: *mut entity,
        turns: crate::ctypes::c_int,
    );
}
extern "C" {
    pub fn TryInflictNappingStatus(
        user: *mut entity,
        target: *mut entity,
        turns: crate::ctypes::c_int,
    );
}
extern "C" {
    pub fn TryInflictYawningStatus(
        user: *mut entity,
        target: *mut entity,
        turns: crate::ctypes::c_int,
    );
}
extern "C" {
    pub fn TryInflictSleeplessStatus(user: *mut entity, target: *mut entity);
}
extern "C" {
    pub fn TryInflictPausedStatus(
        user: *mut entity,
        target: *mut entity,
        param_3: crate::ctypes::c_int,
        turns: crate::ctypes::c_int,
        log_failure: bool_,
        check_only: bool_,
    ) -> bool_;
}
extern "C" {
    pub fn TryInflictInfatuatedStatus(
        user: *mut entity,
        target: *mut entity,
        log_failure: bool_,
        check_only: bool_,
    ) -> bool_;
}
extern "C" {
    pub fn TryInflictBurnStatus(
        user: *mut entity,
        target: *mut entity,
        special_effect: bool_,
        log_failure: bool_,
        check_only: bool_,
    ) -> bool_;
}
extern "C" {
    pub fn TryInflictBurnStatusWholeTeam();
}
extern "C" {
    pub fn TryInflictPoisonedStatus(
        user: *mut entity,
        target: *mut entity,
        log_failure: bool_,
        check_only: bool_,
    ) -> bool_;
}
extern "C" {
    pub fn TryInflictBadlyPoisonedStatus(
        user: *mut entity,
        target: *mut entity,
        log_failure: bool_,
        check_only: bool_,
    ) -> bool_;
}
extern "C" {
    pub fn TryInflictFrozenStatus(user: *mut entity, target: *mut entity, log_failure: bool_);
}
extern "C" {
    pub fn TryInflictConstrictionStatus(
        user: *mut entity,
        target: *mut entity,
        animation_id: crate::ctypes::c_int,
        log_failure: bool_,
    );
}
extern "C" {
    pub fn TryInflictShadowHoldStatus(user: *mut entity, target: *mut entity, log_failure: bool_);
}
extern "C" {
    pub fn TryInflictIngrainStatus(user: *mut entity, target: *mut entity);
}
extern "C" {
    pub fn TryInflictWrappedStatus(user: *mut entity, target: *mut entity);
}
extern "C" {
    pub fn FreeOtherWrappedMonsters(entity: *mut entity);
}
extern "C" {
    pub fn TryInflictPetrifiedStatus(user: *mut entity, target: *mut entity);
}
extern "C" {
    pub fn LowerOffensiveStat(
        user: *mut entity,
        target: *mut entity,
        stat_idx: crate::ctypes::c_int,
        n_stages: i16,
        param_5: undefined,
        param_6: undefined,
    );
}
extern "C" {
    pub fn LowerDefensiveStat(
        user: *mut entity,
        target: *mut entity,
        stat_idx: crate::ctypes::c_int,
        n_stages: i16,
        param_5: undefined,
        param_6: undefined,
    );
}
extern "C" {
    pub fn BoostOffensiveStat(
        user: *mut entity,
        target: *mut entity,
        stat_idx: crate::ctypes::c_int,
        n_stages: i16,
    );
}
extern "C" {
    pub fn BoostDefensiveStat(
        user: *mut entity,
        target: *mut entity,
        stat_idx: crate::ctypes::c_int,
        n_stages: i16,
    );
}
extern "C" {
    pub fn ApplyOffensiveStatMultiplier(
        user: *mut entity,
        target: *mut entity,
        stat_idx: crate::ctypes::c_int,
        multiplier: crate::ctypes::c_int,
        param_5: undefined,
    );
}
extern "C" {
    pub fn ApplyDefensiveStatMultiplier(
        user: *mut entity,
        target: *mut entity,
        stat_idx: crate::ctypes::c_int,
        multiplier: crate::ctypes::c_int,
        param_5: undefined,
    );
}
extern "C" {
    pub fn BoostHitChanceStat(
        user: *mut entity,
        target: *mut entity,
        stat_idx: crate::ctypes::c_int,
    );
}
extern "C" {
    pub fn LowerHitChanceStat(
        user: *mut entity,
        target: *mut entity,
        stat_idx: crate::ctypes::c_int,
        param_4: crate::ctypes::c_int,
    );
}
extern "C" {
    pub fn TryInflictCringeStatus(
        user: *mut entity,
        target: *mut entity,
        log_failure: bool_,
        check_only: bool_,
    ) -> bool_;
}
extern "C" {
    pub fn TryInflictParalysisStatus(
        user: *mut entity,
        target: *mut entity,
        log_failure: bool_,
        check_only: bool_,
    ) -> bool_;
}
extern "C" {
    pub fn BoostSpeed(
        user: *mut entity,
        target: *mut entity,
        n_stages: crate::ctypes::c_int,
        turns: crate::ctypes::c_int,
        log_failure: bool_,
    );
}
extern "C" {
    pub fn BoostSpeedOneStage(
        user: *mut entity,
        target: *mut entity,
        turns: crate::ctypes::c_int,
        log_failure: bool_,
    );
}
extern "C" {
    pub fn LowerSpeed(
        user: *mut entity,
        target: *mut entity,
        n_stages: crate::ctypes::c_int,
        log_failure: bool_,
    );
}
extern "C" {
    pub fn TrySealMove(user: *mut entity, target: *mut entity, log_failure: bool_) -> bool_;
}
extern "C" {
    pub fn BoostOrLowerSpeed(user: *mut entity, target: *mut entity);
}
extern "C" {
    pub fn ResetHitChanceStat(
        user: *mut entity,
        target: *mut entity,
        stat_idx: crate::ctypes::c_int,
        param_4: crate::ctypes::c_int,
    );
}
extern "C" {
    pub fn TryActivateQuickFeet(attacker: *mut entity, defender: *mut entity) -> bool_;
}
extern "C" {
    pub fn TryInflictConfusedStatus(
        user: *mut entity,
        target: *mut entity,
        log_failure: bool_,
        check_only: bool_,
    ) -> bool_;
}
extern "C" {
    pub fn TryInflictCoweringStatus(
        user: *mut entity,
        target: *mut entity,
        log_failure: bool_,
        check_only: bool_,
    ) -> bool_;
}
extern "C" {
    pub fn TryIncreaseHp(
        user: *mut entity,
        target: *mut entity,
        hp_restoration: crate::ctypes::c_int,
        max_hp_boost: crate::ctypes::c_int,
        log_failure: bool_,
    ) -> bool_;
}
extern "C" {
    pub fn TryInflictLeechSeedStatus(
        user: *mut entity,
        target: *mut entity,
        log_failure: bool_,
        check_only: bool_,
    ) -> bool_;
}
extern "C" {
    pub fn TryInflictDestinyBond(user: *mut entity, target: *mut entity);
}
extern "C" {
    pub fn IsBlinded(entity: *mut entity, check_held_item: bool_) -> bool_;
}
extern "C" {
    pub fn RestoreMovePP(
        user: *mut entity,
        target: *mut entity,
        pp: crate::ctypes::c_int,
        suppress_logs: bool_,
    );
}
extern "C" {
    pub fn SetReflectDamageCountdownTo4(entity: *mut entity);
}
extern "C" {
    pub fn HasConditionalGroundImmunity(entity: *mut entity) -> bool_;
}
extern "C" {
    pub fn Conversion2IsActive(entity: *mut entity) -> crate::ctypes::c_int;
}
extern "C" {
    pub fn AiConsiderMove(
        ai_possible_move: *mut ai_possible_move,
        monster: *mut entity,
        move_: *mut move_,
    ) -> crate::ctypes::c_int;
}
extern "C" {
    pub fn TryAddTargetToAiTargetList(
        current_num_targets: crate::ctypes::c_int,
        move_ai_range: move_target_and_range,
        user: *mut entity,
        target: *mut entity,
        move_: *mut move_,
        check_all_conditions: bool_,
    ) -> crate::ctypes::c_int;
}
extern "C" {
    pub fn IsAiTargetEligible(
        move_ai_range: move_target_and_range,
        user: *mut entity,
        target: *mut entity,
        move_: *mut move_,
        check_all_conditions: bool_,
    ) -> bool_;
}
extern "C" {
    pub fn IsTargetInRange(
        user: *mut entity,
        target: *mut entity,
        direction: direction_id::Type,
        n_tiles: crate::ctypes::c_int,
    ) -> bool_;
}
extern "C" {
    pub fn GetEntityMoveTargetAndRange(
        entity: *mut entity,
        move_: *mut move_,
        is_ai: bool_,
    ) -> move_target_and_range;
}
extern "C" {
    pub fn ApplyItemEffect(
        param_1: undefined4,
        param_2: undefined4,
        param_3: undefined4,
        attacker: *mut entity,
        defender: *mut entity,
        thrown_item: *mut item,
    );
}
extern "C" {
    pub fn ViolentSeedBoost(attacker: *mut entity, defender: *mut entity);
}
extern "C" {
    pub fn ApplyGummiBoostsDungeonMode(
        user: *mut entity,
        target: *mut entity,
        gummi_type: type_id,
        random_stat_boost: crate::ctypes::c_int,
    );
}
extern "C" {
    pub fn GetMaxPpWrapper(move_: *mut move_) -> crate::ctypes::c_int;
}
extern "C" {
    pub fn MoveIsNotPhysical(move_id: move_id) -> bool_;
}
extern "C" {
    pub fn TryPounce(user: *mut entity, target: *mut entity, direction: direction_id::Type);
}
extern "C" {
    pub fn TryBlowAway(user: *mut entity, target: *mut entity, direction: direction_id::Type);
}
extern "C" {
    pub fn TryWarp(
        user: *mut entity,
        target: *mut entity,
        warp_type: warp_type::Type,
        position: position,
    );
}
extern "C" {
    pub fn MoveHitCheck(
        attacker: *mut entity,
        defender: *mut entity,
        move_: *mut move_,
        use_second_accuracy: bool_,
    ) -> bool_;
}
extern "C" {
    pub fn DungeonRandOutcomeUserTargetInteraction(
        user: *mut entity,
        target: *mut entity,
        percentage: crate::ctypes::c_int,
    ) -> bool_;
}
extern "C" {
    pub fn DungeonRandOutcomeUserAction(
        user: *mut entity,
        percentage: crate::ctypes::c_int,
    ) -> bool_;
}
extern "C" {
    pub fn CanAiUseMove(
        monster: *mut entity,
        move_index: crate::ctypes::c_int,
        extra_checks: bool_,
    ) -> bool_;
}
extern "C" {
    pub fn CanMonsterUseMove(monster: *mut entity, move_: *mut move_, extra_checks: bool_)
        -> bool_;
}
extern "C" {
    pub fn UpdateMovePp(entity: *mut entity, can_consume_pp: bool_);
}
extern "C" {
    pub fn LowerSshort(x: crate::ctypes::c_int) -> crate::ctypes::c_int;
}
extern "C" {
    pub fn GetMoveAnimationId(
        move_: *mut move_,
        apparent_weather: weather_id::Type,
        should_play_alternative_animation: bool_,
    ) -> u16;
}
extern "C" {
    pub fn ShouldMovePlayAlternativeAnimation(user: *mut entity, move_: *mut move_) -> bool_;
}
extern "C" {
    pub fn DealDamageWithRecoil(
        attacker: *mut entity,
        defender: *mut entity,
        move_: *mut move_,
        item_id: item_id,
    ) -> bool_;
}
extern "C" {
    pub fn ExecuteMoveEffect(
        param_1: *mut undefined4,
        attacker: *mut entity,
        move_: *mut move_,
        param_4: undefined4,
        param_5: undefined4,
    );
}
extern "C" {
    pub fn DealDamage(
        attacker: *mut entity,
        defender: *mut entity,
        move_: *mut move_,
        damage_mult_fp: crate::ctypes::c_int,
        item_id: item_id,
    ) -> crate::ctypes::c_int;
}
extern "C" {
    pub fn CalcDamageProjectile(
        attacker: *mut entity,
        defender: *mut entity,
        move_: *mut move_,
        power: crate::ctypes::c_int,
        param_5: undefined4,
        param_6: undefined4,
    );
}
extern "C" {
    pub fn CalcDamageFinal(
        attacker: *mut entity,
        defender: *mut entity,
        move_: *mut move_,
        param_4: undefined4,
        param_5: *mut undefined4,
    ) -> crate::ctypes::c_int;
}
extern "C" {
    pub fn StatusCheckerCheck(attacker: *mut entity, move_: *mut move_) -> bool_;
}
extern "C" {
    pub fn GetApparentWeather(entity: *mut entity) -> weather_id::Type;
}
extern "C" {
    pub fn TryWeatherFormChange(entity: *mut entity);
}
extern "C" {
    pub fn GetTile(x: crate::ctypes::c_int, y: crate::ctypes::c_int) -> *mut tile;
}
extern "C" {
    pub fn GetTileSafe(x: crate::ctypes::c_int, y: crate::ctypes::c_int) -> *mut tile;
}
extern "C" {
    pub fn GetStairsRoom() -> u8;
}
extern "C" {
    pub fn GravityIsActive() -> bool_;
}
extern "C" {
    pub fn IsSecretBazaar() -> bool_;
}
extern "C" {
    pub fn IsSecretRoom() -> bool_;
}
extern "C" {
    pub fn GetMinimapData() -> *mut minimap_display_data;
}
extern "C" {
    pub fn SetMinimapDataE447(value: u8);
}
extern "C" {
    pub fn GetMinimapDataE447() -> u8;
}
extern "C" {
    pub fn SetMinimapDataE448(value: u8);
}
extern "C" {
    pub fn IsSecretFloor() -> bool_;
}
extern "C" {
    pub fn GetDungeonGenInfoUnk0C() -> undefined4;
}
extern "C" {
    pub fn LoadFixedRoomDataVeneer();
}
extern "C" {
    pub fn IsNormalFloor() -> bool_;
}
extern "C" {
    pub fn GenerateFloor();
}
extern "C" {
    pub fn GetTileTerrain(tile: *mut tile) -> terrain_type::Type;
}
extern "C" {
    pub fn DungeonRand100() -> u32;
}
extern "C" {
    pub fn FlagHallwayJunctions(
        x0: crate::ctypes::c_int,
        y0: crate::ctypes::c_int,
        x1: crate::ctypes::c_int,
        y1: crate::ctypes::c_int,
    );
}
extern "C" {
    pub fn GenerateStandardFloor(
        grid_size_x: crate::ctypes::c_int,
        grid_size_y: crate::ctypes::c_int,
        floor_props: *mut floor_properties,
    );
}
extern "C" {
    pub fn GenerateOuterRingFloor(floor_props: *mut floor_properties);
}
extern "C" {
    pub fn GenerateCrossroadsFloor(floor_props: *mut floor_properties);
}
extern "C" {
    pub fn GenerateLineFloor(floor_props: *mut floor_properties);
}
extern "C" {
    pub fn GenerateCrossFloor(floor_props: *mut floor_properties);
}
extern "C" {
    pub fn GenerateBeetleFloor(floor_props: *mut floor_properties);
}
extern "C" {
    pub fn MergeRoomsVertically(
        x: crate::ctypes::c_int,
        y0: crate::ctypes::c_int,
        dy: crate::ctypes::c_int,
        grid: *mut dungeon_grid_cell,
    );
}
extern "C" {
    pub fn GenerateOuterRoomsFloor(
        grid_size_x: crate::ctypes::c_int,
        grid_size_y: crate::ctypes::c_int,
        floor_props: *mut floor_properties,
    );
}
extern "C" {
    pub fn IsNotFullFloorFixedRoom(fixed_room_id: fixed_room_id) -> bool_;
}
extern "C" {
    pub fn GenerateFixedRoom(
        fixed_room_id: fixed_room_id,
        floor_props: *mut floor_properties,
    ) -> bool_;
}
extern "C" {
    pub fn GenerateOneRoomMonsterHouseFloor();
}
extern "C" {
    pub fn GenerateTwoRoomsWithMonsterHouseFloor();
}
extern "C" {
    pub fn GenerateExtraHallways(
        grid: *mut dungeon_grid_cell,
        grid_size_x: crate::ctypes::c_int,
        grid_size_y: crate::ctypes::c_int,
        n_extra_hallways: crate::ctypes::c_int,
    );
}
extern "C" {
    pub fn GetGridPositions(
        grid_starts_x: *mut crate::ctypes::c_int,
        grid_starts_y: *mut crate::ctypes::c_int,
        grid_size_x: crate::ctypes::c_int,
        grid_size_y: crate::ctypes::c_int,
    );
}
extern "C" {
    pub fn InitDungeonGrid(
        grid: *mut dungeon_grid_cell,
        grid_size_x: crate::ctypes::c_int,
        grid_size_y: crate::ctypes::c_int,
    );
}
extern "C" {
    pub fn AssignRooms(
        grid: *mut dungeon_grid_cell,
        grid_size_x: crate::ctypes::c_int,
        grid_size_y: crate::ctypes::c_int,
        n_rooms: crate::ctypes::c_int,
    );
}
extern "C" {
    pub fn CreateRoomsAndAnchors(
        grid: *mut dungeon_grid_cell,
        grid_size_x: crate::ctypes::c_int,
        grid_size_y: crate::ctypes::c_int,
        grid_starts_x: *mut crate::ctypes::c_int,
        grid_starts_y: *mut crate::ctypes::c_int,
        room_flags: u32,
    );
}
extern "C" {
    pub fn GenerateSecondaryStructures(
        grid: *mut dungeon_grid_cell,
        grid_size_x: crate::ctypes::c_int,
        grid_size_y: crate::ctypes::c_int,
    );
}
extern "C" {
    pub fn AssignGridCellConnections(
        grid: *mut dungeon_grid_cell,
        grid_size_x: crate::ctypes::c_int,
        grid_size_y: crate::ctypes::c_int,
        cursor_x: crate::ctypes::c_int,
        cursor_y: crate::ctypes::c_int,
        floor_props: *mut floor_properties,
    );
}
extern "C" {
    pub fn CreateGridCellConnections(
        grid: *mut dungeon_grid_cell,
        grid_size_x: crate::ctypes::c_int,
        grid_size_y: crate::ctypes::c_int,
        grid_starts_x: *mut crate::ctypes::c_int,
        grid_starts_y: *mut crate::ctypes::c_int,
        disable_room_merging: bool_,
    );
}
extern "C" {
    pub fn GenerateRoomImperfections(
        grid: *mut dungeon_grid_cell,
        grid_size_x: crate::ctypes::c_int,
        grid_size_y: crate::ctypes::c_int,
    );
}
extern "C" {
    pub fn CreateHallway(
        x0: crate::ctypes::c_int,
        y0: crate::ctypes::c_int,
        x1: crate::ctypes::c_int,
        y1: crate::ctypes::c_int,
        vertical: bool_,
        x_mid: crate::ctypes::c_int,
        y_mid: crate::ctypes::c_int,
    );
}
extern "C" {
    pub fn EnsureConnectedGrid(
        grid: *mut dungeon_grid_cell,
        grid_size_x: crate::ctypes::c_int,
        grid_size_y: crate::ctypes::c_int,
        grid_starts_x: *mut crate::ctypes::c_int,
        grid_starts_y: *mut crate::ctypes::c_int,
    );
}
extern "C" {
    pub fn SetTerrainObstacleChecked(tile: *mut tile, use_secondary_terrain: bool_, room: u8);
}
extern "C" {
    pub fn FinalizeJunctions();
}
extern "C" {
    pub fn GenerateKecleonShop(
        grid: *mut dungeon_grid_cell,
        grid_size_x: crate::ctypes::c_int,
        grid_size_y: crate::ctypes::c_int,
        spawn_chance: crate::ctypes::c_int,
    );
}
extern "C" {
    pub fn GenerateMonsterHouse(
        grid: *mut dungeon_grid_cell,
        grid_size_x: crate::ctypes::c_int,
        grid_size_y: crate::ctypes::c_int,
        spawn_chance: crate::ctypes::c_int,
    );
}
extern "C" {
    pub fn GenerateMazeRoom(
        grid: *mut dungeon_grid_cell,
        grid_size_x: crate::ctypes::c_int,
        grid_size_y: crate::ctypes::c_int,
        spawn_chance: crate::ctypes::c_int,
    );
}
extern "C" {
    pub fn GenerateMaze(grid_cell: *mut dungeon_grid_cell, use_secondary_terrain: bool_);
}
extern "C" {
    pub fn GenerateMazeLine(
        x0: crate::ctypes::c_int,
        y0: crate::ctypes::c_int,
        xmin: crate::ctypes::c_int,
        ymin: crate::ctypes::c_int,
        xmax: crate::ctypes::c_int,
        ymax: crate::ctypes::c_int,
        use_secondary_terrain: bool_,
        room: u8,
    );
}
extern "C" {
    pub fn SetSpawnFlag5(grid_cell: *mut dungeon_grid_cell);
}
extern "C" {
    pub fn IsNextToHallway(x: crate::ctypes::c_int, y: crate::ctypes::c_int) -> bool_;
}
extern "C" {
    pub fn ResolveInvalidSpawns();
}
extern "C" {
    pub fn ConvertSecondaryTerrainToChasms();
}
extern "C" {
    pub fn EnsureImpassableTilesAreWalls();
}
extern "C" {
    pub fn InitializeTile(tile: *mut tile);
}
extern "C" {
    pub fn ResetFloor();
}
extern "C" {
    pub fn PosIsOutOfBounds(x: crate::ctypes::c_int, y: crate::ctypes::c_int) -> bool_;
}
extern "C" {
    pub fn ShuffleSpawnPositions(
        spawn_positions: *mut spawn_position,
        n_spawn_positions: crate::ctypes::c_int,
    );
}
extern "C" {
    pub fn SpawnNonEnemies(floor_props: *mut floor_properties, empty_monster_house: bool_);
}
extern "C" {
    pub fn SpawnEnemies(floor_props: *mut floor_properties, empty_monster_house: bool_);
}
extern "C" {
    pub fn SetSecondaryTerrainOnWall(tile: *mut tile);
}
extern "C" {
    pub fn GenerateSecondaryTerrainFormations(test_flag: u8, floor_props: *mut floor_properties);
}
extern "C" {
    pub fn StairsAlwaysReachable(
        x_stairs: crate::ctypes::c_int,
        y_stairs: crate::ctypes::c_int,
        mark_unreachable: bool_,
    ) -> bool_;
}
extern "C" {
    pub fn ConvertWallsToChasms();
}
extern "C" {
    pub fn ResetInnerBoundaryTileRows();
}
extern "C" {
    pub fn SpawnStairs(pos: *mut u8, gen_info: *mut dungeon_generation_info, hidden_stairs: bool_);
}
extern "C" {
    pub fn LoadFixedRoomData();
}
extern "C" {
    pub fn IsHiddenStairsFloor() -> bool_;
}
extern "C" {
    pub fn HasHeldItem(entity: *mut entity, item_id: item_id) -> bool_;
}
extern "C" {
    pub fn CheckTeamItemsFlags(flags: crate::ctypes::c_int) -> bool_;
}
extern "C" {
    pub fn CheckActiveChallengeRequest() -> bool_;
}
extern "C" {
    pub fn IsOutlawOrChallengeRequestFloor() -> bool_;
}
extern "C" {
    pub fn IsCurrentMissionType(type_: mission_type::Type) -> bool_;
}
extern "C" {
    pub fn IsCurrentMissionTypeExact(type_: mission_type::Type, subtype: mission_subtype) -> bool_;
}
extern "C" {
    pub fn IsOutlawMonsterHouseFloor() -> bool_;
}
extern "C" {
    pub fn IsGoldenChamber() -> bool_;
}
extern "C" {
    pub fn IsLegendaryChallengeFloor() -> bool_;
}
extern "C" {
    pub fn IsJirachiChallengeFloor() -> bool_;
}
extern "C" {
    pub fn IsDestinationFloorWithMonster() -> bool_;
}
extern "C" {
    pub fn LoadMissionMonsterSprites();
}
extern "C" {
    pub fn MissionTargetEnemyIsDefeated() -> bool_;
}
extern "C" {
    pub fn SetMissionTargetEnemyDefeated(defeated: bool_);
}
extern "C" {
    pub fn IsDestinationFloorWithFixedRoom() -> bool_;
}
extern "C" {
    pub fn GetItemToRetrieve() -> item_id;
}
extern "C" {
    pub fn GetItemToDeliver() -> item_id;
}
extern "C" {
    pub fn GetSpecialTargetItem() -> item_id;
}
extern "C" {
    pub fn IsDestinationFloorWithItem() -> bool_;
}
extern "C" {
    pub fn IsDestinationFloorWithHiddenOutlaw() -> bool_;
}
extern "C" {
    pub fn IsDestinationFloorWithFleeingOutlaw() -> bool_;
}
extern "C" {
    pub fn GetMissionTargetEnemy() -> monster_id;
}
extern "C" {
    pub fn GetMissionEnemyMinionGroup(i: crate::ctypes::c_int) -> monster_id;
}
extern "C" {
    pub fn SetTargetMonsterNotFoundFlag(value: bool_);
}
extern "C" {
    pub fn GetTargetMonsterNotFoundFlag() -> bool_;
}
extern "C" {
    pub fn FloorHasMissionMonster(mission_dst: *mut mission_destination_info) -> bool_;
}
extern "C" {
    pub fn LogMessageByIdWithPopupCheckUser(user: *mut entity, message_id: crate::ctypes::c_int);
}
extern "C" {
    pub fn LogMessageWithPopupCheckUser(user: *mut entity, message: *const crate::ctypes::c_char);
}
extern "C" {
    pub fn LogMessageByIdQuiet(user: *mut entity, message_id: crate::ctypes::c_int);
}
extern "C" {
    pub fn LogMessageQuiet(user: *mut entity, message: *const crate::ctypes::c_char);
}
extern "C" {
    pub fn LogMessageByIdWithPopupCheckUserTarget(
        user: *mut entity,
        target: *mut entity,
        message_id: crate::ctypes::c_int,
    );
}
extern "C" {
    pub fn LogMessageWithPopupCheckUserTarget(
        user: *mut entity,
        target: *mut entity,
        message: *const crate::ctypes::c_char,
    );
}
extern "C" {
    pub fn LogMessageByIdQuietCheckUserTarget(
        user: *mut entity,
        target: *mut entity,
        message_id: crate::ctypes::c_int,
    );
}
extern "C" {
    pub fn LogMessageByIdWithPopupCheckUserUnknown(
        user: *mut entity,
        param_2: *mut undefined4,
        message_id: crate::ctypes::c_int,
    );
}
extern "C" {
    pub fn LogMessageByIdWithPopup(user: *mut entity, message_id: crate::ctypes::c_int);
}
extern "C" {
    pub fn LogMessageWithPopup(user: *mut entity, message: *const crate::ctypes::c_char);
}
extern "C" {
    pub fn LogMessage(user: *mut entity, message: *const crate::ctypes::c_char, show_popup: bool_);
}
extern "C" {
    pub fn LogMessageById(user: *mut entity, message_id: crate::ctypes::c_int, show_popup: bool_);
}
extern "C" {
    pub fn OpenMessageLog(param_1: undefined4, param_2: undefined4);
}
extern "C" {
    pub fn RunDungeonMode(param_1: *mut undefined4, param_2: undefined4) -> bool_;
}
extern "C" {
    pub fn DisplayDungeonTip(message_tip: *mut message_tip, log: bool_);
}
extern "C" {
    pub fn SetBothScreensWindowColorToDefault();
}
extern "C" {
    pub fn DisplayMessage(
        param_1: undefined4,
        message_id: crate::ctypes::c_int,
        wait_for_input: bool_,
    );
}
extern "C" {
    pub fn DisplayMessage2(
        param_1: undefined4,
        message_id: crate::ctypes::c_int,
        wait_for_input: bool_,
    );
}
extern "C" {
    pub fn YesNoMenu(
        param_1: undefined,
        message_id: crate::ctypes::c_int,
        default_option: crate::ctypes::c_int,
        param_4: undefined,
    ) -> bool_;
}
extern "C" {
    pub fn DisplayMessageInternal(
        message_id: crate::ctypes::c_int,
        wait_for_input: bool_,
        param_3: undefined4,
        param_4: undefined4,
        param_5: undefined4,
        param_6: undefined4,
    );
}
extern "C" {
    pub fn OthersMenuLoop() -> crate::ctypes::c_int;
}
extern "C" {
    pub fn OthersMenu() -> undefined;
}
extern "C" {
    pub fn TeamMenu(leader: *mut entity) -> undefined;
}
extern "C" {
    pub fn RestMenu();
}
extern "C" {
    pub fn RecruitmentSearchMenuLoop() -> crate::ctypes::c_int;
}
extern "C" {
    pub fn HelpMenuLoop() -> crate::ctypes::c_int;
}
extern "C" {
    pub static mut MEMORY_ALLOCATION_TABLE: mem_alloc_table;
}
extern "C" {
    pub static mut DEFAULT_MEMORY_ARENA: mem_arena;
}
extern "C" {
    pub static mut DEFAULT_MEMORY_ARENA_BLOCKS: [mem_block; 256usize];
}
extern "C" {
    pub static mut DEFAULT_MEMORY_ARENA_SIZE: u32;
}
extern "C" {
    pub static mut AURA_BOW_ID_LAST: item_id;
}
extern "C" {
    pub static mut NUMBER_OF_ITEMS: u32;
}
extern "C" {
    pub static mut MAX_MONEY_CARRIED: u32;
}
extern "C" {
    pub static mut MAX_MONEY_STORED: u32;
}
extern "C" {
    pub static mut SCRIPT_VARS_VALUES_PTR: *mut script_var_value_table;
}
extern "C" {
    pub static mut MONSTER_ID_LIMIT: u32;
}
extern "C" {
    pub static mut MAX_RECRUITABLE_TEAM_MEMBERS: u32;
}
extern "C" {
    pub static mut CART_REMOVED_IMG_DATA: [undefined; 0usize];
}
extern "C" {
    pub static mut EXCLUSIVE_ITEM_STAT_BOOST_DATA: [exclusive_item_stat_boost_entry; 15usize];
}
extern "C" {
    pub static mut EXCLUSIVE_ITEM_EFFECT_DATA: [exclusive_item_effect_entry; 956usize];
}
extern "C" {
    pub static mut RECOIL_MOVE_LIST: [move_id_16; 11usize];
}
extern "C" {
    pub static mut PUNCH_MOVE_LIST: [move_id_16; 16usize];
}
extern "C" {
    pub static mut SCRIPT_VARS_LOCALS: script_local_var_table;
}
extern "C" {
    pub static mut SCRIPT_VARS: script_var_table;
}
extern "C" {
    pub static mut DUNGEON_DATA_LIST: [dungeon_data_list_entry; 180usize];
}
extern "C" {
    pub static mut DUNGEON_RESTRICTIONS: [dungeon_restriction; 256usize];
}
extern "C" {
    pub static mut SPECIAL_BAND_STAT_BOOST: i16;
}
extern "C" {
    pub static mut MUNCH_BELT_STAT_BOOST: i16;
}
extern "C" {
    pub static mut GUMMI_STAT_BOOST: i16;
}
extern "C" {
    pub static mut MIN_IQ_EXCLUSIVE_MOVE_USER: i32;
}
extern "C" {
    pub static mut WONDER_GUMMI_IQ_GAIN: i16;
}
extern "C" {
    pub static mut AURA_BOW_STAT_BOOST: i16;
}
extern "C" {
    pub static mut MIN_IQ_ITEM_MASTER: i32;
}
extern "C" {
    pub static mut DEF_SCARF_STAT_BOOST: i16;
}
extern "C" {
    pub static mut POWER_BAND_STAT_BOOST: i16;
}
extern "C" {
    pub static mut WONDER_GUMMI_STAT_BOOST: i16;
}
extern "C" {
    pub static mut ZINC_BAND_STAT_BOOST: i16;
}
extern "C" {
    pub static mut TACTICS_UNLOCK_LEVEL_TABLE: [i16; 12usize];
}
extern "C" {
    pub static mut OUTLAW_LEVEL_TABLE: [i16; 16usize];
}
extern "C" {
    pub static mut OUTLAW_MINION_LEVEL_TABLE: [i16; 16usize];
}
extern "C" {
    pub static mut IQ_SKILL_RESTRICTIONS: [i16; 69usize];
}
extern "C" {
    pub static mut SECONDARY_TERRAIN_TYPES: [secondary_terrain_type_8; 200usize];
}
extern "C" {
    pub static mut IQ_SKILLS: [i32; 69usize];
}
extern "C" {
    pub static mut IQ_GROUP_SKILLS: [u8; 400usize];
}
extern "C" {
    pub static mut IQ_GUMMI_GAIN_TABLE: [[i16; 18usize]; 18usize];
}
extern "C" {
    pub static mut GUMMI_BELLY_RESTORE_TABLE: [[i16; 18usize]; 18usize];
}
extern "C" {
    pub static mut BAG_CAPACITY_TABLE: [u32; 8usize];
}
extern "C" {
    pub static mut SPECIAL_EPISODE_MAIN_CHARACTERS: [monster_id_16; 100usize];
}
extern "C" {
    pub static mut GUEST_MONSTER_DATA: [guest_monster; 18usize];
}
extern "C" {
    pub static mut RANK_UP_TABLE: [rankup_table_entry; 13usize];
}
extern "C" {
    pub static mut MONSTER_SPRITE_DATA: [undefined; 1200usize];
}
extern "C" {
    pub static mut MISSION_BANNED_STORY_MONSTERS: [monster_id_16; 21usize];
}
extern "C" {
    pub static mut MISSION_BANNED_MONSTERS: [monster_id_16; 124usize];
}
extern "C" {
    pub static mut EVENTS: [script_level; 0usize];
}
extern "C" {
    pub static mut ENTITIES: [script_entity; 386usize];
}
extern "C" {
    pub static mut MAP_MARKER_PLACEMENTS: [map_marker; 310usize];
}
extern "C" {
    pub static mut MEMORY_ALLOCATION_ARENA_GETTERS: mem_arena_getters;
}
extern "C" {
    pub static mut PRNG_SEQUENCE_NUM: u16;
}
extern "C" {
    pub static mut LOADED_OVERLAY_GROUP_0: overlay_group_id::Type;
}
extern "C" {
    pub static mut LOADED_OVERLAY_GROUP_1: overlay_group_id::Type;
}
extern "C" {
    pub static mut LOADED_OVERLAY_GROUP_2: overlay_group_id::Type;
}
extern "C" {
    pub static mut PACK_FILE_OPENED: *mut pack_file_opened;
}
extern "C" {
    pub static mut PACK_FILE_PATHS_TABLE: [*const crate::ctypes::c_char; 6usize];
}
extern "C" {
    pub static mut MOVE_DATA_TABLE_PTR: *mut move_data_table;
}
extern "C" {
    pub static mut NOTIFY_NOTE: bool_;
}
extern "C" {
    pub static mut DEFAULT_HERO_ID: monster_id_16;
}
extern "C" {
    pub static mut DEFAULT_PARTNER_ID: monster_id_16;
}
extern "C" {
    pub static mut GAME_MODE: u8;
}
extern "C" {
    pub static mut ADVENTURE_LOG_PTR: *mut adventure_log;
}
extern "C" {
    pub static mut ITEM_TABLES_PTRS_1: [*mut crate::ctypes::c_void; 26usize];
}
extern "C" {
    pub static mut SMD_EVENTS_FUN_TABLE: [*mut crate::ctypes::c_void; 127usize];
}
extern "C" {
    pub static mut FIRST_DUNGEON_WITH_MONSTER_HOUSE_TRAPS: dungeon_id_8;
}
extern "C" {
    pub static mut BAD_POISON_DAMAGE_COOLDOWN: i16;
}
extern "C" {
    pub static mut PROTEIN_STAT_BOOST: i16;
}
extern "C" {
    pub static mut SPAWN_CAP_NO_MONSTER_HOUSE: i16;
}
extern "C" {
    pub static mut OREN_BERRY_DAMAGE: i16;
}
extern "C" {
    pub static mut SITRUS_BERRY_HP_RESTORATION: i16;
}
extern "C" {
    pub static mut EXP_ELITE_EXP_BOOST: i16;
}
extern "C" {
    pub static mut MONSTER_HOUSE_MAX_NON_MONSTER_SPAWNS: i16;
}
extern "C" {
    pub static mut GOLD_THORN_POWER: i16;
}
extern "C" {
    pub static mut SPAWN_COOLDOWN: i16;
}
extern "C" {
    pub static mut ORAN_BERRY_FULL_HP_BOOST: i16;
}
extern "C" {
    pub static mut LIFE_SEED_HP_BOOST: i16;
}
extern "C" {
    pub static mut EXCLUSIVE_ITEM_EXP_BOOST: i16;
}
extern "C" {
    pub static mut INTIMIDATOR_ACTIVATION_CHANCE: i16;
}
extern "C" {
    pub static mut ORAN_BERRY_HP_RESTORATION: i16;
}
extern "C" {
    pub static mut SITRUS_BERRY_FULL_HP_BOOST: i16;
}
extern "C" {
    pub static mut BURN_DAMAGE_COOLDOWN: i16;
}
extern "C" {
    pub static mut STICK_POWER: i16;
}
extern "C" {
    pub static mut SPAWN_COOLDOWN_THIEF_ALERT: i16;
}
extern "C" {
    pub static mut MONSTER_HOUSE_MAX_MONSTER_SPAWNS: i16;
}
extern "C" {
    pub static mut SPEED_BOOST_TURNS: i16;
}
extern "C" {
    pub static mut MIRACLE_CHEST_EXP_BOOST: i16;
}
extern "C" {
    pub static mut WONDER_CHEST_EXP_BOOST: i16;
}
extern "C" {
    pub static mut SPAWN_CAP_WITH_MONSTER_HOUSE: i16;
}
extern "C" {
    pub static mut POISON_DAMAGE_COOLDOWN: i16;
}
extern "C" {
    pub static mut GEO_PEBBLE_DAMAGE: i16;
}
extern "C" {
    pub static mut GRAVELEROCK_DAMAGE: i16;
}
extern "C" {
    pub static mut RARE_FOSSIL_DAMAGE: i16;
}
extern "C" {
    pub static mut GINSENG_CHANCE_3: i16;
}
extern "C" {
    pub static mut ZINC_STAT_BOOST: i16;
}
extern "C" {
    pub static mut IRON_STAT_BOOST: i16;
}
extern "C" {
    pub static mut CALCIUM_STAT_BOOST: i16;
}
extern "C" {
    pub static mut CORSOLA_TWIG_POWER: i16;
}
extern "C" {
    pub static mut CACNEA_SPIKE_POWER: i16;
}
extern "C" {
    pub static mut GOLD_FANG_POWER: i16;
}
extern "C" {
    pub static mut SILVER_SPIKE_POWER: i16;
}
extern "C" {
    pub static mut IRON_THORN_POWER: i16;
}
extern "C" {
    pub static mut SLEEP_DURATION_RANGE: [i16; 2usize];
}
extern "C" {
    pub static mut POWER_PITCHER_DAMAGE_MULTIPLIER: crate::ctypes::c_int;
}
extern "C" {
    pub static mut AIR_BLADE_DAMAGE_MULTIPLIER: crate::ctypes::c_int;
}
extern "C" {
    pub static mut SPEED_BOOST_DURATION_RANGE: [i16; 2usize];
}
extern "C" {
    pub static mut OFFENSIVE_STAT_STAGE_MULTIPLIERS: [crate::ctypes::c_int; 21usize];
}
extern "C" {
    pub static mut DEFENSIVE_STAT_STAGE_MULTIPLIERS: [crate::ctypes::c_int; 21usize];
}
extern "C" {
    pub static mut RANDOM_MUSIC_ID_TABLE: [[music_id_16; 4usize]; 30usize];
}
extern "C" {
    pub static mut MALE_ACCURACY_STAGE_MULTIPLIERS: [crate::ctypes::c_int; 21usize];
}
extern "C" {
    pub static mut MALE_EVASION_STAGE_MULTIPLIERS: [crate::ctypes::c_int; 21usize];
}
extern "C" {
    pub static mut FEMALE_ACCURACY_STAGE_MULTIPLIERS: [crate::ctypes::c_int; 21usize];
}
extern "C" {
    pub static mut FEMALE_EVASION_STAGE_MULTIPLIERS: [crate::ctypes::c_int; 21usize];
}
extern "C" {
    pub static mut MUSIC_ID_TABLE: [music_id_16; 170usize];
}
extern "C" {
    pub static mut TYPE_MATCHUP_TABLE: type_matchup_table;
}
extern "C" {
    pub static mut FIXED_ROOM_MONSTER_SPAWN_STATS_TABLE:
        [fixed_room_monster_spawn_stats_entry; 99usize];
}
extern "C" {
    pub static mut TILESET_PROPERTIES: [tileset_property; 199usize];
}
extern "C" {
    pub static mut FIXED_ROOM_PROPERTIES_TABLE: [fixed_room_properties_entry; 256usize];
}
extern "C" {
    pub static mut SCRIPT_OP_CODES: script_opcode_table;
}
extern "C" {
    pub static mut C_ROUTINES: common_routine_table;
}
extern "C" {
    pub static mut OBJECTS: [script_object; 0usize];
}
extern "C" {
    pub static mut RECRUITMENT_TABLE_LOCATIONS: [dungeon_id_16; 22usize];
}
extern "C" {
    pub static mut RECRUITMENT_TABLE_LEVELS: [i16; 22usize];
}
extern "C" {
    pub static mut RECRUITMENT_TABLE_SPECIES: [monster_id_16; 22usize];
}
extern "C" {
    pub static mut LEVEL_TILEMAP_LIST: [level_tilemap_list_entry; 81usize];
}
extern "C" {
    pub static mut OVERLAY11_OVERLAY_LOAD_TABLE: [overlay_load_entry; 21usize];
}
extern "C" {
    pub static mut GROUND_STATE_PTRS: main_ground_data;
}
extern "C" {
    pub static mut STARTERS_PARTNER_IDS: [monster_id_16; 21usize];
}
extern "C" {
    pub static mut STARTERS_HERO_IDS: [monster_id_16; 32usize];
}
extern "C" {
    pub static mut STARTERS_STRINGS: [u16; 48usize];
}
extern "C" {
    pub static mut QUIZ_QUESTION_STRINGS: [u16; 66usize];
}
extern "C" {
    pub static mut QUIZ_ANSWER_STRINGS: [u16; 176usize];
}
extern "C" {
    pub static mut UNKNOWN_MENU_1: [undefined; 72usize];
}
extern "C" {
    pub static mut DUNGEON_STRUCT_SIZE: u32;
}
extern "C" {
    pub static mut MAX_HP_CAP: i32;
}
extern "C" {
    pub static mut OFFSET_OF_DUNGEON_FLOOR_PROPERTIES: u32;
}
extern "C" {
    pub static mut SPAWN_RAND_MAX: i32;
}
extern "C" {
    pub static mut DUNGEON_PRNG_LCG_MULTIPLIER: u32;
}
extern "C" {
    pub static mut DUNGEON_PRNG_LCG_INCREMENT_SECONDARY: u32;
}
extern "C" {
    pub static mut KECLEON_FEMALE_ID: monster_id;
}
extern "C" {
    pub static mut KECLEON_MALE_ID: monster_id;
}
extern "C" {
    pub static mut MSG_ID_SLOW_START: i32;
}
extern "C" {
    pub static mut EXPERIENCE_POINT_GAIN_CAP: i32;
}
extern "C" {
    pub static mut JUDGMENT_MOVE_ID: move_id;
}
extern "C" {
    pub static mut REGULAR_ATTACK_MOVE_ID: move_id;
}
extern "C" {
    pub static mut DEOXYS_ATTACK_ID: monster_id;
}
extern "C" {
    pub static mut DEOXYS_SPEED_ID: monster_id;
}
extern "C" {
    pub static mut GIRATINA_ALTERED_ID: monster_id;
}
extern "C" {
    pub static mut PUNISHMENT_MOVE_ID: move_id;
}
extern "C" {
    pub static mut OFFENSE_STAT_MAX: i32;
}
extern "C" {
    pub static mut PROJECTILE_MOVE_ID: move_id;
}
extern "C" {
    pub static mut BELLY_LOST_PER_TURN: crate::ctypes::c_int;
}
extern "C" {
    pub static mut MOVE_TARGET_AND_RANGE_SPECIAL_USER_HEALING: move_target_and_range;
}
extern "C" {
    pub static mut PLAIN_SEED_VALUE: i32;
}
extern "C" {
    pub static mut MAX_ELIXIR_PP_RESTORATION: i32;
}
extern "C" {
    pub static mut SLIP_SEED_VALUE: i32;
}
extern "C" {
    pub static mut CASTFORM_NORMAL_FORM_MALE_ID: monster_id;
}
extern "C" {
    pub static mut CASTFORM_NORMAL_FORM_FEMALE_ID: monster_id;
}
extern "C" {
    pub static mut CHERRIM_SUNSHINE_FORM_MALE_ID: monster_id;
}
extern "C" {
    pub static mut CHERRIM_OVERCAST_FORM_FEMALE_ID: monster_id;
}
extern "C" {
    pub static mut CHERRIM_SUNSHINE_FORM_FEMALE_ID: monster_id;
}
extern "C" {
    pub static mut FLOOR_GENERATION_STATUS_PTR: *mut floor_generation_status;
}
extern "C" {
    pub static mut OFFSET_OF_DUNGEON_N_NORMAL_ITEM_SPAWNS: u32;
}
extern "C" {
    pub static mut DUNGEON_GRID_COLUMN_BYTES: u32;
}
extern "C" {
    pub static mut DEFAULT_MAX_POSITION: i32;
}
extern "C" {
    pub static mut OFFSET_OF_DUNGEON_GUARANTEED_ITEM_ID: u32;
}
extern "C" {
    pub static mut FIXED_ROOM_TILE_SPAWN_TABLE: [fixed_room_tile_spawn_entry; 11usize];
}
extern "C" {
    pub static mut FIXED_ROOM_REVISIT_OVERRIDES: [fixed_room_id_8; 256usize];
}
extern "C" {
    pub static mut FIXED_ROOM_MONSTER_SPAWN_TABLE: [fixed_room_monster_spawn_entry; 120usize];
}
extern "C" {
    pub static mut FIXED_ROOM_ITEM_SPAWN_TABLE: [fixed_room_item_spawn_entry; 63usize];
}
extern "C" {
    pub static mut FIXED_ROOM_ENTITY_SPAWN_TABLE: [fixed_room_entity_spawn_entry; 269usize];
}
extern "C" {
    pub static mut STATUS_ICON_ARRAY_MUZZLED: [status_icon_flags; 2usize];
}
extern "C" {
    pub static mut STATUS_ICON_ARRAY_MAGNET_RISE: [status_icon_flags; 2usize];
}
extern "C" {
    pub static mut STATUS_ICON_ARRAY_MIRACLE_EYE: [status_icon_flags; 3usize];
}
extern "C" {
    pub static mut STATUS_ICON_ARRAY_LEECH_SEED: [status_icon_flags; 3usize];
}
extern "C" {
    pub static mut STATUS_ICON_ARRAY_LONG_TOSS: [status_icon_flags; 3usize];
}
extern "C" {
    pub static mut STATUS_ICON_ARRAY_BLINDED: [status_icon_flags; 5usize];
}
extern "C" {
    pub static mut STATUS_ICON_ARRAY_BURN: [status_icon_flags; 5usize];
}
extern "C" {
    pub static mut STATUS_ICON_ARRAY_SURE_SHOT: [status_icon_flags; 5usize];
}
extern "C" {
    pub static mut STATUS_ICON_ARRAY_INVISIBLE: [status_icon_flags; 5usize];
}
extern "C" {
    pub static mut STATUS_ICON_ARRAY_SLEEP: [status_icon_flags; 8usize];
}
extern "C" {
    pub static mut STATUS_ICON_ARRAY_CURSE: [status_icon_flags; 7usize];
}
extern "C" {
    pub static mut STATUS_ICON_ARRAY_FREEZE: [status_icon_flags; 8usize];
}
extern "C" {
    pub static mut STATUS_ICON_ARRAY_CRINGE: [status_icon_flags; 8usize];
}
extern "C" {
    pub static mut STATUS_ICON_ARRAY_BIDE: [status_icon_flags; 14usize];
}
extern "C" {
    pub static mut STATUS_ICON_ARRAY_REFLECT: [status_icon_flags; 18usize];
}
extern "C" {
    pub static mut DIRECTIONS_XY: [[i16; 2usize]; 8usize];
}
extern "C" {
    pub static mut ITEM_CATEGORY_ACTIONS: [action_16; 16usize];
}
extern "C" {
    pub static mut FRACTIONAL_TURN_SEQUENCE: [i16; 125usize];
}
extern "C" {
    pub static mut BELLY_DRAIN_IN_WALLS_INT: u16;
}
extern "C" {
    pub static mut BELLY_DRAIN_IN_WALLS_THOUSANDTHS: u16;
}
extern "C" {
    pub static mut SPATK_STAT_IDX: i32;
}
extern "C" {
    pub static mut ATK_STAT_IDX: i32;
}
extern "C" {
    pub static mut CORNER_CARDINAL_NEIGHBOR_IS_OPEN: [[bool_; 8usize]; 4usize];
}
extern "C" {
    pub static mut DUNGEON_PTR: *mut dungeon;
}
extern "C" {
    pub static mut DUNGEON_PTR_MASTER: *mut dungeon;
}
extern "C" {
    pub static mut LEADER_PTR: *mut entity;
}
extern "C" {
    pub static mut DUNGEON_PRNG_STATE: prng_state;
}
extern "C" {
    pub static mut DUNGEON_PRNG_STATE_SECONDARY_VALUES: [u32; 5usize];
}
extern "C" {
    pub static mut EXCL_ITEM_EFFECTS_WEATHER_ATK_SPEED_BOOST: [exclusive_item_effect_id_8; 8usize];
}
extern "C" {
    pub static mut EXCL_ITEM_EFFECTS_WEATHER_MOVE_SPEED_BOOST: [exclusive_item_effect_id_8; 8usize];
}
extern "C" {
    pub static mut EXCL_ITEM_EFFECTS_WEATHER_NO_STATUS: [exclusive_item_effect_id_8; 8usize];
}
extern "C" {
    pub static mut EXCL_ITEM_EFFECTS_EVASION_BOOST: [exclusive_item_effect_id_8; 8usize];
}
extern "C" {
    pub static mut DEFAULT_TILE: tile;
}
extern "C" {
    pub static mut FIXED_ROOM_DATA_PTR: *mut crate::ctypes::c_void;
}
extern "C" {
    pub static mut DUNGEON_COLORMAP_PTR: *mut rgb;
}
extern "C" {
    pub static mut DUNGEON_STRUCT: dungeon;
}
extern "C" {
    pub static mut MOVE_DATA_TABLE: move_data_table;
}
extern "C" {
    pub static mut FRAMES_SINCE_LAUNCH: u32;
}
extern "C" {
    pub static mut BAG_ITEMS: [item; 50usize];
}
extern "C" {
    pub static mut BAG_ITEMS_PTR: *mut item;
}
extern "C" {
    pub static mut STORAGE_ITEMS: [item_id_16; 1000usize];
}
extern "C" {
    pub static mut STORAGE_ITEM_QUANTITIES: [u16; 1000usize];
}
extern "C" {
    pub static mut KECLEON_SHOP_ITEMS_PTR: *mut bulk_item;
}
extern "C" {
    pub static mut KECLEON_SHOP_ITEMS: [bulk_item; 8usize];
}
extern "C" {
    pub static mut UNUSED_KECLEON_SHOP_ITEMS: [bulk_item; 8usize];
}
extern "C" {
    pub static mut KECLEON_WARES_ITEMS_PTR: *mut bulk_item;
}
extern "C" {
    pub static mut KECLEON_WARES_ITEMS: [bulk_item; 4usize];
}
extern "C" {
    pub static mut UNUSED_KECLEON_WARES_ITEMS: [bulk_item; 4usize];
}
extern "C" {
    pub static mut MONEY_CARRIED: i32;
}
extern "C" {
    pub static mut MONEY_STORED: i32;
}
extern "C" {
    pub static mut LAST_NEW_MOVE: move_;
}
extern "C" {
    pub static mut SCRIPT_VARS_VALUES: script_var_value_table;
}
extern "C" {
    pub static mut BAG_LEVEL: u8;
}
extern "C" {
    pub static mut DEBUG_SPECIAL_EPISODE_NUMBER: special_episode_type_8;
}
extern "C" {
    pub static mut PENDING_DUNGEON_ID: dungeon_id_8;
}
extern "C" {
    pub static mut PENDING_STARTING_FLOOR: u8;
}
extern "C" {
    pub static mut PLAY_TIME_SECONDS: u32;
}
extern "C" {
    pub static mut PLAY_TIME_FRAME_COUNTER: u8;
}
extern "C" {
    pub static mut TEAM_NAME: [crate::ctypes::c_char; 10usize];
}
extern "C" {
    pub static mut HERO_SPECIES_ID: monster_id_16;
}
extern "C" {
    pub static mut HERO_NICKNAME: [crate::ctypes::c_char; 10usize];
}
extern "C" {
    pub static mut PARTNER_SPECIES_ID: monster_id_16;
}
extern "C" {
    pub static mut LEADER_IQ_SKILLS: [u32; 3usize];
}
extern "C" {
    pub static mut LEADER_NICKNAME: [crate::ctypes::c_char; 10usize];
}
extern "C" {
    pub static mut PARTY_MEMBER_2_IQ_SKILLS: [u32; 3usize];
}
extern "C" {
    pub static mut FRAMES_SINCE_LAUNCH_TIMES_THREE: u32;
}
extern "C" {
    pub static mut TURNING_ON_THE_SPOT_FLAG: bool_;
}
extern "C" {
    pub static mut FLOOR_GENERATION_STATUS: floor_generation_status;
}
#[repr(C)]
pub struct move_effect_input {
    pub move_id: crate::ctypes::c_int,
    pub item_id: crate::ctypes::c_int,
    pub out_dealt_damage: bool_,
}
extern "C" {
    pub fn CustomApplyItemEffect(
        user: *mut entity,
        target: *mut entity,
        item: *mut item,
        is_thrown: bool_,
    ) -> bool_;
}
extern "C" {
    pub fn CustomApplyMoveEffect(
        data: *mut move_effect_input,
        user: *mut entity,
        target: *mut entity,
        move_: *mut move_,
    ) -> bool_;
}
extern "C" {
    pub fn CustomScriptSpecialProcessCall(
        unknown: *mut undefined4,
        special_process_id: u32,
        arg1: crate::ctypes::c_short,
        arg2: crate::ctypes::c_short,
        return_val: *mut crate::ctypes::c_int,
    ) -> bool_;
}
